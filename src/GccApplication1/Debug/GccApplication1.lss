
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001404  00001498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800066  00800066  0000149e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000149e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000174f  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5f  00000000  00000000  00002e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e85  00000000  00000000  000038ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c8  00000000  00000000  00004754  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088c  00000000  00000000  00004c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a5d  00000000  00000000  000054a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00005f05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_1>
       8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_2>
       c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_3>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__vector_10>
      2c:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__vector_11>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	e4 e0       	ldi	r30, 0x04	; 4
      a4:	f4 e1       	ldi	r31, 0x14	; 20
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 36       	cpi	r26, 0x66	; 102
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	a6 e6       	ldi	r26, 0x66	; 102
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 38       	cpi	r26, 0x87	; 135
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 a3 03 	call	0x746	; 0x746 <main>
      c6:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <ADC_init>:
      ce:	8e ef       	ldi	r24, 0xFE	; 254
      d0:	8a bb       	out	0x1a, r24	; 26
      d2:	80 e4       	ldi	r24, 0x40	; 64
      d4:	87 b9       	out	0x07, r24	; 7
      d6:	87 e8       	ldi	r24, 0x87	; 135
      d8:	86 b9       	out	0x06, r24	; 6
      da:	08 95       	ret

000000dc <ADC_read>:
      dc:	97 b1       	in	r25, 0x07	; 7
      de:	8f 70       	andi	r24, 0x0F	; 15
      e0:	98 2b       	or	r25, r24
      e2:	97 b9       	out	0x07, r25	; 7
      e4:	86 b1       	in	r24, 0x06	; 6
      e6:	80 64       	ori	r24, 0x40	; 64
      e8:	86 b9       	out	0x06, r24	; 6
      ea:	34 9b       	sbis	0x06, 4	; 6
      ec:	fe cf       	rjmp	.-4      	; 0xea <ADC_read+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ee:	83 e0       	ldi	r24, 0x03	; 3
      f0:	8a 95       	dec	r24
      f2:	f1 f7       	brne	.-4      	; 0xf0 <ADC_read+0x14>
      f4:	00 00       	nop
      f6:	24 b1       	in	r18, 0x04	; 4
      f8:	35 b1       	in	r19, 0x05	; 5
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	93 2f       	mov	r25, r19
      fe:	82 0f       	add	r24, r18
     100:	91 1d       	adc	r25, r1
     102:	08 95       	ret

00000104 <EEPROM_write>:
#include "EEPROM_private.h"

void EEPROM_write(unsigned short int Address,unsigned char Data)
{
	//wait for completion of previous write
	while(EECR & (1<<1));
     104:	e1 99       	sbic	0x1c, 1	; 28
     106:	fe cf       	rjmp	.-4      	; 0x104 <EEPROM_write>
	//write address to address register and write data to data register
	EEAR = Address;
     108:	9f bb       	out	0x1f, r25	; 31
     10a:	8e bb       	out	0x1e, r24	; 30
	EEDR = Data;
     10c:	6d bb       	out	0x1d, r22	; 29
	//write logic one to EEMWE(EEPROM master write enable)
	EECR |= (1<<2);
     10e:	8c b3       	in	r24, 0x1c	; 28
     110:	84 60       	ori	r24, 0x04	; 4
     112:	8c bb       	out	0x1c, r24	; 28
	//start EEPROM write by setting EEWE(EEPROM write enable)
	EECR |= (1<<1);
     114:	8c b3       	in	r24, 0x1c	; 28
     116:	82 60       	ori	r24, 0x02	; 2
     118:	8c bb       	out	0x1c, r24	; 28
     11a:	08 95       	ret

0000011c <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned short int Address)
{
	//wait for completion of previous write
	while(EECR & (1<<1));
     11c:	e1 99       	sbic	0x1c, 1	; 28
     11e:	fe cf       	rjmp	.-4      	; 0x11c <EEPROM_read>
	//put address EEPROM address register
	EEAR = Address;
     120:	9f bb       	out	0x1f, r25	; 31
     122:	8e bb       	out	0x1e, r24	; 30
	//start EEPROM read by setting EERE(EEPROM read enable)
	EECR |= (1<<0);
     124:	8c b3       	in	r24, 0x1c	; 28
     126:	81 60       	ori	r24, 0x01	; 1
     128:	8c bb       	out	0x1c, r24	; 28
	//return data from EEPROM data register
	return EEDR;
     12a:	8d b3       	in	r24, 0x1d	; 29
     12c:	08 95       	ret

0000012e <EXTI0_voidEnable>:
	GIE_voidDisable();
	EXTI0_voidClearFlag();
}
void EXTI0_voidEnable(void)
{
	SET_BIT(GICR , 6);
     12e:	8b b7       	in	r24, 0x3b	; 59
     130:	80 64       	ori	r24, 0x40	; 64
     132:	8b bf       	out	0x3b, r24	; 59
     134:	08 95       	ret

00000136 <EXTI0_voidDisable>:
}
void EXTI0_voidDisable(void)
{
	CLEAR_BIT(GICR , 6);
     136:	8b b7       	in	r24, 0x3b	; 59
     138:	8f 7b       	andi	r24, 0xBF	; 191
     13a:	8b bf       	out	0x3b, r24	; 59
     13c:	08 95       	ret

0000013e <EXTI0_voidClearFlag>:
}
void EXTI0_voidClearFlag(void)
{
	SET_BIT(GIFR , 6);
     13e:	8a b7       	in	r24, 0x3a	; 58
     140:	80 64       	ori	r24, 0x40	; 64
     142:	8a bf       	out	0x3a, r24	; 58
     144:	08 95       	ret

00000146 <EXTI0_voidInit>:
{
	#if EXTI0_u8_ISC == EXTI0_u8_LOW_LEVEL
	CLEAR_BIT(MCUCR,0);
	CLEAR_BIT(MCUCR,1);
	#elif EXTI0_u8_ISC == EXTI0_u8_RISING
	SET_BIT(MCUCR,0);
     146:	85 b7       	in	r24, 0x35	; 53
     148:	81 60       	ori	r24, 0x01	; 1
     14a:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,1);	
     14c:	85 b7       	in	r24, 0x35	; 53
     14e:	82 60       	ori	r24, 0x02	; 2
     150:	85 bf       	out	0x35, r24	; 53
	#elif EXTI0_u8_ISC == EXTI0_u8_ANY_CHANGE
	SET_BIT(MCUCR,0);
	CLEAR_BIT(MCUCR,1);	
	#endif
	
	EXTI0_voidDisable();
     152:	0e 94 9b 00 	call	0x136	; 0x136 <EXTI0_voidDisable>
	GIE_voidDisable();
     156:	0e 94 67 01 	call	0x2ce	; 0x2ce <GIE_voidDisable>
	EXTI0_voidClearFlag();
     15a:	0e 94 9f 00 	call	0x13e	; 0x13e <EXTI0_voidClearFlag>
     15e:	08 95       	ret

00000160 <EXTI0_Set_CallBack>:
void EXTI0_voidClearFlag(void)
{
	SET_BIT(GIFR , 6);
}
void EXTI0_Set_CallBack(void (*fun_ptr) (void)){
    EXTI_0_CallBack = fun_ptr;
     160:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <EXTI_0_CallBack+0x1>
     164:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <EXTI_0_CallBack>
     168:	08 95       	ret

0000016a <__vector_1>:
}
void __vector_1(void) __attribute__((signal , used));
void __vector_1(void)
{
     16a:	1f 92       	push	r1
     16c:	0f 92       	push	r0
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	0f 92       	push	r0
     172:	11 24       	eor	r1, r1
     174:	2f 93       	push	r18
     176:	3f 93       	push	r19
     178:	4f 93       	push	r20
     17a:	5f 93       	push	r21
     17c:	6f 93       	push	r22
     17e:	7f 93       	push	r23
     180:	8f 93       	push	r24
     182:	9f 93       	push	r25
     184:	af 93       	push	r26
     186:	bf 93       	push	r27
     188:	ef 93       	push	r30
     18a:	ff 93       	push	r31
	EXTI_0_CallBack();
     18c:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <EXTI_0_CallBack>
     190:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <EXTI_0_CallBack+0x1>
     194:	09 95       	icall
}
     196:	ff 91       	pop	r31
     198:	ef 91       	pop	r30
     19a:	bf 91       	pop	r27
     19c:	af 91       	pop	r26
     19e:	9f 91       	pop	r25
     1a0:	8f 91       	pop	r24
     1a2:	7f 91       	pop	r23
     1a4:	6f 91       	pop	r22
     1a6:	5f 91       	pop	r21
     1a8:	4f 91       	pop	r20
     1aa:	3f 91       	pop	r19
     1ac:	2f 91       	pop	r18
     1ae:	0f 90       	pop	r0
     1b0:	0f be       	out	0x3f, r0	; 63
     1b2:	0f 90       	pop	r0
     1b4:	1f 90       	pop	r1
     1b6:	18 95       	reti

000001b8 <EXTI1_voidEnable>:
	GIE_voidDisable();
	EXTI1_voidClearFlag();
}
void EXTI1_voidEnable(void)
{
	SET_BIT(GICR , 7);
     1b8:	8b b7       	in	r24, 0x3b	; 59
     1ba:	80 68       	ori	r24, 0x80	; 128
     1bc:	8b bf       	out	0x3b, r24	; 59
     1be:	08 95       	ret

000001c0 <EXTI1_voidDisable>:
}
void EXTI1_voidDisable(void)
{
	CLEAR_BIT(GICR , 7);
     1c0:	8b b7       	in	r24, 0x3b	; 59
     1c2:	8f 77       	andi	r24, 0x7F	; 127
     1c4:	8b bf       	out	0x3b, r24	; 59
     1c6:	08 95       	ret

000001c8 <EXTI1_voidClearFlag>:
}
void EXTI1_voidClearFlag(void)
{
	SET_BIT(GIFR , 7);
     1c8:	8a b7       	in	r24, 0x3a	; 58
     1ca:	80 68       	ori	r24, 0x80	; 128
     1cc:	8a bf       	out	0x3a, r24	; 58
     1ce:	08 95       	ret

000001d0 <EXTI1_voidInit>:
{
	#if EXTI1_u8_ISC == EXTI1_u8_LOW_LEVEL
	CLEAR_BIT(MCUCR,2);
	CLEAR_BIT(MCUCR,3);
	#elif EXTI0_u8_ISC == EXTI0_u8_RISING
	SET_BIT(MCUCR,2);
     1d0:	85 b7       	in	r24, 0x35	; 53
     1d2:	84 60       	ori	r24, 0x04	; 4
     1d4:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,3);	
     1d6:	85 b7       	in	r24, 0x35	; 53
     1d8:	88 60       	ori	r24, 0x08	; 8
     1da:	85 bf       	out	0x35, r24	; 53
	#elif EXTI0_u8_ISC == EXTI0_u8_ANY_CHANGE
	SET_BIT(MCUCR,2);
	CLEAR_BIT(MCUCR,3);	
	#endif
	
	EXTI1_voidDisable();
     1dc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <EXTI1_voidDisable>
	GIE_voidDisable();
     1e0:	0e 94 67 01 	call	0x2ce	; 0x2ce <GIE_voidDisable>
	EXTI1_voidClearFlag();
     1e4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <EXTI1_voidClearFlag>
     1e8:	08 95       	ret

000001ea <EXTI1_Set_CallBack>:
void EXTI1_voidClearFlag(void)
{
	SET_BIT(GIFR , 7);
}
void EXTI1_Set_CallBack(void (*fun_ptr) (void)){
    EXTI_1_CallBack = fun_ptr;
     1ea:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <EXTI_1_CallBack+0x1>
     1ee:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <EXTI_1_CallBack>
     1f2:	08 95       	ret

000001f4 <__vector_2>:
}
void __vector_2(void) __attribute__((signal , used));
void __vector_2(void)
{
     1f4:	1f 92       	push	r1
     1f6:	0f 92       	push	r0
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	0f 92       	push	r0
     1fc:	11 24       	eor	r1, r1
     1fe:	2f 93       	push	r18
     200:	3f 93       	push	r19
     202:	4f 93       	push	r20
     204:	5f 93       	push	r21
     206:	6f 93       	push	r22
     208:	7f 93       	push	r23
     20a:	8f 93       	push	r24
     20c:	9f 93       	push	r25
     20e:	af 93       	push	r26
     210:	bf 93       	push	r27
     212:	ef 93       	push	r30
     214:	ff 93       	push	r31
	EXTI_1_CallBack();
     216:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <EXTI_1_CallBack>
     21a:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <EXTI_1_CallBack+0x1>
     21e:	09 95       	icall
}
     220:	ff 91       	pop	r31
     222:	ef 91       	pop	r30
     224:	bf 91       	pop	r27
     226:	af 91       	pop	r26
     228:	9f 91       	pop	r25
     22a:	8f 91       	pop	r24
     22c:	7f 91       	pop	r23
     22e:	6f 91       	pop	r22
     230:	5f 91       	pop	r21
     232:	4f 91       	pop	r20
     234:	3f 91       	pop	r19
     236:	2f 91       	pop	r18
     238:	0f 90       	pop	r0
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	0f 90       	pop	r0
     23e:	1f 90       	pop	r1
     240:	18 95       	reti

00000242 <EXTI2_voidEnable>:
	GIE_voidDisable();
	EXTI2_voidClearFlag();
}
void EXTI2_voidEnable(void)
{
	SET_BIT(GICR , 5);
     242:	8b b7       	in	r24, 0x3b	; 59
     244:	80 62       	ori	r24, 0x20	; 32
     246:	8b bf       	out	0x3b, r24	; 59
     248:	08 95       	ret

0000024a <EXTI2_voidDisable>:
}
void EXTI2_voidDisable(void)
{
	CLEAR_BIT(GICR , 5);
     24a:	8b b7       	in	r24, 0x3b	; 59
     24c:	8f 7d       	andi	r24, 0xDF	; 223
     24e:	8b bf       	out	0x3b, r24	; 59
     250:	08 95       	ret

00000252 <EXTI2_voidClearFlag>:
}
void EXTI2_voidClearFlag(void)
{
	SET_BIT(GIFR , 5);
     252:	8a b7       	in	r24, 0x3a	; 58
     254:	80 62       	ori	r24, 0x20	; 32
     256:	8a bf       	out	0x3a, r24	; 58
     258:	08 95       	ret

0000025a <EXTI2_voidInit>:
void (*EXTI_2_CallBack) (void) ;

void EXTI2_voidInit(void)
{
	#if EXTI0_u8_ISC == EXTI0_u8_RISING
	SET_BIT(MCUCSR,6);	
     25a:	84 b7       	in	r24, 0x34	; 52
     25c:	80 64       	ori	r24, 0x40	; 64
     25e:	84 bf       	out	0x34, r24	; 52
	#elif EXTI0_u8_ISC == EXTI0_u8_FALLING
	CLEAR_BIT(MCUCSR,6);	
	#endif
	
	EXTI2_voidDisable();
     260:	0e 94 25 01 	call	0x24a	; 0x24a <EXTI2_voidDisable>
	GIE_voidDisable();
     264:	0e 94 67 01 	call	0x2ce	; 0x2ce <GIE_voidDisable>
	EXTI2_voidClearFlag();
     268:	0e 94 29 01 	call	0x252	; 0x252 <EXTI2_voidClearFlag>
     26c:	08 95       	ret

0000026e <EXTI2_Set_CallBack>:
void EXTI2_voidClearFlag(void)
{
	SET_BIT(GIFR , 5);
}
void EXTI2_Set_CallBack(void (*fun_ptr) (void)){
    EXTI_2_CallBack = fun_ptr;
     26e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <EXTI_2_CallBack+0x1>
     272:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <EXTI_2_CallBack>
     276:	08 95       	ret

00000278 <__vector_3>:
}
void __vector_3(void) __attribute__((signal , used));
void __vector_3(void)
{
     278:	1f 92       	push	r1
     27a:	0f 92       	push	r0
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	0f 92       	push	r0
     280:	11 24       	eor	r1, r1
     282:	2f 93       	push	r18
     284:	3f 93       	push	r19
     286:	4f 93       	push	r20
     288:	5f 93       	push	r21
     28a:	6f 93       	push	r22
     28c:	7f 93       	push	r23
     28e:	8f 93       	push	r24
     290:	9f 93       	push	r25
     292:	af 93       	push	r26
     294:	bf 93       	push	r27
     296:	ef 93       	push	r30
     298:	ff 93       	push	r31
	EXTI_2_CallBack();
     29a:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <EXTI_2_CallBack>
     29e:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <EXTI_2_CallBack+0x1>
     2a2:	09 95       	icall
     2a4:	ff 91       	pop	r31
     2a6:	ef 91       	pop	r30
     2a8:	bf 91       	pop	r27
     2aa:	af 91       	pop	r26
     2ac:	9f 91       	pop	r25
     2ae:	8f 91       	pop	r24
     2b0:	7f 91       	pop	r23
     2b2:	6f 91       	pop	r22
     2b4:	5f 91       	pop	r21
     2b6:	4f 91       	pop	r20
     2b8:	3f 91       	pop	r19
     2ba:	2f 91       	pop	r18
     2bc:	0f 90       	pop	r0
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	0f 90       	pop	r0
     2c2:	1f 90       	pop	r1
     2c4:	18 95       	reti

000002c6 <GIE_voidEnable>:
     2c6:	8f b7       	in	r24, 0x3f	; 63
     2c8:	80 68       	ori	r24, 0x80	; 128
     2ca:	8f bf       	out	0x3f, r24	; 63
     2cc:	08 95       	ret

000002ce <GIE_voidDisable>:
     2ce:	8f b7       	in	r24, 0x3f	; 63
     2d0:	8f 77       	andi	r24, 0x7F	; 127
     2d2:	8f bf       	out	0x3f, r24	; 63
     2d4:	08 95       	ret

000002d6 <EXTI2_ISR>:
}


void EXTI2_ISR (void)
{
	if(EXTI2_flag == 1)
     2d6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <EXTI2_flag>
     2da:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <EXTI2_flag+0x1>
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	39 f4       	brne	.+14     	; 0x2f0 <EXTI2_ISR+0x1a>
	{
		while(PINB & (1<<2));
     2e2:	b2 99       	sbic	0x16, 2	; 22
     2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <EXTI2_ISR+0xc>
		EXTI2_flag = 0;
     2e6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <EXTI2_flag+0x1>
     2ea:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <EXTI2_flag>
     2ee:	08 95       	ret
	}
	else
	{
		EXTI2_flag = 1;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <EXTI2_flag+0x1>
     2f8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <EXTI2_flag>
     2fc:	08 95       	ret

000002fe <EXTI0_ISR>:
float currenttemperature=0.0;
float desiredtemperature=60.0;
char arr1[1];
int j=0,K=0;
void EXTI0_ISR (void)
{
     2fe:	cf 92       	push	r12
     300:	df 92       	push	r13
     302:	ef 92       	push	r14
     304:	ff 92       	push	r15
	Lable0:
	if(desiredtemperature<75.0 && EXTI_flag == 1)
     306:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__data_start>
     30a:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__data_start+0x1>
     30e:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__data_start+0x2>
     312:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__data_start+0x3>
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	46 e9       	ldi	r20, 0x96	; 150
     31c:	52 e4       	ldi	r21, 0x42	; 66
     31e:	c7 01       	movw	r24, r14
     320:	b6 01       	movw	r22, r12
     322:	0e 94 33 06 	call	0xc66	; 0xc66 <__cmpsf2>
     326:	88 23       	and	r24, r24
     328:	b4 f4       	brge	.+44     	; 0x356 <EXTI0_ISR+0x58>
     32a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <EXTI_flag>
     32e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <EXTI_flag+0x1>
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	81 f4       	brne	.+32     	; 0x356 <EXTI0_ISR+0x58>
	{
		desiredtemperature += 5.0;
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	40 ea       	ldi	r20, 0xA0	; 160
     33c:	50 e4       	ldi	r21, 0x40	; 64
     33e:	c7 01       	movw	r24, r14
     340:	b6 01       	movw	r22, r12
     342:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__addsf3>
     346:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__data_start>
     34a:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__data_start+0x1>
     34e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_start+0x2>
     352:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_start+0x3>
	}
	itoa((int)desiredtemperature,arr1,10); //function used to convert int data type to array of characters
     356:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
     35a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
     35e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_start+0x2>
     362:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_start+0x3>
     366:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fixsfsi>
     36a:	dc 01       	movw	r26, r24
     36c:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     36e:	4a e0       	ldi	r20, 0x0A	; 10
     370:	6e e7       	ldi	r22, 0x7E	; 126
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	0e 94 08 08 	call	0x1010	; 0x1010 <__itoa_ncheck>
	EEPROM_write(0,arr1[0]);
     378:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <arr1>
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_write>
	EEPROM_write(1,arr1[1]);
     384:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <ADC_val>
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_write>
	flag=1;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <flag+0x1>
     398:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <flag>
	EEPROM_write(20,'1');
     39c:	61 e3       	ldi	r22, 0x31	; 49
     39e:	84 e1       	ldi	r24, 0x14	; 20
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_write>
	flag = EEPROM_read(20)-'0';
     3a6:	84 e1       	ldi	r24, 0x14	; 20
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 8e 00 	call	0x11c	; 0x11c <EEPROM_read>
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	c0 97       	sbiw	r24, 0x30	; 48
     3b2:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <flag+0x1>
     3b6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <flag>
	flagg = EEPROM_read(30)-'0';
     3ba:	8e e1       	ldi	r24, 0x1E	; 30
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 8e 00 	call	0x11c	; 0x11c <EEPROM_read>
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	c0 97       	sbiw	r24, 0x30	; 48
     3c6:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <flagg+0x1>
     3ca:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <flagg>
	while(PIND & (1<<2));
     3ce:	82 99       	sbic	0x10, 2	; 16
     3d0:	fe cf       	rjmp	.-4      	; 0x3ce <EXTI0_ISR+0xd0>
	for(j=0;j<=8;j++)
     3d2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <j+0x1>
     3d6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <j>
     3da:	74 c0       	rjmp	.+232    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
	{
			EXTI_flag = 1;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <EXTI_flag+0x1>
     3e4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <EXTI_flag>
			for(K=0;K<=12;K++)
     3e8:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
     3ec:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
     3f0:	26 c0       	rjmp	.+76     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			{
				if(PIND & (1<<2))
     3f2:	82 99       	sbic	0x10, 2	; 16
     3f4:	88 cf       	rjmp	.-240    	; 0x306 <EXTI0_ISR+0x8>
				{
					goto Lable0;
				}
				PORTD &=~ (1<<0);
     3f6:	82 b3       	in	r24, 0x12	; 18
     3f8:	8e 7f       	andi	r24, 0xFE	; 254
				PORTD |= (1<<1);
     3fa:	82 60       	ori	r24, 0x02	; 2
     3fc:	82 bb       	out	0x12, r24	; 18
				PORTC = arr1[0]-'0';
     3fe:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <arr1>
     402:	80 53       	subi	r24, 0x30	; 48
     404:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     406:	83 ec       	ldi	r24, 0xC3	; 195
     408:	99 e0       	ldi	r25, 0x09	; 9
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     410:	00 00       	nop
				_delay_ms(10);
				PORTC = arr1[1]-'0';
     412:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <ADC_val>
     416:	80 53       	subi	r24, 0x30	; 48
     418:	85 bb       	out	0x15, r24	; 21
				PORTD &=~ (1<<1);
     41a:	82 b3       	in	r24, 0x12	; 18
				PORTD &=~ (1<<0);
     41c:	8c 7f       	andi	r24, 0xFC	; 252
     41e:	82 bb       	out	0x12, r24	; 18
     420:	83 ec       	ldi	r24, 0xC3	; 195
     422:	99 e0       	ldi	r25, 0x09	; 9
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     42a:	00 00       	nop
	flagg = EEPROM_read(30)-'0';
	while(PIND & (1<<2));
	for(j=0;j<=8;j++)
	{
			EXTI_flag = 1;
			for(K=0;K<=12;K++)
     42c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
     430:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
     434:	01 96       	adiw	r24, 0x01	; 1
     436:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
     43a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
     43e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
     442:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
     446:	0d 97       	sbiw	r24, 0x0d	; 13
     448:	a4 f2       	brlt	.-88     	; 0x3f2 <EXTI0_ISR+0xf4>
				PORTC = arr1[1]-'0';
				PORTD &=~ (1<<1);
				PORTD &=~ (1<<0);
				_delay_ms(10);
			}
			for(K=0;K<=12;K++)
     44a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
     44e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
     452:	25 c0       	rjmp	.+74     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			{	
				if(PIND & (1<<2))
     454:	82 99       	sbic	0x10, 2	; 16
     456:	57 cf       	rjmp	.-338    	; 0x306 <EXTI0_ISR+0x8>
				{
					goto Lable0;
				}
				PORTD |= (1<<0);
     458:	82 b3       	in	r24, 0x12	; 18
				PORTD |= (1<<1);
     45a:	83 60       	ori	r24, 0x03	; 3
     45c:	82 bb       	out	0x12, r24	; 18
				PORTC = arr1[0]-'0';
     45e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <arr1>
     462:	80 53       	subi	r24, 0x30	; 48
     464:	85 bb       	out	0x15, r24	; 21
     466:	83 ec       	ldi	r24, 0xC3	; 195
     468:	99 e0       	ldi	r25, 0x09	; 9
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     470:	00 00       	nop
				_delay_ms(10);
				PORTC = arr1[1]-'0';
     472:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <ADC_val>
     476:	80 53       	subi	r24, 0x30	; 48
     478:	85 bb       	out	0x15, r24	; 21
				PORTD |= (1<<1);
     47a:	82 b3       	in	r24, 0x12	; 18
				PORTD |= (1<<0);
     47c:	83 60       	ori	r24, 0x03	; 3
     47e:	82 bb       	out	0x12, r24	; 18
     480:	83 ec       	ldi	r24, 0xC3	; 195
     482:	99 e0       	ldi	r25, 0x09	; 9
     484:	01 97       	sbiw	r24, 0x01	; 1
     486:	f1 f7       	brne	.-4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
     488:	00 c0       	rjmp	.+0      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     48a:	00 00       	nop
				PORTC = arr1[1]-'0';
				PORTD &=~ (1<<1);
				PORTD &=~ (1<<0);
				_delay_ms(10);
			}
			for(K=0;K<=12;K++)
     48c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
     490:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
     49a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
     49e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
     4a2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
     4a6:	0d 97       	sbiw	r24, 0x0d	; 13
     4a8:	ac f2       	brlt	.-86     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
				PORTC = arr1[1]-'0';
				PORTD |= (1<<1);
				PORTD |= (1<<0);
				_delay_ms(10);
			}
			EXTI_flag = 0;
     4aa:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <EXTI_flag+0x1>
     4ae:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <EXTI_flag>
	flag=1;
	EEPROM_write(20,'1');
	flag = EEPROM_read(20)-'0';
	flagg = EEPROM_read(30)-'0';
	while(PIND & (1<<2));
	for(j=0;j<=8;j++)
     4b2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <j>
     4b6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <j+0x1>
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <j+0x1>
     4c0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <j>
     4c4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <j>
     4c8:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <j+0x1>
     4cc:	09 97       	sbiw	r24, 0x09	; 9
     4ce:	0c f4       	brge	.+2      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     4d0:	85 cf       	rjmp	.-246    	; 0x3dc <EXTI0_ISR+0xde>
				PORTD |= (1<<0);
				_delay_ms(10);
			}
			EXTI_flag = 0;
	}
}
     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	df 90       	pop	r13
     4d8:	cf 90       	pop	r12
     4da:	08 95       	ret

000004dc <EXTI1_ISR>:

void EXTI1_ISR (void)
{
     4dc:	cf 92       	push	r12
     4de:	df 92       	push	r13
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
	Lable1:
	if(desiredtemperature>35.0 && EXTI_flag == 1)
     4e4:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__data_start>
     4e8:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__data_start+0x1>
     4ec:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__data_start+0x2>
     4f0:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__data_start+0x3>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	4c e0       	ldi	r20, 0x0C	; 12
     4fa:	52 e4       	ldi	r21, 0x42	; 66
     4fc:	c7 01       	movw	r24, r14
     4fe:	b6 01       	movw	r22, r12
     500:	0e 94 92 07 	call	0xf24	; 0xf24 <__gesf2>
     504:	18 16       	cp	r1, r24
     506:	b4 f4       	brge	.+44     	; 0x534 <EXTI1_ISR+0x58>
     508:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <EXTI_flag>
     50c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <EXTI_flag+0x1>
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	81 f4       	brne	.+32     	; 0x534 <EXTI1_ISR+0x58>
	{
		desiredtemperature -= 5.0;
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	40 ea       	ldi	r20, 0xA0	; 160
     51a:	50 e4       	ldi	r21, 0x40	; 64
     51c:	c7 01       	movw	r24, r14
     51e:	b6 01       	movw	r22, r12
     520:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__subsf3>
     524:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__data_start>
     528:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__data_start+0x1>
     52c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_start+0x2>
     530:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_start+0x3>
	}
	itoa((int)desiredtemperature,arr1,10); //function used to convert int data type to array of characters
     534:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
     538:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
     53c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_start+0x2>
     540:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_start+0x3>
     544:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fixsfsi>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	4a e0       	ldi	r20, 0x0A	; 10
     54e:	6e e7       	ldi	r22, 0x7E	; 126
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	0e 94 08 08 	call	0x1010	; 0x1010 <__itoa_ncheck>
	EEPROM_write(0,arr1[0]);
     556:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <arr1>
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_write>
	EEPROM_write(1,arr1[1]);
     562:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <ADC_val>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_write>
	flag=1;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <flag+0x1>
     576:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <flag>
	EEPROM_write(20,'1');
     57a:	61 e3       	ldi	r22, 0x31	; 49
     57c:	84 e1       	ldi	r24, 0x14	; 20
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_write>
	flag = EEPROM_read(20)-'0';
     584:	84 e1       	ldi	r24, 0x14	; 20
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 8e 00 	call	0x11c	; 0x11c <EEPROM_read>
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	c0 97       	sbiw	r24, 0x30	; 48
     590:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <flag+0x1>
     594:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <flag>
	flagg = EEPROM_read(30)-'0';
     598:	8e e1       	ldi	r24, 0x1E	; 30
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 8e 00 	call	0x11c	; 0x11c <EEPROM_read>
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	c0 97       	sbiw	r24, 0x30	; 48
     5a4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <flagg+0x1>
     5a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <flagg>
	while(PIND & (1<<3));
     5ac:	83 99       	sbic	0x10, 3	; 16
     5ae:	fe cf       	rjmp	.-4      	; 0x5ac <EXTI1_ISR+0xd0>
	for(j=0;j<=8;j++)
     5b0:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <j+0x1>
     5b4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <j>
     5b8:	74 c0       	rjmp	.+232    	; 0x6a2 <EXTI1_ISR+0x1c6>
	{
		EXTI_flag = 1;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <EXTI_flag+0x1>
     5c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <EXTI_flag>
		for(K=0;K<=12;K++)
     5c6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
     5ca:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
     5ce:	26 c0       	rjmp	.+76     	; 0x61c <EXTI1_ISR+0x140>
		{
			if(PIND & (1<<3))
     5d0:	83 99       	sbic	0x10, 3	; 16
     5d2:	88 cf       	rjmp	.-240    	; 0x4e4 <EXTI1_ISR+0x8>
			{
				goto Lable1;
			}
			PORTD &=~ (1<<0);
     5d4:	82 b3       	in	r24, 0x12	; 18
     5d6:	8e 7f       	andi	r24, 0xFE	; 254
			PORTD |= (1<<1);
     5d8:	82 60       	ori	r24, 0x02	; 2
     5da:	82 bb       	out	0x12, r24	; 18
			PORTC = arr1[0]-'0';
     5dc:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <arr1>
     5e0:	80 53       	subi	r24, 0x30	; 48
     5e2:	85 bb       	out	0x15, r24	; 21
     5e4:	83 ec       	ldi	r24, 0xC3	; 195
     5e6:	99 e0       	ldi	r25, 0x09	; 9
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <EXTI1_ISR+0x10c>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <EXTI1_ISR+0x112>
     5ee:	00 00       	nop
			_delay_ms(10);
			PORTC = arr1[1]-'0';
     5f0:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <ADC_val>
     5f4:	80 53       	subi	r24, 0x30	; 48
     5f6:	85 bb       	out	0x15, r24	; 21
			PORTD &=~ (1<<1);
     5f8:	82 b3       	in	r24, 0x12	; 18
			PORTD &=~ (1<<0);
     5fa:	8c 7f       	andi	r24, 0xFC	; 252
     5fc:	82 bb       	out	0x12, r24	; 18
     5fe:	83 ec       	ldi	r24, 0xC3	; 195
     600:	99 e0       	ldi	r25, 0x09	; 9
     602:	01 97       	sbiw	r24, 0x01	; 1
     604:	f1 f7       	brne	.-4      	; 0x602 <EXTI1_ISR+0x126>
     606:	00 c0       	rjmp	.+0      	; 0x608 <EXTI1_ISR+0x12c>
     608:	00 00       	nop
	flagg = EEPROM_read(30)-'0';
	while(PIND & (1<<3));
	for(j=0;j<=8;j++)
	{
		EXTI_flag = 1;
		for(K=0;K<=12;K++)
     60a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
     60e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
     618:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
     61c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
     620:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
     624:	0d 97       	sbiw	r24, 0x0d	; 13
     626:	a4 f2       	brlt	.-88     	; 0x5d0 <EXTI1_ISR+0xf4>
			PORTC = arr1[1]-'0';
			PORTD &=~ (1<<1);
			PORTD &=~ (1<<0);
			_delay_ms(10);
		}
		for(K=0;K<=12;K++)
     628:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
     62c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
     630:	25 c0       	rjmp	.+74     	; 0x67c <EXTI1_ISR+0x1a0>
		{
			if(PIND & (1<<3))
     632:	83 99       	sbic	0x10, 3	; 16
     634:	57 cf       	rjmp	.-338    	; 0x4e4 <EXTI1_ISR+0x8>
			{
				goto Lable1;
			}
			PORTD |= (1<<0);
     636:	82 b3       	in	r24, 0x12	; 18
			PORTD |= (1<<1);
     638:	83 60       	ori	r24, 0x03	; 3
     63a:	82 bb       	out	0x12, r24	; 18
			PORTC = arr1[0]-'0';
     63c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <arr1>
     640:	80 53       	subi	r24, 0x30	; 48
     642:	85 bb       	out	0x15, r24	; 21
     644:	83 ec       	ldi	r24, 0xC3	; 195
     646:	99 e0       	ldi	r25, 0x09	; 9
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <EXTI1_ISR+0x16c>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <EXTI1_ISR+0x172>
     64e:	00 00       	nop
			_delay_ms(10);
			PORTC = arr1[1]-'0';
     650:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <ADC_val>
     654:	80 53       	subi	r24, 0x30	; 48
     656:	85 bb       	out	0x15, r24	; 21
			PORTD |= (1<<1);
     658:	82 b3       	in	r24, 0x12	; 18
			PORTD |= (1<<0);
     65a:	83 60       	ori	r24, 0x03	; 3
     65c:	82 bb       	out	0x12, r24	; 18
     65e:	83 ec       	ldi	r24, 0xC3	; 195
     660:	99 e0       	ldi	r25, 0x09	; 9
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	f1 f7       	brne	.-4      	; 0x662 <EXTI1_ISR+0x186>
     666:	00 c0       	rjmp	.+0      	; 0x668 <EXTI1_ISR+0x18c>
     668:	00 00       	nop
			PORTC = arr1[1]-'0';
			PORTD &=~ (1<<1);
			PORTD &=~ (1<<0);
			_delay_ms(10);
		}
		for(K=0;K<=12;K++)
     66a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
     66e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
     678:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
     67c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
     680:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
     684:	0d 97       	sbiw	r24, 0x0d	; 13
     686:	ac f2       	brlt	.-86     	; 0x632 <EXTI1_ISR+0x156>
			PORTC = arr1[1]-'0';
			PORTD |= (1<<1);
			PORTD |= (1<<0);
			_delay_ms(10);
		}
		EXTI_flag = 0;
     688:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <EXTI_flag+0x1>
     68c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <EXTI_flag>
	flag=1;
	EEPROM_write(20,'1');
	flag = EEPROM_read(20)-'0';
	flagg = EEPROM_read(30)-'0';
	while(PIND & (1<<3));
	for(j=0;j<=8;j++)
     690:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <j>
     694:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <j+0x1>
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <j+0x1>
     69e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <j>
     6a2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <j>
     6a6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <j+0x1>
     6aa:	09 97       	sbiw	r24, 0x09	; 9
     6ac:	0c f4       	brge	.+2      	; 0x6b0 <EXTI1_ISR+0x1d4>
     6ae:	85 cf       	rjmp	.-246    	; 0x5ba <EXTI1_ISR+0xde>
			_delay_ms(10);
		}
		EXTI_flag = 0;
	}
	
}
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	08 95       	ret

000006ba <T0_ISR>:



void T0_ISR (void)
{
	i++;
     6ba:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <i>
     6be:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <i+0x1>
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <i+0x1>
     6c8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <i>
	l++;
     6cc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <l>
     6d0:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <l+0x1>
     6d4:	01 96       	adiw	r24, 0x01	; 1
     6d6:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <l+0x1>
     6da:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <l>
	TIMER0_SetTimerCounter(246);
     6de:	86 ef       	ldi	r24, 0xF6	; 246
     6e0:	0e 94 71 05 	call	0xae2	; 0xae2 <TIMER0_SetTimerCounter>
	if(i==10)
     6e4:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <i>
     6e8:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <i+0x1>
     6ec:	0a 97       	sbiw	r24, 0x0a	; 10
     6ee:	51 f5       	brne	.+84     	; 0x744 <T0_ISR+0x8a>
	{
		ADC_val = ADC_read('0');
     6f0:	80 e3       	ldi	r24, 0x30	; 48
     6f2:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_read>
     6f6:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <ADC_val+0x1>
     6fa:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <ADC_val>
		currenttemperature = (((float)ADC_val * 5.0)/1023.0)/0.01;
     6fe:	bc 01       	movw	r22, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__floatunsisf>
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 ea       	ldi	r20, 0xA0	; 160
     70e:	50 e4       	ldi	r21, 0x40	; 64
     710:	0e 94 97 07 	call	0xf2e	; 0xf2e <__mulsf3>
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 ec       	ldi	r19, 0xC0	; 192
     718:	4f e7       	ldi	r20, 0x7F	; 127
     71a:	54 e4       	ldi	r21, 0x44	; 68
     71c:	0e 94 38 06 	call	0xc70	; 0xc70 <__divsf3>
     720:	2a e0       	ldi	r18, 0x0A	; 10
     722:	37 ed       	ldi	r19, 0xD7	; 215
     724:	43 e2       	ldi	r20, 0x23	; 35
     726:	5c e3       	ldi	r21, 0x3C	; 60
     728:	0e 94 38 06 	call	0xc70	; 0xc70 <__divsf3>
     72c:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <currenttemperature>
     730:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <currenttemperature+0x1>
     734:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <currenttemperature+0x2>
     738:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <currenttemperature+0x3>
		i=0;
     73c:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <i+0x1>
     740:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <i>
     744:	08 95       	ret

00000746 <main>:
	}
}


int main(void)
{
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	1f 92       	push	r1
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
	DDRB &=~ (1<<2);
     750:	87 b3       	in	r24, 0x17	; 23
     752:	8b 7f       	andi	r24, 0xFB	; 251
     754:	87 bb       	out	0x17, r24	; 23
	DDRC=0b00001111;
     756:	8f e0       	ldi	r24, 0x0F	; 15
     758:	84 bb       	out	0x14, r24	; 20
	DDRD=0b01110011;
     75a:	83 e7       	ldi	r24, 0x73	; 115
     75c:	81 bb       	out	0x11, r24	; 17
	char arr0[1];
	ADC_init();
     75e:	0e 94 67 00 	call	0xce	; 0xce <ADC_init>
	TIMER0_SetOV_CallBack(T0_ISR);
     762:	8d e5       	ldi	r24, 0x5D	; 93
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	0e 94 73 05 	call	0xae6	; 0xae6 <TIMER0_SetOV_CallBack>
	TIMER0_init();
     76a:	0e 94 55 05 	call	0xaaa	; 0xaaa <TIMER0_init>
	TIMER0_SetTimerCounter(246);
     76e:	86 ef       	ldi	r24, 0xF6	; 246
     770:	0e 94 71 05 	call	0xae2	; 0xae2 <TIMER0_SetTimerCounter>
	TIMER0_OV_enable();
     774:	0e 94 6d 05 	call	0xada	; 0xada <TIMER0_OV_enable>
	EXTI0_Set_CallBack(EXTI0_ISR);
     778:	8f e7       	ldi	r24, 0x7F	; 127
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 b0 00 	call	0x160	; 0x160 <EXTI0_Set_CallBack>
	EXTI0_voidInit();
     780:	0e 94 a3 00 	call	0x146	; 0x146 <EXTI0_voidInit>
	EXTI0_voidEnable();
     784:	0e 94 97 00 	call	0x12e	; 0x12e <EXTI0_voidEnable>
	EXTI1_Set_CallBack(EXTI1_ISR);
     788:	8e e6       	ldi	r24, 0x6E	; 110
     78a:	92 e0       	ldi	r25, 0x02	; 2
     78c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <EXTI1_Set_CallBack>
	EXTI1_voidInit();
     790:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <EXTI1_voidInit>
	EXTI1_voidEnable();
     794:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <EXTI1_voidEnable>
	EXTI2_Set_CallBack(EXTI2_ISR);
     798:	8b e6       	ldi	r24, 0x6B	; 107
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 37 01 	call	0x26e	; 0x26e <EXTI2_Set_CallBack>
	EXTI2_voidInit();
     7a0:	0e 94 2d 01 	call	0x25a	; 0x25a <EXTI2_voidInit>
	EXTI2_voidEnable();
     7a4:	0e 94 21 01 	call	0x242	; 0x242 <EXTI2_voidEnable>
	GIE_voidEnable();
     7a8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <GIE_voidEnable>
     7ac:	8b e7       	ldi	r24, 0x7B	; 123
     7ae:	92 e9       	ldi	r25, 0x92	; 146
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <main+0x6a>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <main+0x70>
     7b6:	00 00       	nop
	_delay_ms(150);
	if((int)currenttemperature<36)
     7b8:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <currenttemperature>
     7bc:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <currenttemperature+0x1>
     7c0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <currenttemperature+0x2>
     7c4:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <currenttemperature+0x3>
     7c8:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fixsfsi>
     7cc:	64 32       	cpi	r22, 0x24	; 36
     7ce:	71 05       	cpc	r23, r1
     7d0:	ec f4       	brge	.+58     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	{
		itoa((int)desiredtemperature,arr1,10); //function used to convert int data type to array of characters
     7d2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
     7d6:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
     7da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_start+0x2>
     7de:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_start+0x3>
     7e2:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fixsfsi>
     7e6:	dc 01       	movw	r26, r24
     7e8:	cb 01       	movw	r24, r22
     7ea:	4a e0       	ldi	r20, 0x0A	; 10
     7ec:	6e e7       	ldi	r22, 0x7E	; 126
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	0e 94 08 08 	call	0x1010	; 0x1010 <__itoa_ncheck>
		EEPROM_write(0,arr1[0]);
     7f4:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <arr1>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_write>
		EEPROM_write(1,arr1[1]);
     800:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <ADC_val>
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_write>
	}
	arr1[0] = EEPROM_read(0);
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 8e 00 	call	0x11c	; 0x11c <EEPROM_read>
     814:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <arr1>
	arr1[1] = EEPROM_read(1);
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 8e 00 	call	0x11c	; 0x11c <EEPROM_read>
     820:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <ADC_val>
	desiredtemperature=atof(arr1);
     824:	8e e7       	ldi	r24, 0x7E	; 126
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 04 08 	call	0x1008	; 0x1008 <atof>
     82c:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__data_start>
     830:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__data_start+0x1>
     834:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_start+0x2>
     838:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_start+0x3>
	while (1)
	{		
		if(EXTI2_flag == 0)
     83c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <EXTI2_flag>
     840:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <EXTI2_flag+0x1>
     844:	89 2b       	or	r24, r25
     846:	29 f4       	brne	.+10     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
		{
			PORTD |=  (1<<0);
     848:	82 b3       	in	r24, 0x12	; 18
			PORTD |=  (1<<1);
     84a:	83 60       	ori	r24, 0x03	; 3
			PORTD &=~ (1<<4);
			PORTD &=~ (1<<5);
			PORTD &=~ (1<<6);
     84c:	8f 78       	andi	r24, 0x8F	; 143
     84e:	82 bb       	out	0x12, r24	; 18
     850:	f5 cf       	rjmp	.-22     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
		}
		else
		{
			if((int)currenttemperature>35)
     852:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <currenttemperature>
     856:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <currenttemperature+0x1>
     85a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <currenttemperature+0x2>
     85e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <currenttemperature+0x3>
     862:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fixsfsi>
     866:	64 32       	cpi	r22, 0x24	; 36
     868:	71 05       	cpc	r23, r1
     86a:	a4 f0       	brlt	.+40     	; 0x894 <__stack+0x35>
			{
				flag = EEPROM_read(20)-'0';
     86c:	84 e1       	ldi	r24, 0x14	; 20
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 8e 00 	call	0x11c	; 0x11c <EEPROM_read>
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	c0 97       	sbiw	r24, 0x30	; 48
     878:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <flag+0x1>
     87c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <flag>
				flagg = EEPROM_read(30)-'0';
     880:	8e e1       	ldi	r24, 0x1E	; 30
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 8e 00 	call	0x11c	; 0x11c <EEPROM_read>
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	c0 97       	sbiw	r24, 0x30	; 48
     88c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <flagg+0x1>
     890:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <flagg>
			}
			if(flag==1)
     894:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <flag>
     898:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <flag+0x1>
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	09 f0       	breq	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	89 c0       	rjmp	.+274    	; 0x9b4 <__stack+0x155>
			{
				//case if current < desired
				if(((int)currenttemperature<(int)desiredtemperature)&&flagg==0)
     8a2:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <currenttemperature>
     8a6:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <currenttemperature+0x1>
     8aa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <currenttemperature+0x2>
     8ae:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <currenttemperature+0x3>
     8b2:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fixsfsi>
     8b6:	8b 01       	movw	r16, r22
     8b8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
     8bc:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
     8c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_start+0x2>
     8c4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_start+0x3>
     8c8:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fixsfsi>
     8cc:	06 17       	cp	r16, r22
     8ce:	17 07       	cpc	r17, r23
     8d0:	d4 f4       	brge	.+52     	; 0x906 <__stack+0xa7>
     8d2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <flagg>
     8d6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <flagg+0x1>
     8da:	89 2b       	or	r24, r25
     8dc:	a1 f4       	brne	.+40     	; 0x906 <__stack+0xa7>
				{
					if(l>=99)
     8de:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <l>
     8e2:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <l+0x1>
     8e6:	83 36       	cpi	r24, 0x63	; 99
     8e8:	91 05       	cpc	r25, r1
     8ea:	44 f0       	brlt	.+16     	; 0x8fc <__stack+0x9d>
					{
						PORTD ^=  (1<<4);
     8ec:	92 b3       	in	r25, 0x12	; 18
     8ee:	80 e1       	ldi	r24, 0x10	; 16
     8f0:	89 27       	eor	r24, r25
     8f2:	82 bb       	out	0x12, r24	; 18
						l=0;
     8f4:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <l+0x1>
     8f8:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <l>
					}
					PORTD |=  (1<<5);
     8fc:	82 b3       	in	r24, 0x12	; 18
     8fe:	80 62       	ori	r24, 0x20	; 32
					PORTD &=~ (1<<6);
     900:	8f 7b       	andi	r24, 0xBF	; 191
     902:	82 bb       	out	0x12, r24	; 18
     904:	57 c0       	rjmp	.+174    	; 0x9b4 <__stack+0x155>
				}
				else if(((int)currenttemperature>(int)desiredtemperature)&&flagg==0)
     906:	60 17       	cp	r22, r16
     908:	71 07       	cpc	r23, r17
     90a:	64 f4       	brge	.+24     	; 0x924 <__stack+0xc5>
     90c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <flagg>
     910:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <flagg+0x1>
     914:	89 2b       	or	r24, r25
     916:	31 f4       	brne	.+12     	; 0x924 <__stack+0xc5>
				{
					PORTD |=  (1<<4);
     918:	82 b3       	in	r24, 0x12	; 18
     91a:	80 61       	ori	r24, 0x10	; 16
					PORTD &=~ (1<<5);
     91c:	8f 7d       	andi	r24, 0xDF	; 223
					PORTD |=  (1<<6);
     91e:	80 64       	ori	r24, 0x40	; 64
     920:	82 bb       	out	0x12, r24	; 18
     922:	48 c0       	rjmp	.+144    	; 0x9b4 <__stack+0x155>
				}
				else
				{
					flagg=1;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <flagg+0x1>
     92c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <flagg>
					EEPROM_write(30,'1');
     930:	61 e3       	ldi	r22, 0x31	; 49
     932:	8e e1       	ldi	r24, 0x1E	; 30
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_write>
					PORTD &=~  (1<<4);
     93a:	82 b3       	in	r24, 0x12	; 18
					PORTD &=~  (1<<5);
					PORTD &=~ (1<<6);
     93c:	8f 78       	andi	r24, 0x8F	; 143
     93e:	82 bb       	out	0x12, r24	; 18

					if((int)currenttemperature <= (int)(desiredtemperature - 5.0))
     940:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <currenttemperature>
     944:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <currenttemperature+0x1>
     948:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <currenttemperature+0x2>
     94c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <currenttemperature+0x3>
     950:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fixsfsi>
     954:	8b 01       	movw	r16, r22
     956:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__data_start>
     95a:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__data_start+0x1>
     95e:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__data_start+0x2>
     962:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__data_start+0x3>
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	40 ea       	ldi	r20, 0xA0	; 160
     96c:	50 e4       	ldi	r21, 0x40	; 64
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__subsf3>
     976:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fixsfsi>
     97a:	60 17       	cp	r22, r16
     97c:	71 07       	cpc	r23, r17
     97e:	54 f0       	brlt	.+20     	; 0x994 <__stack+0x135>
					{
						
						flagg=0;
     980:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <flagg+0x1>
     984:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <flagg>
						EEPROM_write(30,'0');
     988:	60 e3       	ldi	r22, 0x30	; 48
     98a:	8e e1       	ldi	r24, 0x1E	; 30
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_write>
     992:	10 c0       	rjmp	.+32     	; 0x9b4 <__stack+0x155>
					}
					else if((int)currenttemperature > (int)desiredtemperature)
     994:	c7 01       	movw	r24, r14
     996:	b6 01       	movw	r22, r12
     998:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fixsfsi>
     99c:	60 17       	cp	r22, r16
     99e:	71 07       	cpc	r23, r17
     9a0:	4c f4       	brge	.+18     	; 0x9b4 <__stack+0x155>
					{
						flagg=0;
     9a2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <flagg+0x1>
     9a6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <flagg>
						EEPROM_write(30,'0');
     9aa:	60 e3       	ldi	r22, 0x30	; 48
     9ac:	8e e1       	ldi	r24, 0x1E	; 30
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_write>
					}
				}
			}
			itoa((int)currenttemperature,arr0,10); //function used to convert int data type to array of characters
     9b4:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <currenttemperature>
     9b8:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <currenttemperature+0x1>
     9bc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <currenttemperature+0x2>
     9c0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <currenttemperature+0x3>
     9c4:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fixsfsi>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	4a e0       	ldi	r20, 0x0A	; 10
     9ce:	be 01       	movw	r22, r28
     9d0:	6f 5f       	subi	r22, 0xFF	; 255
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	0e 94 08 08 	call	0x1010	; 0x1010 <__itoa_ncheck>
			PORTD &=~ (1<<0);
     9d8:	82 b3       	in	r24, 0x12	; 18
     9da:	8e 7f       	andi	r24, 0xFE	; 254
			PORTD |= (1<<1);
     9dc:	82 60       	ori	r24, 0x02	; 2
     9de:	82 bb       	out	0x12, r24	; 18
			PORTC = arr0[0]-'0';
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	80 53       	subi	r24, 0x30	; 48
     9e4:	85 bb       	out	0x15, r24	; 21
     9e6:	83 ec       	ldi	r24, 0xC3	; 195
     9e8:	99 e0       	ldi	r25, 0x09	; 9
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <__stack+0x18b>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <__stack+0x191>
     9f0:	00 00       	nop
			_delay_ms(10);
			PORTC = arr0[1]-'0';
     9f2:	8a 81       	ldd	r24, Y+2	; 0x02
     9f4:	80 53       	subi	r24, 0x30	; 48
     9f6:	85 bb       	out	0x15, r24	; 21
			PORTD &=~ (1<<1);
     9f8:	82 b3       	in	r24, 0x12	; 18
			PORTD &=~ (1<<0);
     9fa:	8c 7f       	andi	r24, 0xFC	; 252
     9fc:	82 bb       	out	0x12, r24	; 18
     9fe:	83 ec       	ldi	r24, 0xC3	; 195
     a00:	99 e0       	ldi	r25, 0x09	; 9
     a02:	01 97       	sbiw	r24, 0x01	; 1
     a04:	f1 f7       	brne	.-4      	; 0xa02 <__stack+0x1a3>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <__stack+0x1a9>
     a08:	00 00       	nop
     a0a:	18 cf       	rjmp	.-464    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>

00000a0c <TIMER0_setMode>:
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	69 f0       	breq	.+26     	; 0xa2a <TIMER0_setMode+0x1e>
     a10:	28 f0       	brcs	.+10     	; 0xa1c <TIMER0_setMode+0x10>
     a12:	82 30       	cpi	r24, 0x02	; 2
     a14:	89 f0       	breq	.+34     	; 0xa38 <TIMER0_setMode+0x2c>
     a16:	83 30       	cpi	r24, 0x03	; 3
     a18:	b1 f0       	breq	.+44     	; 0xa46 <TIMER0_setMode+0x3a>
     a1a:	08 95       	ret
     a1c:	83 b7       	in	r24, 0x33	; 51
     a1e:	8f 7b       	andi	r24, 0xBF	; 191
     a20:	83 bf       	out	0x33, r24	; 51
     a22:	83 b7       	in	r24, 0x33	; 51
     a24:	87 7f       	andi	r24, 0xF7	; 247
     a26:	83 bf       	out	0x33, r24	; 51
     a28:	08 95       	ret
     a2a:	83 b7       	in	r24, 0x33	; 51
     a2c:	80 64       	ori	r24, 0x40	; 64
     a2e:	83 bf       	out	0x33, r24	; 51
     a30:	83 b7       	in	r24, 0x33	; 51
     a32:	87 7f       	andi	r24, 0xF7	; 247
     a34:	83 bf       	out	0x33, r24	; 51
     a36:	08 95       	ret
     a38:	83 b7       	in	r24, 0x33	; 51
     a3a:	8f 7b       	andi	r24, 0xBF	; 191
     a3c:	83 bf       	out	0x33, r24	; 51
     a3e:	83 b7       	in	r24, 0x33	; 51
     a40:	88 60       	ori	r24, 0x08	; 8
     a42:	83 bf       	out	0x33, r24	; 51
     a44:	08 95       	ret
     a46:	83 b7       	in	r24, 0x33	; 51
     a48:	80 64       	ori	r24, 0x40	; 64
     a4a:	83 bf       	out	0x33, r24	; 51
     a4c:	83 b7       	in	r24, 0x33	; 51
     a4e:	88 60       	ori	r24, 0x08	; 8
     a50:	83 bf       	out	0x33, r24	; 51
     a52:	08 95       	ret

00000a54 <TIMER0_setTE>:
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	69 f0       	breq	.+26     	; 0xa72 <TIMER0_setTE+0x1e>
     a58:	28 f0       	brcs	.+10     	; 0xa64 <TIMER0_setTE+0x10>
     a5a:	82 30       	cpi	r24, 0x02	; 2
     a5c:	89 f0       	breq	.+34     	; 0xa80 <TIMER0_setTE+0x2c>
     a5e:	83 30       	cpi	r24, 0x03	; 3
     a60:	b1 f0       	breq	.+44     	; 0xa8e <TIMER0_setTE+0x3a>
     a62:	08 95       	ret
     a64:	83 b7       	in	r24, 0x33	; 51
     a66:	8f 7e       	andi	r24, 0xEF	; 239
     a68:	83 bf       	out	0x33, r24	; 51
     a6a:	83 b7       	in	r24, 0x33	; 51
     a6c:	8f 7d       	andi	r24, 0xDF	; 223
     a6e:	83 bf       	out	0x33, r24	; 51
     a70:	08 95       	ret
     a72:	83 b7       	in	r24, 0x33	; 51
     a74:	80 61       	ori	r24, 0x10	; 16
     a76:	83 bf       	out	0x33, r24	; 51
     a78:	83 b7       	in	r24, 0x33	; 51
     a7a:	8f 7d       	andi	r24, 0xDF	; 223
     a7c:	83 bf       	out	0x33, r24	; 51
     a7e:	08 95       	ret
     a80:	83 b7       	in	r24, 0x33	; 51
     a82:	8f 7e       	andi	r24, 0xEF	; 239
     a84:	83 bf       	out	0x33, r24	; 51
     a86:	83 b7       	in	r24, 0x33	; 51
     a88:	80 62       	ori	r24, 0x20	; 32
     a8a:	83 bf       	out	0x33, r24	; 51
     a8c:	08 95       	ret
     a8e:	83 b7       	in	r24, 0x33	; 51
     a90:	80 61       	ori	r24, 0x10	; 16
     a92:	83 bf       	out	0x33, r24	; 51
     a94:	83 b7       	in	r24, 0x33	; 51
     a96:	80 62       	ori	r24, 0x20	; 32
     a98:	83 bf       	out	0x33, r24	; 51
     a9a:	08 95       	ret

00000a9c <TIMER0_setPrescaler>:
     a9c:	93 b7       	in	r25, 0x33	; 51
     a9e:	98 7f       	andi	r25, 0xF8	; 248
     aa0:	93 bf       	out	0x33, r25	; 51
     aa2:	93 b7       	in	r25, 0x33	; 51
     aa4:	89 2b       	or	r24, r25
     aa6:	83 bf       	out	0x33, r24	; 51
     aa8:	08 95       	ret

00000aaa <TIMER0_init>:
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 06 05 	call	0xa0c	; 0xa0c <TIMER0_setMode>
     ab0:	85 e0       	ldi	r24, 0x05	; 5
     ab2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <TIMER0_setPrescaler>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 2a 05 	call	0xa54	; 0xa54 <TIMER0_setTE>
     abc:	89 b7       	in	r24, 0x39	; 57
     abe:	8d 7f       	andi	r24, 0xFD	; 253
     ac0:	89 bf       	out	0x39, r24	; 57
     ac2:	89 b7       	in	r24, 0x39	; 57
     ac4:	8e 7f       	andi	r24, 0xFE	; 254
     ac6:	89 bf       	out	0x39, r24	; 57
     ac8:	88 b7       	in	r24, 0x38	; 56
     aca:	8d 7f       	andi	r24, 0xFD	; 253
     acc:	88 bf       	out	0x38, r24	; 56
     ace:	88 b7       	in	r24, 0x38	; 56
     ad0:	8e 7f       	andi	r24, 0xFE	; 254
     ad2:	88 bf       	out	0x38, r24	; 56
     ad4:	12 be       	out	0x32, r1	; 50
     ad6:	1c be       	out	0x3c, r1	; 60
     ad8:	08 95       	ret

00000ada <TIMER0_OV_enable>:
     ada:	89 b7       	in	r24, 0x39	; 57
     adc:	81 60       	ori	r24, 0x01	; 1
     ade:	89 bf       	out	0x39, r24	; 57
     ae0:	08 95       	ret

00000ae2 <TIMER0_SetTimerCounter>:
     ae2:	82 bf       	out	0x32, r24	; 50
     ae4:	08 95       	ret

00000ae6 <TIMER0_SetOV_CallBack>:
     ae6:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <TIMER_0_OV_CallBack+0x1>
     aea:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <TIMER_0_OV_CallBack>
     aee:	08 95       	ret

00000af0 <__vector_11>:
     af0:	1f 92       	push	r1
     af2:	0f 92       	push	r0
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	0f 92       	push	r0
     af8:	11 24       	eor	r1, r1
     afa:	2f 93       	push	r18
     afc:	3f 93       	push	r19
     afe:	4f 93       	push	r20
     b00:	5f 93       	push	r21
     b02:	6f 93       	push	r22
     b04:	7f 93       	push	r23
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27
     b0e:	ef 93       	push	r30
     b10:	ff 93       	push	r31
     b12:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <TIMER_0_OV_CallBack>
     b16:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <TIMER_0_OV_CallBack+0x1>
     b1a:	09 95       	icall
     b1c:	ff 91       	pop	r31
     b1e:	ef 91       	pop	r30
     b20:	bf 91       	pop	r27
     b22:	af 91       	pop	r26
     b24:	9f 91       	pop	r25
     b26:	8f 91       	pop	r24
     b28:	7f 91       	pop	r23
     b2a:	6f 91       	pop	r22
     b2c:	5f 91       	pop	r21
     b2e:	4f 91       	pop	r20
     b30:	3f 91       	pop	r19
     b32:	2f 91       	pop	r18
     b34:	0f 90       	pop	r0
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	0f 90       	pop	r0
     b3a:	1f 90       	pop	r1
     b3c:	18 95       	reti

00000b3e <__vector_10>:
     b3e:	1f 92       	push	r1
     b40:	0f 92       	push	r0
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	0f 92       	push	r0
     b46:	11 24       	eor	r1, r1
     b48:	2f 93       	push	r18
     b4a:	3f 93       	push	r19
     b4c:	4f 93       	push	r20
     b4e:	5f 93       	push	r21
     b50:	6f 93       	push	r22
     b52:	7f 93       	push	r23
     b54:	8f 93       	push	r24
     b56:	9f 93       	push	r25
     b58:	af 93       	push	r26
     b5a:	bf 93       	push	r27
     b5c:	ef 93       	push	r30
     b5e:	ff 93       	push	r31
     b60:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <TIMER_0_CTC_CallBack>
     b64:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <TIMER_0_CTC_CallBack+0x1>
     b68:	09 95       	icall
     b6a:	ff 91       	pop	r31
     b6c:	ef 91       	pop	r30
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	0f 90       	pop	r0
     b88:	1f 90       	pop	r1
     b8a:	18 95       	reti

00000b8c <__subsf3>:
     b8c:	50 58       	subi	r21, 0x80	; 128

00000b8e <__addsf3>:
     b8e:	bb 27       	eor	r27, r27
     b90:	aa 27       	eor	r26, r26
     b92:	0e 94 de 05 	call	0xbbc	; 0xbbc <__addsf3x>
     b96:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_round>
     b9a:	0e 94 4a 07 	call	0xe94	; 0xe94 <__fp_pscA>
     b9e:	38 f0       	brcs	.+14     	; 0xbae <__addsf3+0x20>
     ba0:	0e 94 51 07 	call	0xea2	; 0xea2 <__fp_pscB>
     ba4:	20 f0       	brcs	.+8      	; 0xbae <__addsf3+0x20>
     ba6:	39 f4       	brne	.+14     	; 0xbb6 <__addsf3+0x28>
     ba8:	9f 3f       	cpi	r25, 0xFF	; 255
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__addsf3+0x24>
     bac:	26 f4       	brtc	.+8      	; 0xbb6 <__addsf3+0x28>
     bae:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__fp_nan>
     bb2:	0e f4       	brtc	.+2      	; 0xbb6 <__addsf3+0x28>
     bb4:	e0 95       	com	r30
     bb6:	e7 fb       	bst	r30, 7
     bb8:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__fp_inf>

00000bbc <__addsf3x>:
     bbc:	e9 2f       	mov	r30, r25
     bbe:	0e 94 69 07 	call	0xed2	; 0xed2 <__fp_split3>
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__addsf3+0xc>
     bc4:	ba 17       	cp	r27, r26
     bc6:	62 07       	cpc	r22, r18
     bc8:	73 07       	cpc	r23, r19
     bca:	84 07       	cpc	r24, r20
     bcc:	95 07       	cpc	r25, r21
     bce:	20 f0       	brcs	.+8      	; 0xbd8 <__addsf3x+0x1c>
     bd0:	79 f4       	brne	.+30     	; 0xbf0 <__addsf3x+0x34>
     bd2:	a6 f5       	brtc	.+104    	; 0xc3c <__addsf3x+0x80>
     bd4:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__fp_zero>
     bd8:	0e f4       	brtc	.+2      	; 0xbdc <__addsf3x+0x20>
     bda:	e0 95       	com	r30
     bdc:	0b 2e       	mov	r0, r27
     bde:	ba 2f       	mov	r27, r26
     be0:	a0 2d       	mov	r26, r0
     be2:	0b 01       	movw	r0, r22
     be4:	b9 01       	movw	r22, r18
     be6:	90 01       	movw	r18, r0
     be8:	0c 01       	movw	r0, r24
     bea:	ca 01       	movw	r24, r20
     bec:	a0 01       	movw	r20, r0
     bee:	11 24       	eor	r1, r1
     bf0:	ff 27       	eor	r31, r31
     bf2:	59 1b       	sub	r21, r25
     bf4:	99 f0       	breq	.+38     	; 0xc1c <__addsf3x+0x60>
     bf6:	59 3f       	cpi	r21, 0xF9	; 249
     bf8:	50 f4       	brcc	.+20     	; 0xc0e <__addsf3x+0x52>
     bfa:	50 3e       	cpi	r21, 0xE0	; 224
     bfc:	68 f1       	brcs	.+90     	; 0xc58 <__addsf3x+0x9c>
     bfe:	1a 16       	cp	r1, r26
     c00:	f0 40       	sbci	r31, 0x00	; 0
     c02:	a2 2f       	mov	r26, r18
     c04:	23 2f       	mov	r18, r19
     c06:	34 2f       	mov	r19, r20
     c08:	44 27       	eor	r20, r20
     c0a:	58 5f       	subi	r21, 0xF8	; 248
     c0c:	f3 cf       	rjmp	.-26     	; 0xbf4 <__addsf3x+0x38>
     c0e:	46 95       	lsr	r20
     c10:	37 95       	ror	r19
     c12:	27 95       	ror	r18
     c14:	a7 95       	ror	r26
     c16:	f0 40       	sbci	r31, 0x00	; 0
     c18:	53 95       	inc	r21
     c1a:	c9 f7       	brne	.-14     	; 0xc0e <__addsf3x+0x52>
     c1c:	7e f4       	brtc	.+30     	; 0xc3c <__addsf3x+0x80>
     c1e:	1f 16       	cp	r1, r31
     c20:	ba 0b       	sbc	r27, r26
     c22:	62 0b       	sbc	r22, r18
     c24:	73 0b       	sbc	r23, r19
     c26:	84 0b       	sbc	r24, r20
     c28:	ba f0       	brmi	.+46     	; 0xc58 <__addsf3x+0x9c>
     c2a:	91 50       	subi	r25, 0x01	; 1
     c2c:	a1 f0       	breq	.+40     	; 0xc56 <__addsf3x+0x9a>
     c2e:	ff 0f       	add	r31, r31
     c30:	bb 1f       	adc	r27, r27
     c32:	66 1f       	adc	r22, r22
     c34:	77 1f       	adc	r23, r23
     c36:	88 1f       	adc	r24, r24
     c38:	c2 f7       	brpl	.-16     	; 0xc2a <__addsf3x+0x6e>
     c3a:	0e c0       	rjmp	.+28     	; 0xc58 <__addsf3x+0x9c>
     c3c:	ba 0f       	add	r27, r26
     c3e:	62 1f       	adc	r22, r18
     c40:	73 1f       	adc	r23, r19
     c42:	84 1f       	adc	r24, r20
     c44:	48 f4       	brcc	.+18     	; 0xc58 <__addsf3x+0x9c>
     c46:	87 95       	ror	r24
     c48:	77 95       	ror	r23
     c4a:	67 95       	ror	r22
     c4c:	b7 95       	ror	r27
     c4e:	f7 95       	ror	r31
     c50:	9e 3f       	cpi	r25, 0xFE	; 254
     c52:	08 f0       	brcs	.+2      	; 0xc56 <__addsf3x+0x9a>
     c54:	b0 cf       	rjmp	.-160    	; 0xbb6 <__addsf3+0x28>
     c56:	93 95       	inc	r25
     c58:	88 0f       	add	r24, r24
     c5a:	08 f0       	brcs	.+2      	; 0xc5e <__addsf3x+0xa2>
     c5c:	99 27       	eor	r25, r25
     c5e:	ee 0f       	add	r30, r30
     c60:	97 95       	ror	r25
     c62:	87 95       	ror	r24
     c64:	08 95       	ret

00000c66 <__cmpsf2>:
     c66:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fp_cmp>
     c6a:	08 f4       	brcc	.+2      	; 0xc6e <__cmpsf2+0x8>
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	08 95       	ret

00000c70 <__divsf3>:
     c70:	0e 94 4c 06 	call	0xc98	; 0xc98 <__divsf3x>
     c74:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_round>
     c78:	0e 94 51 07 	call	0xea2	; 0xea2 <__fp_pscB>
     c7c:	58 f0       	brcs	.+22     	; 0xc94 <__divsf3+0x24>
     c7e:	0e 94 4a 07 	call	0xe94	; 0xe94 <__fp_pscA>
     c82:	40 f0       	brcs	.+16     	; 0xc94 <__divsf3+0x24>
     c84:	29 f4       	brne	.+10     	; 0xc90 <__divsf3+0x20>
     c86:	5f 3f       	cpi	r21, 0xFF	; 255
     c88:	29 f0       	breq	.+10     	; 0xc94 <__divsf3+0x24>
     c8a:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__fp_inf>
     c8e:	51 11       	cpse	r21, r1
     c90:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_szero>
     c94:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__fp_nan>

00000c98 <__divsf3x>:
     c98:	0e 94 69 07 	call	0xed2	; 0xed2 <__fp_split3>
     c9c:	68 f3       	brcs	.-38     	; 0xc78 <__divsf3+0x8>

00000c9e <__divsf3_pse>:
     c9e:	99 23       	and	r25, r25
     ca0:	b1 f3       	breq	.-20     	; 0xc8e <__divsf3+0x1e>
     ca2:	55 23       	and	r21, r21
     ca4:	91 f3       	breq	.-28     	; 0xc8a <__divsf3+0x1a>
     ca6:	95 1b       	sub	r25, r21
     ca8:	55 0b       	sbc	r21, r21
     caa:	bb 27       	eor	r27, r27
     cac:	aa 27       	eor	r26, r26
     cae:	62 17       	cp	r22, r18
     cb0:	73 07       	cpc	r23, r19
     cb2:	84 07       	cpc	r24, r20
     cb4:	38 f0       	brcs	.+14     	; 0xcc4 <__divsf3_pse+0x26>
     cb6:	9f 5f       	subi	r25, 0xFF	; 255
     cb8:	5f 4f       	sbci	r21, 0xFF	; 255
     cba:	22 0f       	add	r18, r18
     cbc:	33 1f       	adc	r19, r19
     cbe:	44 1f       	adc	r20, r20
     cc0:	aa 1f       	adc	r26, r26
     cc2:	a9 f3       	breq	.-22     	; 0xcae <__divsf3_pse+0x10>
     cc4:	35 d0       	rcall	.+106    	; 0xd30 <__divsf3_pse+0x92>
     cc6:	0e 2e       	mov	r0, r30
     cc8:	3a f0       	brmi	.+14     	; 0xcd8 <__divsf3_pse+0x3a>
     cca:	e0 e8       	ldi	r30, 0x80	; 128
     ccc:	32 d0       	rcall	.+100    	; 0xd32 <__divsf3_pse+0x94>
     cce:	91 50       	subi	r25, 0x01	; 1
     cd0:	50 40       	sbci	r21, 0x00	; 0
     cd2:	e6 95       	lsr	r30
     cd4:	00 1c       	adc	r0, r0
     cd6:	ca f7       	brpl	.-14     	; 0xcca <__divsf3_pse+0x2c>
     cd8:	2b d0       	rcall	.+86     	; 0xd30 <__divsf3_pse+0x92>
     cda:	fe 2f       	mov	r31, r30
     cdc:	29 d0       	rcall	.+82     	; 0xd30 <__divsf3_pse+0x92>
     cde:	66 0f       	add	r22, r22
     ce0:	77 1f       	adc	r23, r23
     ce2:	88 1f       	adc	r24, r24
     ce4:	bb 1f       	adc	r27, r27
     ce6:	26 17       	cp	r18, r22
     ce8:	37 07       	cpc	r19, r23
     cea:	48 07       	cpc	r20, r24
     cec:	ab 07       	cpc	r26, r27
     cee:	b0 e8       	ldi	r27, 0x80	; 128
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <__divsf3_pse+0x56>
     cf2:	bb 0b       	sbc	r27, r27
     cf4:	80 2d       	mov	r24, r0
     cf6:	bf 01       	movw	r22, r30
     cf8:	ff 27       	eor	r31, r31
     cfa:	93 58       	subi	r25, 0x83	; 131
     cfc:	5f 4f       	sbci	r21, 0xFF	; 255
     cfe:	3a f0       	brmi	.+14     	; 0xd0e <__divsf3_pse+0x70>
     d00:	9e 3f       	cpi	r25, 0xFE	; 254
     d02:	51 05       	cpc	r21, r1
     d04:	78 f0       	brcs	.+30     	; 0xd24 <__divsf3_pse+0x86>
     d06:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__fp_inf>
     d0a:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_szero>
     d0e:	5f 3f       	cpi	r21, 0xFF	; 255
     d10:	e4 f3       	brlt	.-8      	; 0xd0a <__divsf3_pse+0x6c>
     d12:	98 3e       	cpi	r25, 0xE8	; 232
     d14:	d4 f3       	brlt	.-12     	; 0xd0a <__divsf3_pse+0x6c>
     d16:	86 95       	lsr	r24
     d18:	77 95       	ror	r23
     d1a:	67 95       	ror	r22
     d1c:	b7 95       	ror	r27
     d1e:	f7 95       	ror	r31
     d20:	9f 5f       	subi	r25, 0xFF	; 255
     d22:	c9 f7       	brne	.-14     	; 0xd16 <__divsf3_pse+0x78>
     d24:	88 0f       	add	r24, r24
     d26:	91 1d       	adc	r25, r1
     d28:	96 95       	lsr	r25
     d2a:	87 95       	ror	r24
     d2c:	97 f9       	bld	r25, 7
     d2e:	08 95       	ret
     d30:	e1 e0       	ldi	r30, 0x01	; 1
     d32:	66 0f       	add	r22, r22
     d34:	77 1f       	adc	r23, r23
     d36:	88 1f       	adc	r24, r24
     d38:	bb 1f       	adc	r27, r27
     d3a:	62 17       	cp	r22, r18
     d3c:	73 07       	cpc	r23, r19
     d3e:	84 07       	cpc	r24, r20
     d40:	ba 07       	cpc	r27, r26
     d42:	20 f0       	brcs	.+8      	; 0xd4c <__divsf3_pse+0xae>
     d44:	62 1b       	sub	r22, r18
     d46:	73 0b       	sbc	r23, r19
     d48:	84 0b       	sbc	r24, r20
     d4a:	ba 0b       	sbc	r27, r26
     d4c:	ee 1f       	adc	r30, r30
     d4e:	88 f7       	brcc	.-30     	; 0xd32 <__divsf3_pse+0x94>
     d50:	e0 95       	com	r30
     d52:	08 95       	ret

00000d54 <__fixsfsi>:
     d54:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fixunssfsi>
     d58:	68 94       	set
     d5a:	b1 11       	cpse	r27, r1
     d5c:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_szero>
     d60:	08 95       	ret

00000d62 <__fixunssfsi>:
     d62:	0e 94 71 07 	call	0xee2	; 0xee2 <__fp_splitA>
     d66:	88 f0       	brcs	.+34     	; 0xd8a <__fixunssfsi+0x28>
     d68:	9f 57       	subi	r25, 0x7F	; 127
     d6a:	98 f0       	brcs	.+38     	; 0xd92 <__fixunssfsi+0x30>
     d6c:	b9 2f       	mov	r27, r25
     d6e:	99 27       	eor	r25, r25
     d70:	b7 51       	subi	r27, 0x17	; 23
     d72:	b0 f0       	brcs	.+44     	; 0xda0 <__fixunssfsi+0x3e>
     d74:	e1 f0       	breq	.+56     	; 0xdae <__fixunssfsi+0x4c>
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	88 1f       	adc	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	1a f0       	brmi	.+6      	; 0xd86 <__fixunssfsi+0x24>
     d80:	ba 95       	dec	r27
     d82:	c9 f7       	brne	.-14     	; 0xd76 <__fixunssfsi+0x14>
     d84:	14 c0       	rjmp	.+40     	; 0xdae <__fixunssfsi+0x4c>
     d86:	b1 30       	cpi	r27, 0x01	; 1
     d88:	91 f0       	breq	.+36     	; 0xdae <__fixunssfsi+0x4c>
     d8a:	0e 94 8b 07 	call	0xf16	; 0xf16 <__fp_zero>
     d8e:	b1 e0       	ldi	r27, 0x01	; 1
     d90:	08 95       	ret
     d92:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__fp_zero>
     d96:	67 2f       	mov	r22, r23
     d98:	78 2f       	mov	r23, r24
     d9a:	88 27       	eor	r24, r24
     d9c:	b8 5f       	subi	r27, 0xF8	; 248
     d9e:	39 f0       	breq	.+14     	; 0xdae <__fixunssfsi+0x4c>
     da0:	b9 3f       	cpi	r27, 0xF9	; 249
     da2:	cc f3       	brlt	.-14     	; 0xd96 <__fixunssfsi+0x34>
     da4:	86 95       	lsr	r24
     da6:	77 95       	ror	r23
     da8:	67 95       	ror	r22
     daa:	b3 95       	inc	r27
     dac:	d9 f7       	brne	.-10     	; 0xda4 <__fixunssfsi+0x42>
     dae:	3e f4       	brtc	.+14     	; 0xdbe <__fixunssfsi+0x5c>
     db0:	90 95       	com	r25
     db2:	80 95       	com	r24
     db4:	70 95       	com	r23
     db6:	61 95       	neg	r22
     db8:	7f 4f       	sbci	r23, 0xFF	; 255
     dba:	8f 4f       	sbci	r24, 0xFF	; 255
     dbc:	9f 4f       	sbci	r25, 0xFF	; 255
     dbe:	08 95       	ret

00000dc0 <__floatunsisf>:
     dc0:	e8 94       	clt
     dc2:	09 c0       	rjmp	.+18     	; 0xdd6 <__floatsisf+0x12>

00000dc4 <__floatsisf>:
     dc4:	97 fb       	bst	r25, 7
     dc6:	3e f4       	brtc	.+14     	; 0xdd6 <__floatsisf+0x12>
     dc8:	90 95       	com	r25
     dca:	80 95       	com	r24
     dcc:	70 95       	com	r23
     dce:	61 95       	neg	r22
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	8f 4f       	sbci	r24, 0xFF	; 255
     dd4:	9f 4f       	sbci	r25, 0xFF	; 255
     dd6:	99 23       	and	r25, r25
     dd8:	a9 f0       	breq	.+42     	; 0xe04 <__floatsisf+0x40>
     dda:	f9 2f       	mov	r31, r25
     ddc:	96 e9       	ldi	r25, 0x96	; 150
     dde:	bb 27       	eor	r27, r27
     de0:	93 95       	inc	r25
     de2:	f6 95       	lsr	r31
     de4:	87 95       	ror	r24
     de6:	77 95       	ror	r23
     de8:	67 95       	ror	r22
     dea:	b7 95       	ror	r27
     dec:	f1 11       	cpse	r31, r1
     dee:	f8 cf       	rjmp	.-16     	; 0xde0 <__floatsisf+0x1c>
     df0:	fa f4       	brpl	.+62     	; 0xe30 <__floatsisf+0x6c>
     df2:	bb 0f       	add	r27, r27
     df4:	11 f4       	brne	.+4      	; 0xdfa <__floatsisf+0x36>
     df6:	60 ff       	sbrs	r22, 0
     df8:	1b c0       	rjmp	.+54     	; 0xe30 <__floatsisf+0x6c>
     dfa:	6f 5f       	subi	r22, 0xFF	; 255
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	8f 4f       	sbci	r24, 0xFF	; 255
     e00:	9f 4f       	sbci	r25, 0xFF	; 255
     e02:	16 c0       	rjmp	.+44     	; 0xe30 <__floatsisf+0x6c>
     e04:	88 23       	and	r24, r24
     e06:	11 f0       	breq	.+4      	; 0xe0c <__floatsisf+0x48>
     e08:	96 e9       	ldi	r25, 0x96	; 150
     e0a:	11 c0       	rjmp	.+34     	; 0xe2e <__floatsisf+0x6a>
     e0c:	77 23       	and	r23, r23
     e0e:	21 f0       	breq	.+8      	; 0xe18 <__floatsisf+0x54>
     e10:	9e e8       	ldi	r25, 0x8E	; 142
     e12:	87 2f       	mov	r24, r23
     e14:	76 2f       	mov	r23, r22
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <__floatsisf+0x5e>
     e18:	66 23       	and	r22, r22
     e1a:	71 f0       	breq	.+28     	; 0xe38 <__floatsisf+0x74>
     e1c:	96 e8       	ldi	r25, 0x86	; 134
     e1e:	86 2f       	mov	r24, r22
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	2a f0       	brmi	.+10     	; 0xe30 <__floatsisf+0x6c>
     e26:	9a 95       	dec	r25
     e28:	66 0f       	add	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	88 1f       	adc	r24, r24
     e2e:	da f7       	brpl	.-10     	; 0xe26 <__floatsisf+0x62>
     e30:	88 0f       	add	r24, r24
     e32:	96 95       	lsr	r25
     e34:	87 95       	ror	r24
     e36:	97 f9       	bld	r25, 7
     e38:	08 95       	ret

00000e3a <__fp_cmp>:
     e3a:	99 0f       	add	r25, r25
     e3c:	00 08       	sbc	r0, r0
     e3e:	55 0f       	add	r21, r21
     e40:	aa 0b       	sbc	r26, r26
     e42:	e0 e8       	ldi	r30, 0x80	; 128
     e44:	fe ef       	ldi	r31, 0xFE	; 254
     e46:	16 16       	cp	r1, r22
     e48:	17 06       	cpc	r1, r23
     e4a:	e8 07       	cpc	r30, r24
     e4c:	f9 07       	cpc	r31, r25
     e4e:	c0 f0       	brcs	.+48     	; 0xe80 <__fp_cmp+0x46>
     e50:	12 16       	cp	r1, r18
     e52:	13 06       	cpc	r1, r19
     e54:	e4 07       	cpc	r30, r20
     e56:	f5 07       	cpc	r31, r21
     e58:	98 f0       	brcs	.+38     	; 0xe80 <__fp_cmp+0x46>
     e5a:	62 1b       	sub	r22, r18
     e5c:	73 0b       	sbc	r23, r19
     e5e:	84 0b       	sbc	r24, r20
     e60:	95 0b       	sbc	r25, r21
     e62:	39 f4       	brne	.+14     	; 0xe72 <__fp_cmp+0x38>
     e64:	0a 26       	eor	r0, r26
     e66:	61 f0       	breq	.+24     	; 0xe80 <__fp_cmp+0x46>
     e68:	23 2b       	or	r18, r19
     e6a:	24 2b       	or	r18, r20
     e6c:	25 2b       	or	r18, r21
     e6e:	21 f4       	brne	.+8      	; 0xe78 <__fp_cmp+0x3e>
     e70:	08 95       	ret
     e72:	0a 26       	eor	r0, r26
     e74:	09 f4       	brne	.+2      	; 0xe78 <__fp_cmp+0x3e>
     e76:	a1 40       	sbci	r26, 0x01	; 1
     e78:	a6 95       	lsr	r26
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	81 1d       	adc	r24, r1
     e7e:	81 1d       	adc	r24, r1
     e80:	08 95       	ret

00000e82 <__fp_inf>:
     e82:	97 f9       	bld	r25, 7
     e84:	9f 67       	ori	r25, 0x7F	; 127
     e86:	80 e8       	ldi	r24, 0x80	; 128
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	08 95       	ret

00000e8e <__fp_nan>:
     e8e:	9f ef       	ldi	r25, 0xFF	; 255
     e90:	80 ec       	ldi	r24, 0xC0	; 192
     e92:	08 95       	ret

00000e94 <__fp_pscA>:
     e94:	00 24       	eor	r0, r0
     e96:	0a 94       	dec	r0
     e98:	16 16       	cp	r1, r22
     e9a:	17 06       	cpc	r1, r23
     e9c:	18 06       	cpc	r1, r24
     e9e:	09 06       	cpc	r0, r25
     ea0:	08 95       	ret

00000ea2 <__fp_pscB>:
     ea2:	00 24       	eor	r0, r0
     ea4:	0a 94       	dec	r0
     ea6:	12 16       	cp	r1, r18
     ea8:	13 06       	cpc	r1, r19
     eaa:	14 06       	cpc	r1, r20
     eac:	05 06       	cpc	r0, r21
     eae:	08 95       	ret

00000eb0 <__fp_round>:
     eb0:	09 2e       	mov	r0, r25
     eb2:	03 94       	inc	r0
     eb4:	00 0c       	add	r0, r0
     eb6:	11 f4       	brne	.+4      	; 0xebc <__fp_round+0xc>
     eb8:	88 23       	and	r24, r24
     eba:	52 f0       	brmi	.+20     	; 0xed0 <__fp_round+0x20>
     ebc:	bb 0f       	add	r27, r27
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fp_round+0x20>
     ec0:	bf 2b       	or	r27, r31
     ec2:	11 f4       	brne	.+4      	; 0xec8 <__fp_round+0x18>
     ec4:	60 ff       	sbrs	r22, 0
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <__fp_round+0x20>
     ec8:	6f 5f       	subi	r22, 0xFF	; 255
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	8f 4f       	sbci	r24, 0xFF	; 255
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	08 95       	ret

00000ed2 <__fp_split3>:
     ed2:	57 fd       	sbrc	r21, 7
     ed4:	90 58       	subi	r25, 0x80	; 128
     ed6:	44 0f       	add	r20, r20
     ed8:	55 1f       	adc	r21, r21
     eda:	59 f0       	breq	.+22     	; 0xef2 <__fp_splitA+0x10>
     edc:	5f 3f       	cpi	r21, 0xFF	; 255
     ede:	71 f0       	breq	.+28     	; 0xefc <__fp_splitA+0x1a>
     ee0:	47 95       	ror	r20

00000ee2 <__fp_splitA>:
     ee2:	88 0f       	add	r24, r24
     ee4:	97 fb       	bst	r25, 7
     ee6:	99 1f       	adc	r25, r25
     ee8:	61 f0       	breq	.+24     	; 0xf02 <__fp_splitA+0x20>
     eea:	9f 3f       	cpi	r25, 0xFF	; 255
     eec:	79 f0       	breq	.+30     	; 0xf0c <__fp_splitA+0x2a>
     eee:	87 95       	ror	r24
     ef0:	08 95       	ret
     ef2:	12 16       	cp	r1, r18
     ef4:	13 06       	cpc	r1, r19
     ef6:	14 06       	cpc	r1, r20
     ef8:	55 1f       	adc	r21, r21
     efa:	f2 cf       	rjmp	.-28     	; 0xee0 <__fp_split3+0xe>
     efc:	46 95       	lsr	r20
     efe:	f1 df       	rcall	.-30     	; 0xee2 <__fp_splitA>
     f00:	08 c0       	rjmp	.+16     	; 0xf12 <__fp_splitA+0x30>
     f02:	16 16       	cp	r1, r22
     f04:	17 06       	cpc	r1, r23
     f06:	18 06       	cpc	r1, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	f1 cf       	rjmp	.-30     	; 0xeee <__fp_splitA+0xc>
     f0c:	86 95       	lsr	r24
     f0e:	71 05       	cpc	r23, r1
     f10:	61 05       	cpc	r22, r1
     f12:	08 94       	sec
     f14:	08 95       	ret

00000f16 <__fp_zero>:
     f16:	e8 94       	clt

00000f18 <__fp_szero>:
     f18:	bb 27       	eor	r27, r27
     f1a:	66 27       	eor	r22, r22
     f1c:	77 27       	eor	r23, r23
     f1e:	cb 01       	movw	r24, r22
     f20:	97 f9       	bld	r25, 7
     f22:	08 95       	ret

00000f24 <__gesf2>:
     f24:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fp_cmp>
     f28:	08 f4       	brcc	.+2      	; 0xf2c <__gesf2+0x8>
     f2a:	8f ef       	ldi	r24, 0xFF	; 255
     f2c:	08 95       	ret

00000f2e <__mulsf3>:
     f2e:	0e 94 aa 07 	call	0xf54	; 0xf54 <__mulsf3x>
     f32:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_round>
     f36:	0e 94 4a 07 	call	0xe94	; 0xe94 <__fp_pscA>
     f3a:	38 f0       	brcs	.+14     	; 0xf4a <__mulsf3+0x1c>
     f3c:	0e 94 51 07 	call	0xea2	; 0xea2 <__fp_pscB>
     f40:	20 f0       	brcs	.+8      	; 0xf4a <__mulsf3+0x1c>
     f42:	95 23       	and	r25, r21
     f44:	11 f0       	breq	.+4      	; 0xf4a <__mulsf3+0x1c>
     f46:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__fp_inf>
     f4a:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__fp_nan>
     f4e:	11 24       	eor	r1, r1
     f50:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_szero>

00000f54 <__mulsf3x>:
     f54:	0e 94 69 07 	call	0xed2	; 0xed2 <__fp_split3>
     f58:	70 f3       	brcs	.-36     	; 0xf36 <__mulsf3+0x8>

00000f5a <__mulsf3_pse>:
     f5a:	95 9f       	mul	r25, r21
     f5c:	c1 f3       	breq	.-16     	; 0xf4e <__mulsf3+0x20>
     f5e:	95 0f       	add	r25, r21
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	55 1f       	adc	r21, r21
     f64:	62 9f       	mul	r22, r18
     f66:	f0 01       	movw	r30, r0
     f68:	72 9f       	mul	r23, r18
     f6a:	bb 27       	eor	r27, r27
     f6c:	f0 0d       	add	r31, r0
     f6e:	b1 1d       	adc	r27, r1
     f70:	63 9f       	mul	r22, r19
     f72:	aa 27       	eor	r26, r26
     f74:	f0 0d       	add	r31, r0
     f76:	b1 1d       	adc	r27, r1
     f78:	aa 1f       	adc	r26, r26
     f7a:	64 9f       	mul	r22, r20
     f7c:	66 27       	eor	r22, r22
     f7e:	b0 0d       	add	r27, r0
     f80:	a1 1d       	adc	r26, r1
     f82:	66 1f       	adc	r22, r22
     f84:	82 9f       	mul	r24, r18
     f86:	22 27       	eor	r18, r18
     f88:	b0 0d       	add	r27, r0
     f8a:	a1 1d       	adc	r26, r1
     f8c:	62 1f       	adc	r22, r18
     f8e:	73 9f       	mul	r23, r19
     f90:	b0 0d       	add	r27, r0
     f92:	a1 1d       	adc	r26, r1
     f94:	62 1f       	adc	r22, r18
     f96:	83 9f       	mul	r24, r19
     f98:	a0 0d       	add	r26, r0
     f9a:	61 1d       	adc	r22, r1
     f9c:	22 1f       	adc	r18, r18
     f9e:	74 9f       	mul	r23, r20
     fa0:	33 27       	eor	r19, r19
     fa2:	a0 0d       	add	r26, r0
     fa4:	61 1d       	adc	r22, r1
     fa6:	23 1f       	adc	r18, r19
     fa8:	84 9f       	mul	r24, r20
     faa:	60 0d       	add	r22, r0
     fac:	21 1d       	adc	r18, r1
     fae:	82 2f       	mov	r24, r18
     fb0:	76 2f       	mov	r23, r22
     fb2:	6a 2f       	mov	r22, r26
     fb4:	11 24       	eor	r1, r1
     fb6:	9f 57       	subi	r25, 0x7F	; 127
     fb8:	50 40       	sbci	r21, 0x00	; 0
     fba:	9a f0       	brmi	.+38     	; 0xfe2 <__mulsf3_pse+0x88>
     fbc:	f1 f0       	breq	.+60     	; 0xffa <__mulsf3_pse+0xa0>
     fbe:	88 23       	and	r24, r24
     fc0:	4a f0       	brmi	.+18     	; 0xfd4 <__mulsf3_pse+0x7a>
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	bb 1f       	adc	r27, r27
     fc8:	66 1f       	adc	r22, r22
     fca:	77 1f       	adc	r23, r23
     fcc:	88 1f       	adc	r24, r24
     fce:	91 50       	subi	r25, 0x01	; 1
     fd0:	50 40       	sbci	r21, 0x00	; 0
     fd2:	a9 f7       	brne	.-22     	; 0xfbe <__mulsf3_pse+0x64>
     fd4:	9e 3f       	cpi	r25, 0xFE	; 254
     fd6:	51 05       	cpc	r21, r1
     fd8:	80 f0       	brcs	.+32     	; 0xffa <__mulsf3_pse+0xa0>
     fda:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__fp_inf>
     fde:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_szero>
     fe2:	5f 3f       	cpi	r21, 0xFF	; 255
     fe4:	e4 f3       	brlt	.-8      	; 0xfde <__mulsf3_pse+0x84>
     fe6:	98 3e       	cpi	r25, 0xE8	; 232
     fe8:	d4 f3       	brlt	.-12     	; 0xfde <__mulsf3_pse+0x84>
     fea:	86 95       	lsr	r24
     fec:	77 95       	ror	r23
     fee:	67 95       	ror	r22
     ff0:	b7 95       	ror	r27
     ff2:	f7 95       	ror	r31
     ff4:	e7 95       	ror	r30
     ff6:	9f 5f       	subi	r25, 0xFF	; 255
     ff8:	c1 f7       	brne	.-16     	; 0xfea <__mulsf3_pse+0x90>
     ffa:	fe 2b       	or	r31, r30
     ffc:	88 0f       	add	r24, r24
     ffe:	91 1d       	adc	r25, r1
    1000:	96 95       	lsr	r25
    1002:	87 95       	ror	r24
    1004:	97 f9       	bld	r25, 7
    1006:	08 95       	ret

00001008 <atof>:
    1008:	66 27       	eor	r22, r22
    100a:	77 27       	eor	r23, r23
    100c:	0c 94 2d 08 	jmp	0x105a	; 0x105a <strtod>

00001010 <__itoa_ncheck>:
    1010:	bb 27       	eor	r27, r27
    1012:	4a 30       	cpi	r20, 0x0A	; 10
    1014:	31 f4       	brne	.+12     	; 0x1022 <__itoa_ncheck+0x12>
    1016:	99 23       	and	r25, r25
    1018:	22 f4       	brpl	.+8      	; 0x1022 <__itoa_ncheck+0x12>
    101a:	bd e2       	ldi	r27, 0x2D	; 45
    101c:	90 95       	com	r25
    101e:	81 95       	neg	r24
    1020:	9f 4f       	sbci	r25, 0xFF	; 255
    1022:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__utoa_common>

00001026 <__utoa_ncheck>:
    1026:	bb 27       	eor	r27, r27

00001028 <__utoa_common>:
    1028:	fb 01       	movw	r30, r22
    102a:	55 27       	eor	r21, r21
    102c:	aa 27       	eor	r26, r26
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	aa 1f       	adc	r26, r26
    1034:	a4 17       	cp	r26, r20
    1036:	10 f0       	brcs	.+4      	; 0x103c <__utoa_common+0x14>
    1038:	a4 1b       	sub	r26, r20
    103a:	83 95       	inc	r24
    103c:	50 51       	subi	r21, 0x10	; 16
    103e:	b9 f7       	brne	.-18     	; 0x102e <__utoa_common+0x6>
    1040:	a0 5d       	subi	r26, 0xD0	; 208
    1042:	aa 33       	cpi	r26, 0x3A	; 58
    1044:	08 f0       	brcs	.+2      	; 0x1048 <__utoa_common+0x20>
    1046:	a9 5d       	subi	r26, 0xD9	; 217
    1048:	a1 93       	st	Z+, r26
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	79 f7       	brne	.-34     	; 0x102c <__utoa_common+0x4>
    104e:	b1 11       	cpse	r27, r1
    1050:	b1 93       	st	Z+, r27
    1052:	11 92       	st	Z+, r1
    1054:	cb 01       	movw	r24, r22
    1056:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <strrev>

0000105a <strtod>:
    105a:	a0 e0       	ldi	r26, 0x00	; 0
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e3 e3       	ldi	r30, 0x33	; 51
    1060:	f8 e0       	ldi	r31, 0x08	; 8
    1062:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__prologue_saves__+0xc>
    1066:	ec 01       	movw	r28, r24
    1068:	6b 01       	movw	r12, r22
    106a:	61 15       	cp	r22, r1
    106c:	71 05       	cpc	r23, r1
    106e:	19 f0       	breq	.+6      	; 0x1076 <strtod+0x1c>
    1070:	fb 01       	movw	r30, r22
    1072:	91 83       	std	Z+1, r25	; 0x01
    1074:	80 83       	st	Z, r24
    1076:	7e 01       	movw	r14, r28
    1078:	ff ef       	ldi	r31, 0xFF	; 255
    107a:	ef 1a       	sub	r14, r31
    107c:	ff 0a       	sbc	r15, r31
    107e:	08 81       	ld	r16, Y
    1080:	80 2f       	mov	r24, r16
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <isspace>
    1088:	89 2b       	or	r24, r25
    108a:	11 f0       	breq	.+4      	; 0x1090 <strtod+0x36>
    108c:	e7 01       	movw	r28, r14
    108e:	f3 cf       	rjmp	.-26     	; 0x1076 <strtod+0x1c>
    1090:	0d 32       	cpi	r16, 0x2D	; 45
    1092:	39 f4       	brne	.+14     	; 0x10a2 <strtod+0x48>
    1094:	7e 01       	movw	r14, r28
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	e8 0e       	add	r14, r24
    109a:	f1 1c       	adc	r15, r1
    109c:	09 81       	ldd	r16, Y+1	; 0x01
    109e:	11 e0       	ldi	r17, 0x01	; 1
    10a0:	08 c0       	rjmp	.+16     	; 0x10b2 <strtod+0x58>
    10a2:	0b 32       	cpi	r16, 0x2B	; 43
    10a4:	29 f4       	brne	.+10     	; 0x10b0 <strtod+0x56>
    10a6:	7e 01       	movw	r14, r28
    10a8:	92 e0       	ldi	r25, 0x02	; 2
    10aa:	e9 0e       	add	r14, r25
    10ac:	f1 1c       	adc	r15, r1
    10ae:	09 81       	ldd	r16, Y+1	; 0x01
    10b0:	10 e0       	ldi	r17, 0x00	; 0
    10b2:	e7 01       	movw	r28, r14
    10b4:	21 97       	sbiw	r28, 0x01	; 1
    10b6:	43 e0       	ldi	r20, 0x03	; 3
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	6c e5       	ldi	r22, 0x5C	; 92
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	ce 01       	movw	r24, r28
    10c0:	0e 94 84 09 	call	0x1308	; 0x1308 <strncasecmp_P>
    10c4:	89 2b       	or	r24, r25
    10c6:	c1 f4       	brne	.+48     	; 0x10f8 <strtod+0x9e>
    10c8:	23 96       	adiw	r28, 0x03	; 3
    10ca:	45 e0       	ldi	r20, 0x05	; 5
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	67 e5       	ldi	r22, 0x57	; 87
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	ce 01       	movw	r24, r28
    10d4:	0e 94 84 09 	call	0x1308	; 0x1308 <strncasecmp_P>
    10d8:	89 2b       	or	r24, r25
    10da:	09 f4       	brne	.+2      	; 0x10de <strtod+0x84>
    10dc:	25 96       	adiw	r28, 0x05	; 5
    10de:	c1 14       	cp	r12, r1
    10e0:	d1 04       	cpc	r13, r1
    10e2:	19 f0       	breq	.+6      	; 0x10ea <strtod+0x90>
    10e4:	f6 01       	movw	r30, r12
    10e6:	d1 83       	std	Z+1, r29	; 0x01
    10e8:	c0 83       	st	Z, r28
    10ea:	11 11       	cpse	r17, r1
    10ec:	f6 c0       	rjmp	.+492    	; 0x12da <strtod+0x280>
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	80 e8       	ldi	r24, 0x80	; 128
    10f4:	9f e7       	ldi	r25, 0x7F	; 127
    10f6:	fa c0       	rjmp	.+500    	; 0x12ec <strtod+0x292>
    10f8:	43 e0       	ldi	r20, 0x03	; 3
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	64 e5       	ldi	r22, 0x54	; 84
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	ce 01       	movw	r24, r28
    1102:	0e 94 84 09 	call	0x1308	; 0x1308 <strncasecmp_P>
    1106:	89 2b       	or	r24, r25
    1108:	59 f4       	brne	.+22     	; 0x1120 <strtod+0xc6>
    110a:	c1 14       	cp	r12, r1
    110c:	d1 04       	cpc	r13, r1
    110e:	09 f4       	brne	.+2      	; 0x1112 <strtod+0xb8>
    1110:	e9 c0       	rjmp	.+466    	; 0x12e4 <strtod+0x28a>
    1112:	f2 e0       	ldi	r31, 0x02	; 2
    1114:	ef 0e       	add	r14, r31
    1116:	f1 1c       	adc	r15, r1
    1118:	f6 01       	movw	r30, r12
    111a:	f1 82       	std	Z+1, r15	; 0x01
    111c:	e0 82       	st	Z, r14
    111e:	e2 c0       	rjmp	.+452    	; 0x12e4 <strtod+0x28a>
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	a9 01       	movw	r20, r18
    1126:	c0 e0       	ldi	r28, 0x00	; 0
    1128:	d0 e0       	ldi	r29, 0x00	; 0
    112a:	f7 01       	movw	r30, r14
    112c:	80 ed       	ldi	r24, 0xD0	; 208
    112e:	a8 2e       	mov	r10, r24
    1130:	a0 0e       	add	r10, r16
    1132:	89 e0       	ldi	r24, 0x09	; 9
    1134:	8a 15       	cp	r24, r10
    1136:	30 f1       	brcs	.+76     	; 0x1184 <strtod+0x12a>
    1138:	91 2f       	mov	r25, r17
    113a:	92 60       	ori	r25, 0x02	; 2
    113c:	b9 2e       	mov	r11, r25
    113e:	81 2f       	mov	r24, r17
    1140:	88 70       	andi	r24, 0x08	; 8
    1142:	12 ff       	sbrs	r17, 2
    1144:	04 c0       	rjmp	.+8      	; 0x114e <strtod+0xf4>
    1146:	81 11       	cpse	r24, r1
    1148:	24 c0       	rjmp	.+72     	; 0x1192 <strtod+0x138>
    114a:	21 96       	adiw	r28, 0x01	; 1
    114c:	22 c0       	rjmp	.+68     	; 0x1192 <strtod+0x138>
    114e:	81 11       	cpse	r24, r1
    1150:	21 97       	sbiw	r28, 0x01	; 1
    1152:	a5 e0       	ldi	r26, 0x05	; 5
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	0e 94 af 09 	call	0x135e	; 0x135e <__muluhisi3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	aa 1f       	adc	r26, r26
    1164:	bb 1f       	adc	r27, r27
    1166:	9c 01       	movw	r18, r24
    1168:	ad 01       	movw	r20, r26
    116a:	2a 0d       	add	r18, r10
    116c:	31 1d       	adc	r19, r1
    116e:	41 1d       	adc	r20, r1
    1170:	51 1d       	adc	r21, r1
    1172:	28 39       	cpi	r18, 0x98	; 152
    1174:	89 e9       	ldi	r24, 0x99	; 153
    1176:	38 07       	cpc	r19, r24
    1178:	48 07       	cpc	r20, r24
    117a:	89 e1       	ldi	r24, 0x19	; 25
    117c:	58 07       	cpc	r21, r24
    117e:	48 f0       	brcs	.+18     	; 0x1192 <strtod+0x138>
    1180:	16 60       	ori	r17, 0x06	; 6
    1182:	06 c0       	rjmp	.+12     	; 0x1190 <strtod+0x136>
    1184:	9e ef       	ldi	r25, 0xFE	; 254
    1186:	a9 12       	cpse	r10, r25
    1188:	0a c0       	rjmp	.+20     	; 0x119e <strtod+0x144>
    118a:	13 fd       	sbrc	r17, 3
    118c:	40 c0       	rjmp	.+128    	; 0x120e <strtod+0x1b4>
    118e:	18 60       	ori	r17, 0x08	; 8
    1190:	b1 2e       	mov	r11, r17
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	e8 1a       	sub	r14, r24
    1196:	f8 0a       	sbc	r15, r24
    1198:	00 81       	ld	r16, Z
    119a:	1b 2d       	mov	r17, r11
    119c:	c6 cf       	rjmp	.-116    	; 0x112a <strtod+0xd0>
    119e:	80 2f       	mov	r24, r16
    11a0:	8f 7d       	andi	r24, 0xDF	; 223
    11a2:	85 34       	cpi	r24, 0x45	; 69
    11a4:	a1 f5       	brne	.+104    	; 0x120e <strtod+0x1b4>
    11a6:	80 81       	ld	r24, Z
    11a8:	8d 32       	cpi	r24, 0x2D	; 45
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <strtod+0x156>
    11ac:	10 61       	ori	r17, 0x10	; 16
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <strtod+0x162>
    11b0:	8b 32       	cpi	r24, 0x2B	; 43
    11b2:	21 f0       	breq	.+8      	; 0x11bc <strtod+0x162>
    11b4:	31 96       	adiw	r30, 0x01	; 1
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <strtod+0x16a>
    11bc:	81 81       	ldd	r24, Z+1	; 0x01
    11be:	32 96       	adiw	r30, 0x02	; 2
    11c0:	62 e0       	ldi	r22, 0x02	; 2
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	80 53       	subi	r24, 0x30	; 48
    11c6:	8a 30       	cpi	r24, 0x0A	; 10
    11c8:	18 f0       	brcs	.+6      	; 0x11d0 <strtod+0x176>
    11ca:	e6 1b       	sub	r30, r22
    11cc:	f7 0b       	sbc	r31, r23
    11ce:	1f c0       	rjmp	.+62     	; 0x120e <strtod+0x1b4>
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	60 38       	cpi	r22, 0x80	; 128
    11d6:	9c e0       	ldi	r25, 0x0C	; 12
    11d8:	79 07       	cpc	r23, r25
    11da:	5c f4       	brge	.+22     	; 0x11f2 <strtod+0x198>
    11dc:	db 01       	movw	r26, r22
    11de:	aa 0f       	add	r26, r26
    11e0:	bb 1f       	adc	r27, r27
    11e2:	aa 0f       	add	r26, r26
    11e4:	bb 1f       	adc	r27, r27
    11e6:	6a 0f       	add	r22, r26
    11e8:	7b 1f       	adc	r23, r27
    11ea:	66 0f       	add	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	68 0f       	add	r22, r24
    11f0:	71 1d       	adc	r23, r1
    11f2:	31 96       	adiw	r30, 0x01	; 1
    11f4:	df 01       	movw	r26, r30
    11f6:	11 97       	sbiw	r26, 0x01	; 1
    11f8:	8c 91       	ld	r24, X
    11fa:	80 53       	subi	r24, 0x30	; 48
    11fc:	8a 30       	cpi	r24, 0x0A	; 10
    11fe:	50 f3       	brcs	.-44     	; 0x11d4 <strtod+0x17a>
    1200:	14 ff       	sbrs	r17, 4
    1202:	03 c0       	rjmp	.+6      	; 0x120a <strtod+0x1b0>
    1204:	71 95       	neg	r23
    1206:	61 95       	neg	r22
    1208:	71 09       	sbc	r23, r1
    120a:	c6 0f       	add	r28, r22
    120c:	d7 1f       	adc	r29, r23
    120e:	11 ff       	sbrs	r17, 1
    1210:	08 c0       	rjmp	.+16     	; 0x1222 <strtod+0x1c8>
    1212:	c1 14       	cp	r12, r1
    1214:	d1 04       	cpc	r13, r1
    1216:	29 f0       	breq	.+10     	; 0x1222 <strtod+0x1c8>
    1218:	cf 01       	movw	r24, r30
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f6 01       	movw	r30, r12
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
    1222:	ca 01       	movw	r24, r20
    1224:	b9 01       	movw	r22, r18
    1226:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__floatunsisf>
    122a:	21 2f       	mov	r18, r17
    122c:	23 70       	andi	r18, 0x03	; 3
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	19 f0       	breq	.+6      	; 0x1238 <strtod+0x1de>
    1232:	4b 01       	movw	r8, r22
    1234:	5c 01       	movw	r10, r24
    1236:	06 c0       	rjmp	.+12     	; 0x1244 <strtod+0x1ea>
    1238:	4b 01       	movw	r8, r22
    123a:	5c 01       	movw	r10, r24
    123c:	b7 fa       	bst	r11, 7
    123e:	b0 94       	com	r11
    1240:	b7 f8       	bld	r11, 7
    1242:	b0 94       	com	r11
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	a9 01       	movw	r20, r18
    124a:	c5 01       	movw	r24, r10
    124c:	b4 01       	movw	r22, r8
    124e:	0e 94 33 06 	call	0xc66	; 0xc66 <__cmpsf2>
    1252:	88 23       	and	r24, r24
    1254:	09 f4       	brne	.+2      	; 0x1258 <strtod+0x1fe>
    1256:	3e c0       	rjmp	.+124    	; 0x12d4 <strtod+0x27a>
    1258:	d7 ff       	sbrs	r29, 7
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <strtod+0x20e>
    125c:	d1 95       	neg	r29
    125e:	c1 95       	neg	r28
    1260:	d1 09       	sbc	r29, r1
    1262:	03 e7       	ldi	r16, 0x73	; 115
    1264:	10 e0       	ldi	r17, 0x00	; 0
    1266:	02 c0       	rjmp	.+4      	; 0x126c <strtod+0x212>
    1268:	0b e8       	ldi	r16, 0x8B	; 139
    126a:	10 e0       	ldi	r17, 0x00	; 0
    126c:	68 01       	movw	r12, r16
    126e:	f8 e1       	ldi	r31, 0x18	; 24
    1270:	cf 1a       	sub	r12, r31
    1272:	d1 08       	sbc	r13, r1
    1274:	90 e2       	ldi	r25, 0x20	; 32
    1276:	e9 2e       	mov	r14, r25
    1278:	f1 2c       	mov	r15, r1
    127a:	ce 15       	cp	r28, r14
    127c:	df 05       	cpc	r29, r15
    127e:	74 f0       	brlt	.+28     	; 0x129c <strtod+0x242>
    1280:	f8 01       	movw	r30, r16
    1282:	25 91       	lpm	r18, Z+
    1284:	35 91       	lpm	r19, Z+
    1286:	45 91       	lpm	r20, Z+
    1288:	54 91       	lpm	r21, Z
    128a:	c5 01       	movw	r24, r10
    128c:	b4 01       	movw	r22, r8
    128e:	0e 94 97 07 	call	0xf2e	; 0xf2e <__mulsf3>
    1292:	4b 01       	movw	r8, r22
    1294:	5c 01       	movw	r10, r24
    1296:	ce 19       	sub	r28, r14
    1298:	df 09       	sbc	r29, r15
    129a:	ef cf       	rjmp	.-34     	; 0x127a <strtod+0x220>
    129c:	04 50       	subi	r16, 0x04	; 4
    129e:	11 09       	sbc	r17, r1
    12a0:	f5 94       	asr	r15
    12a2:	e7 94       	ror	r14
    12a4:	0c 15       	cp	r16, r12
    12a6:	1d 05       	cpc	r17, r13
    12a8:	41 f7       	brne	.-48     	; 0x127a <strtod+0x220>
    12aa:	8a 2d       	mov	r24, r10
    12ac:	88 0f       	add	r24, r24
    12ae:	8b 2d       	mov	r24, r11
    12b0:	88 1f       	adc	r24, r24
    12b2:	8f 3f       	cpi	r24, 0xFF	; 255
    12b4:	49 f0       	breq	.+18     	; 0x12c8 <strtod+0x26e>
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	a9 01       	movw	r20, r18
    12bc:	c5 01       	movw	r24, r10
    12be:	b4 01       	movw	r22, r8
    12c0:	0e 94 33 06 	call	0xc66	; 0xc66 <__cmpsf2>
    12c4:	81 11       	cpse	r24, r1
    12c6:	06 c0       	rjmp	.+12     	; 0x12d4 <strtod+0x27a>
    12c8:	82 e2       	ldi	r24, 0x22	; 34
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <errno+0x1>
    12d0:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <errno>
    12d4:	c5 01       	movw	r24, r10
    12d6:	b4 01       	movw	r22, r8
    12d8:	09 c0       	rjmp	.+18     	; 0x12ec <strtod+0x292>
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	80 e8       	ldi	r24, 0x80	; 128
    12e0:	9f ef       	ldi	r25, 0xFF	; 255
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <strtod+0x292>
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	80 ec       	ldi	r24, 0xC0	; 192
    12ea:	9f e7       	ldi	r25, 0x7F	; 127
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	ec e0       	ldi	r30, 0x0C	; 12
    12f2:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__epilogue_restores__+0xc>

000012f6 <isspace>:
    12f6:	91 11       	cpse	r25, r1
    12f8:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__ctype_isfalse>
    12fc:	80 32       	cpi	r24, 0x20	; 32
    12fe:	19 f0       	breq	.+6      	; 0x1306 <isspace+0x10>
    1300:	89 50       	subi	r24, 0x09	; 9
    1302:	85 50       	subi	r24, 0x05	; 5
    1304:	c8 f7       	brcc	.-14     	; 0x12f8 <isspace+0x2>
    1306:	08 95       	ret

00001308 <strncasecmp_P>:
    1308:	fb 01       	movw	r30, r22
    130a:	dc 01       	movw	r26, r24
    130c:	41 50       	subi	r20, 0x01	; 1
    130e:	50 40       	sbci	r21, 0x00	; 0
    1310:	88 f0       	brcs	.+34     	; 0x1334 <strncasecmp_P+0x2c>
    1312:	8d 91       	ld	r24, X+
    1314:	81 34       	cpi	r24, 0x41	; 65
    1316:	1c f0       	brlt	.+6      	; 0x131e <strncasecmp_P+0x16>
    1318:	8b 35       	cpi	r24, 0x5B	; 91
    131a:	0c f4       	brge	.+2      	; 0x131e <strncasecmp_P+0x16>
    131c:	80 5e       	subi	r24, 0xE0	; 224
    131e:	65 91       	lpm	r22, Z+
    1320:	61 34       	cpi	r22, 0x41	; 65
    1322:	1c f0       	brlt	.+6      	; 0x132a <strncasecmp_P+0x22>
    1324:	6b 35       	cpi	r22, 0x5B	; 91
    1326:	0c f4       	brge	.+2      	; 0x132a <strncasecmp_P+0x22>
    1328:	60 5e       	subi	r22, 0xE0	; 224
    132a:	86 1b       	sub	r24, r22
    132c:	61 11       	cpse	r22, r1
    132e:	71 f3       	breq	.-36     	; 0x130c <strncasecmp_P+0x4>
    1330:	99 0b       	sbc	r25, r25
    1332:	08 95       	ret
    1334:	88 1b       	sub	r24, r24
    1336:	fc cf       	rjmp	.-8      	; 0x1330 <strncasecmp_P+0x28>

00001338 <strrev>:
    1338:	dc 01       	movw	r26, r24
    133a:	fc 01       	movw	r30, r24
    133c:	67 2f       	mov	r22, r23
    133e:	71 91       	ld	r23, Z+
    1340:	77 23       	and	r23, r23
    1342:	e1 f7       	brne	.-8      	; 0x133c <strrev+0x4>
    1344:	32 97       	sbiw	r30, 0x02	; 2
    1346:	04 c0       	rjmp	.+8      	; 0x1350 <strrev+0x18>
    1348:	7c 91       	ld	r23, X
    134a:	6d 93       	st	X+, r22
    134c:	70 83       	st	Z, r23
    134e:	62 91       	ld	r22, -Z
    1350:	ae 17       	cp	r26, r30
    1352:	bf 07       	cpc	r27, r31
    1354:	c8 f3       	brcs	.-14     	; 0x1348 <strrev+0x10>
    1356:	08 95       	ret

00001358 <__ctype_isfalse>:
    1358:	99 27       	eor	r25, r25
    135a:	88 27       	eor	r24, r24

0000135c <__ctype_istrue>:
    135c:	08 95       	ret

0000135e <__muluhisi3>:
    135e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__umulhisi3>
    1362:	a5 9f       	mul	r26, r21
    1364:	90 0d       	add	r25, r0
    1366:	b4 9f       	mul	r27, r20
    1368:	90 0d       	add	r25, r0
    136a:	a4 9f       	mul	r26, r20
    136c:	80 0d       	add	r24, r0
    136e:	91 1d       	adc	r25, r1
    1370:	11 24       	eor	r1, r1
    1372:	08 95       	ret

00001374 <__prologue_saves__>:
    1374:	2f 92       	push	r2
    1376:	3f 92       	push	r3
    1378:	4f 92       	push	r4
    137a:	5f 92       	push	r5
    137c:	6f 92       	push	r6
    137e:	7f 92       	push	r7
    1380:	8f 92       	push	r8
    1382:	9f 92       	push	r9
    1384:	af 92       	push	r10
    1386:	bf 92       	push	r11
    1388:	cf 92       	push	r12
    138a:	df 92       	push	r13
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	ca 1b       	sub	r28, r26
    139e:	db 0b       	sbc	r29, r27
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	09 94       	ijmp

000013ac <__epilogue_restores__>:
    13ac:	2a 88       	ldd	r2, Y+18	; 0x12
    13ae:	39 88       	ldd	r3, Y+17	; 0x11
    13b0:	48 88       	ldd	r4, Y+16	; 0x10
    13b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    13b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    13b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    13b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    13ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    13bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    13be:	b9 84       	ldd	r11, Y+9	; 0x09
    13c0:	c8 84       	ldd	r12, Y+8	; 0x08
    13c2:	df 80       	ldd	r13, Y+7	; 0x07
    13c4:	ee 80       	ldd	r14, Y+6	; 0x06
    13c6:	fd 80       	ldd	r15, Y+5	; 0x05
    13c8:	0c 81       	ldd	r16, Y+4	; 0x04
    13ca:	1b 81       	ldd	r17, Y+3	; 0x03
    13cc:	aa 81       	ldd	r26, Y+2	; 0x02
    13ce:	b9 81       	ldd	r27, Y+1	; 0x01
    13d0:	ce 0f       	add	r28, r30
    13d2:	d1 1d       	adc	r29, r1
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	ed 01       	movw	r28, r26
    13e0:	08 95       	ret

000013e2 <__umulhisi3>:
    13e2:	a2 9f       	mul	r26, r18
    13e4:	b0 01       	movw	r22, r0
    13e6:	b3 9f       	mul	r27, r19
    13e8:	c0 01       	movw	r24, r0
    13ea:	a3 9f       	mul	r26, r19
    13ec:	70 0d       	add	r23, r0
    13ee:	81 1d       	adc	r24, r1
    13f0:	11 24       	eor	r1, r1
    13f2:	91 1d       	adc	r25, r1
    13f4:	b2 9f       	mul	r27, r18
    13f6:	70 0d       	add	r23, r0
    13f8:	81 1d       	adc	r24, r1
    13fa:	11 24       	eor	r1, r1
    13fc:	91 1d       	adc	r25, r1
    13fe:	08 95       	ret

00001400 <_exit>:
    1400:	f8 94       	cli

00001402 <__stop_program>:
    1402:	ff cf       	rjmp	.-2      	; 0x1402 <__stop_program>
