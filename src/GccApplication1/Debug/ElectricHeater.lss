
ElectricHeater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000013b2  00001446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800068  00800068  0000144e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000144e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b2  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a61  00000000  00000000  00002e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f79  00000000  00000000  000038e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  0000485c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000815  00000000  00000000  00004d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a77  00000000  00000000  00005549  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00005fc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 23 04 	jmp	0x846	; 0x846 <__vector_1>
       8:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__vector_2>
       c:	0c 94 aa 04 	jmp	0x954	; 0x954 <__vector_3>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 76 05 	jmp	0xaec	; 0xaec <__vector_10>
      2c:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_11>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	e2 eb       	ldi	r30, 0xB2	; 178
      a4:	f3 e1       	ldi	r31, 0x13	; 19
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 36       	cpi	r26, 0x68	; 104
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	a8 e6       	ldi	r26, 0x68	; 104
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 38       	cpi	r26, 0x83	; 131
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 87 02 	call	0x50e	; 0x50e <main>
      c6:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <EXTI0_ISR>:
unsigned short int ADC_val,i=0,j=0,K=0,l=0;
float currenttemperature=0.0,desiredtemperature=60.0;
char desiredtemperature_AsChar[1];
//temperature setting mode in case of increasing temperature
void EXTI0_ISR (void)
{
      ce:	cf 92       	push	r12
      d0:	df 92       	push	r13
      d2:	ef 92       	push	r14
      d4:	ff 92       	push	r15
      d6:	cf 93       	push	r28
	 desiredtemperature by 5 in the first time and display the desiredtemperature on 7_segment using switching technique 
	 and blinking every 500ms for 5 seconds if the user press the up temperature button again within the 5 seconds the
	 EXTI01_flag will became '1' and flag1 will became '1' and desiredtemperature will be increased by 5 and be displayed
	 on the 7 segments for another 5 second
	*/ 
	if(desiredtemperature<75.0 && EXTI01_flag == '1')
      d8:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      dc:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
      e0:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
      e4:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
      e8:	20 e0       	ldi	r18, 0x00	; 0
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	46 e9       	ldi	r20, 0x96	; 150
      ee:	52 e4       	ldi	r21, 0x42	; 66
      f0:	c7 01       	movw	r24, r14
      f2:	b6 01       	movw	r22, r12
      f4:	0e 94 0a 06 	call	0xc14	; 0xc14 <__cmpsf2>
      f8:	88 23       	and	r24, r24
      fa:	a4 f4       	brge	.+40     	; 0x124 <EXTI0_ISR+0x56>
      fc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <EXTI01_flag>
     100:	81 33       	cpi	r24, 0x31	; 49
     102:	81 f4       	brne	.+32     	; 0x124 <EXTI0_ISR+0x56>
	{
		desiredtemperature += 5.0;
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	40 ea       	ldi	r20, 0xA0	; 160
     10a:	50 e4       	ldi	r21, 0x40	; 64
     10c:	c7 01       	movw	r24, r14
     10e:	b6 01       	movw	r22, r12
     110:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__addsf3>
     114:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
     118:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     11c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     120:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	}
	//every change in desiredtemperature update it in EEPROM
	itoa((int)desiredtemperature,desiredtemperature_AsChar,10); 
     124:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     128:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     12c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     130:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     134:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixsfsi>
     138:	dc 01       	movw	r26, r24
     13a:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     13c:	4a e0       	ldi	r20, 0x0A	; 10
     13e:	64 e7       	ldi	r22, 0x74	; 116
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	0e 94 df 07 	call	0xfbe	; 0xfbe <__itoa_ncheck>
	EEPROM_write(0,desiredtemperature_AsChar[0]);
     146:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <desiredtemperature_AsChar>
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <EEPROM_write>
	EEPROM_write(1,desiredtemperature_AsChar[1]);
     152:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <ADC_val>
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <EEPROM_write>
	flag1='1';
     15e:	c1 e3       	ldi	r28, 0x31	; 49
     160:	c0 93 67 00 	sts	0x0067, r28	; 0x800067 <flag1>
	EEPROM_write(2,flag1);
     164:	61 e3       	ldi	r22, 0x31	; 49
     166:	82 e0       	ldi	r24, 0x02	; 2
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <EEPROM_write>
	flag1 = EEPROM_read(2);
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <EEPROM_read>
     176:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flag1>
	flag2 = EEPROM_read(3);
     17a:	83 e0       	ldi	r24, 0x03	; 3
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <EEPROM_read>
     182:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <flag2>
	EXTI01_flag = '1';//change EXTI01_flag to '1' to increase the desiredtemperature if the up button pressed again within 5 seconds
     186:	c0 93 65 00 	sts	0x0065, r28	; 0x800065 <EXTI01_flag>
	while(PIND & (1<<2));//stop when the button is still pressed 
     18a:	82 99       	sbic	0x10, 2	; 16
     18c:	fe cf       	rjmp	.-4      	; 0x18a <EXTI0_ISR+0xbc>
	//display the desiredtemperature on 7_segment for 5 seconds and blinking every 500ms using switching technique 
	for(j=0;j<=4;j++)
     18e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <j+0x1>
     192:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <j>
     196:	6a c0       	rjmp	.+212    	; 0x26c <EXTI0_ISR+0x19e>
	{
			for(K=0;K<=24;K++)
     198:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <K+0x1>
     19c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <K>
     1a0:	26 c0       	rjmp	.+76     	; 0x1ee <EXTI0_ISR+0x120>
			{
				//if the up temp button pressed again during displaying the desiredtemperature go to Lable0 and increase the desiredtemperature
				if(PIND & (1<<2))
     1a2:	82 99       	sbic	0x10, 2	; 16
     1a4:	99 cf       	rjmp	.-206    	; 0xd8 <EXTI0_ISR+0xa>
				{
					goto Lable0;
				}
				PORTD &=~ (1<<0);
     1a6:	82 b3       	in	r24, 0x12	; 18
     1a8:	8e 7f       	andi	r24, 0xFE	; 254
				PORTD |= (1<<1);
     1aa:	82 60       	ori	r24, 0x02	; 2
     1ac:	82 bb       	out	0x12, r24	; 18
				PORTC = desiredtemperature_AsChar[0]-'0';
     1ae:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <desiredtemperature_AsChar>
     1b2:	80 53       	subi	r24, 0x30	; 48
     1b4:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b6:	83 ec       	ldi	r24, 0xC3	; 195
     1b8:	99 e0       	ldi	r25, 0x09	; 9
     1ba:	01 97       	sbiw	r24, 0x01	; 1
     1bc:	f1 f7       	brne	.-4      	; 0x1ba <EXTI0_ISR+0xec>
     1be:	00 c0       	rjmp	.+0      	; 0x1c0 <EXTI0_ISR+0xf2>
     1c0:	00 00       	nop
				_delay_ms(10);
				PORTC = desiredtemperature_AsChar[1]-'0';
     1c2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <ADC_val>
     1c6:	80 53       	subi	r24, 0x30	; 48
     1c8:	85 bb       	out	0x15, r24	; 21
				PORTD &=~ (1<<1);
     1ca:	82 b3       	in	r24, 0x12	; 18
				PORTD &=~ (1<<0);
     1cc:	8c 7f       	andi	r24, 0xFC	; 252
     1ce:	82 bb       	out	0x12, r24	; 18
     1d0:	83 ec       	ldi	r24, 0xC3	; 195
     1d2:	99 e0       	ldi	r25, 0x09	; 9
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <EXTI0_ISR+0x106>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <EXTI0_ISR+0x10c>
     1da:	00 00       	nop
	EXTI01_flag = '1';//change EXTI01_flag to '1' to increase the desiredtemperature if the up button pressed again within 5 seconds
	while(PIND & (1<<2));//stop when the button is still pressed 
	//display the desiredtemperature on 7_segment for 5 seconds and blinking every 500ms using switching technique 
	for(j=0;j<=4;j++)
	{
			for(K=0;K<=24;K++)
     1dc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <K>
     1e0:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <K+0x1>
     1e4:	01 96       	adiw	r24, 0x01	; 1
     1e6:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <K+0x1>
     1ea:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <K>
     1ee:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <K>
     1f2:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <K+0x1>
     1f6:	49 97       	sbiw	r24, 0x19	; 25
     1f8:	a0 f2       	brcs	.-88     	; 0x1a2 <EXTI0_ISR+0xd4>
				PORTC = desiredtemperature_AsChar[1]-'0';
				PORTD &=~ (1<<1);
				PORTD &=~ (1<<0);
				_delay_ms(10);
			}
			for(K=0;K<=24;K++)
     1fa:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <K+0x1>
     1fe:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <K>
     202:	25 c0       	rjmp	.+74     	; 0x24e <EXTI0_ISR+0x180>
			{	
				//if the up temp button pressed again during displaying the desiredtemperature go to Lable0 and increase the desiredtemperature
				if(PIND & (1<<2))
     204:	82 99       	sbic	0x10, 2	; 16
     206:	68 cf       	rjmp	.-304    	; 0xd8 <EXTI0_ISR+0xa>
				{
				 goto Lable0;
				}
				PORTD |= (1<<0);
     208:	82 b3       	in	r24, 0x12	; 18
				PORTD |= (1<<1);
     20a:	83 60       	ori	r24, 0x03	; 3
     20c:	82 bb       	out	0x12, r24	; 18
				PORTC = desiredtemperature_AsChar[0]-'0';
     20e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <desiredtemperature_AsChar>
     212:	80 53       	subi	r24, 0x30	; 48
     214:	85 bb       	out	0x15, r24	; 21
     216:	83 ec       	ldi	r24, 0xC3	; 195
     218:	99 e0       	ldi	r25, 0x09	; 9
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	f1 f7       	brne	.-4      	; 0x21a <EXTI0_ISR+0x14c>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <EXTI0_ISR+0x152>
     220:	00 00       	nop
				_delay_ms(10);
				PORTC = desiredtemperature_AsChar[1]-'0';
     222:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <ADC_val>
     226:	80 53       	subi	r24, 0x30	; 48
     228:	85 bb       	out	0x15, r24	; 21
				PORTD |= (1<<1);
     22a:	82 b3       	in	r24, 0x12	; 18
				PORTD |= (1<<0);
     22c:	83 60       	ori	r24, 0x03	; 3
     22e:	82 bb       	out	0x12, r24	; 18
     230:	83 ec       	ldi	r24, 0xC3	; 195
     232:	99 e0       	ldi	r25, 0x09	; 9
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <EXTI0_ISR+0x166>
     238:	00 c0       	rjmp	.+0      	; 0x23a <EXTI0_ISR+0x16c>
     23a:	00 00       	nop
				PORTC = desiredtemperature_AsChar[1]-'0';
				PORTD &=~ (1<<1);
				PORTD &=~ (1<<0);
				_delay_ms(10);
			}
			for(K=0;K<=24;K++)
     23c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <K>
     240:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <K+0x1>
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <K+0x1>
     24a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <K>
     24e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <K>
     252:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <K+0x1>
     256:	49 97       	sbiw	r24, 0x19	; 25
     258:	a8 f2       	brcs	.-86     	; 0x204 <EXTI0_ISR+0x136>
	flag1 = EEPROM_read(2);
	flag2 = EEPROM_read(3);
	EXTI01_flag = '1';//change EXTI01_flag to '1' to increase the desiredtemperature if the up button pressed again within 5 seconds
	while(PIND & (1<<2));//stop when the button is still pressed 
	//display the desiredtemperature on 7_segment for 5 seconds and blinking every 500ms using switching technique 
	for(j=0;j<=4;j++)
     25a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <j>
     25e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <j+0x1>
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <j+0x1>
     268:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <j>
     26c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <j>
     270:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <j+0x1>
     274:	05 97       	sbiw	r24, 0x05	; 5
     276:	08 f4       	brcc	.+2      	; 0x27a <EXTI0_ISR+0x1ac>
     278:	8f cf       	rjmp	.-226    	; 0x198 <EXTI0_ISR+0xca>
				PORTD |= (1<<1);
				PORTD |= (1<<0);
				_delay_ms(10);
			}
	}
	EXTI01_flag = '0';
     27a:	80 e3       	ldi	r24, 0x30	; 48
     27c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <EXTI01_flag>
}
     280:	cf 91       	pop	r28
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	df 90       	pop	r13
     288:	cf 90       	pop	r12
     28a:	08 95       	ret

0000028c <EXTI1_ISR>:

//temperature setting mode in case of decreasing temperature
void EXTI1_ISR (void)
{
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	cf 93       	push	r28
	desiredtemperature by 5 in the first time and display the desiredtemperature on 7_segment using switching technique 
	and blinking every 500ms for 5 seconds if the user press the down temperature button again within the 5 seconds the
    EXTI01_flag will became '1' and flag1 will became '1' and desiredtemperature will be decreased by 5 and be displayed
	on the 7 segments for another 5 seconds
	*/ 
	if(desiredtemperature>35.0 && EXTI01_flag == '1')
     296:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     29a:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     29e:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     2a2:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	4c e0       	ldi	r20, 0x0C	; 12
     2ac:	52 e4       	ldi	r21, 0x42	; 66
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	0e 94 69 07 	call	0xed2	; 0xed2 <__gesf2>
     2b6:	18 16       	cp	r1, r24
     2b8:	a4 f4       	brge	.+40     	; 0x2e2 <EXTI1_ISR+0x56>
     2ba:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <EXTI01_flag>
     2be:	81 33       	cpi	r24, 0x31	; 49
     2c0:	81 f4       	brne	.+32     	; 0x2e2 <EXTI1_ISR+0x56>
	{
		desiredtemperature -= 5.0;
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 ea       	ldi	r20, 0xA0	; 160
     2c8:	50 e4       	ldi	r21, 0x40	; 64
     2ca:	c7 01       	movw	r24, r14
     2cc:	b6 01       	movw	r22, r12
     2ce:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__subsf3>
     2d2:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
     2d6:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     2da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     2de:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	}
	//every change in desiredtemperature update it in EEPROM
	itoa((int)desiredtemperature,desiredtemperature_AsChar,10); //function used to convert int data type to array of characters
     2e2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2e6:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     2ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     2ee:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     2f2:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixsfsi>
     2f6:	dc 01       	movw	r26, r24
     2f8:	cb 01       	movw	r24, r22
     2fa:	4a e0       	ldi	r20, 0x0A	; 10
     2fc:	64 e7       	ldi	r22, 0x74	; 116
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	0e 94 df 07 	call	0xfbe	; 0xfbe <__itoa_ncheck>
	EEPROM_write(0,desiredtemperature_AsChar[0]);
     304:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <desiredtemperature_AsChar>
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <EEPROM_write>
	EEPROM_write(1,desiredtemperature_AsChar[1]);
     310:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <ADC_val>
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <EEPROM_write>
	flag1='1';
     31c:	c1 e3       	ldi	r28, 0x31	; 49
     31e:	c0 93 67 00 	sts	0x0067, r28	; 0x800067 <flag1>
	EEPROM_write(20,flag1);
     322:	61 e3       	ldi	r22, 0x31	; 49
     324:	84 e1       	ldi	r24, 0x14	; 20
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <EEPROM_write>
	flag1 = EEPROM_read(2);
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <EEPROM_read>
     334:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flag1>
	flag2 = EEPROM_read(3);
     338:	83 e0       	ldi	r24, 0x03	; 3
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <EEPROM_read>
     340:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <flag2>
	EXTI01_flag = '1';//change EXTI01_flag to '1' to increase the desiredtemperature if the up button pressed again within 5 seconds
     344:	c0 93 65 00 	sts	0x0065, r28	; 0x800065 <EXTI01_flag>
	while(PIND & (1<<3));//stop when the button is still pressed
     348:	83 99       	sbic	0x10, 3	; 16
     34a:	fe cf       	rjmp	.-4      	; 0x348 <EXTI1_ISR+0xbc>
	//display the desiredtemperature on 7_segment for 5 seconds and blinking every 500ms using switching technique
	for(j=0;j<=4;j++)
     34c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <j+0x1>
     350:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <j>
     354:	6a c0       	rjmp	.+212    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
	{
		for(K=0;K<=24;K++)
     356:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <K+0x1>
     35a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <K>
     35e:	26 c0       	rjmp	.+76     	; 0x3ac <EXTI1_ISR+0x120>
		{
			//if the down temp button pressed again during displaying the desiredtemperature go to Lable1 and decrease the desiredtemperature
			if(PIND & (1<<3))
     360:	83 99       	sbic	0x10, 3	; 16
     362:	99 cf       	rjmp	.-206    	; 0x296 <EXTI1_ISR+0xa>
			{
				goto Lable1;
			}
			PORTD &=~ (1<<0);
     364:	82 b3       	in	r24, 0x12	; 18
     366:	8e 7f       	andi	r24, 0xFE	; 254
			PORTD |= (1<<1);
     368:	82 60       	ori	r24, 0x02	; 2
     36a:	82 bb       	out	0x12, r24	; 18
			PORTC = desiredtemperature_AsChar[0]-'0';
     36c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <desiredtemperature_AsChar>
     370:	80 53       	subi	r24, 0x30	; 48
     372:	85 bb       	out	0x15, r24	; 21
     374:	83 ec       	ldi	r24, 0xC3	; 195
     376:	99 e0       	ldi	r25, 0x09	; 9
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <EXTI1_ISR+0xec>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <EXTI1_ISR+0xf2>
     37e:	00 00       	nop
			_delay_ms(10);
			PORTC = desiredtemperature_AsChar[1]-'0';
     380:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <ADC_val>
     384:	80 53       	subi	r24, 0x30	; 48
     386:	85 bb       	out	0x15, r24	; 21
			PORTD &=~ (1<<1);
     388:	82 b3       	in	r24, 0x12	; 18
			PORTD &=~ (1<<0);
     38a:	8c 7f       	andi	r24, 0xFC	; 252
     38c:	82 bb       	out	0x12, r24	; 18
     38e:	83 ec       	ldi	r24, 0xC3	; 195
     390:	99 e0       	ldi	r25, 0x09	; 9
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <EXTI1_ISR+0x106>
     396:	00 c0       	rjmp	.+0      	; 0x398 <EXTI1_ISR+0x10c>
     398:	00 00       	nop
	EXTI01_flag = '1';//change EXTI01_flag to '1' to increase the desiredtemperature if the up button pressed again within 5 seconds
	while(PIND & (1<<3));//stop when the button is still pressed
	//display the desiredtemperature on 7_segment for 5 seconds and blinking every 500ms using switching technique
	for(j=0;j<=4;j++)
	{
		for(K=0;K<=24;K++)
     39a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <K>
     39e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <K+0x1>
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <K+0x1>
     3a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <K>
     3ac:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <K>
     3b0:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <K+0x1>
     3b4:	49 97       	sbiw	r24, 0x19	; 25
     3b6:	a0 f2       	brcs	.-88     	; 0x360 <EXTI1_ISR+0xd4>
			PORTC = desiredtemperature_AsChar[1]-'0';
			PORTD &=~ (1<<1);
			PORTD &=~ (1<<0);
			_delay_ms(10);
		}
		for(K=0;K<=24;K++)
     3b8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <K+0x1>
     3bc:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <K>
     3c0:	25 c0       	rjmp	.+74     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		{
			//if the down temp button pressed again during displaying the desiredtemperature go to Lable1 and decrease the desiredtemperature
			if(PIND & (1<<3))
     3c2:	83 99       	sbic	0x10, 3	; 16
     3c4:	68 cf       	rjmp	.-304    	; 0x296 <EXTI1_ISR+0xa>
			{
				goto Lable1;
			}
			PORTD |= (1<<0);
     3c6:	82 b3       	in	r24, 0x12	; 18
			PORTD |= (1<<1);
     3c8:	83 60       	ori	r24, 0x03	; 3
     3ca:	82 bb       	out	0x12, r24	; 18
			PORTC = desiredtemperature_AsChar[0]-'0';
     3cc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <desiredtemperature_AsChar>
     3d0:	80 53       	subi	r24, 0x30	; 48
     3d2:	85 bb       	out	0x15, r24	; 21
     3d4:	83 ec       	ldi	r24, 0xC3	; 195
     3d6:	99 e0       	ldi	r25, 0x09	; 9
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <EXTI1_ISR+0x14c>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <EXTI1_ISR+0x152>
     3de:	00 00       	nop
			_delay_ms(10);
			PORTC = desiredtemperature_AsChar[1]-'0';
     3e0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <ADC_val>
     3e4:	80 53       	subi	r24, 0x30	; 48
     3e6:	85 bb       	out	0x15, r24	; 21
			PORTD |= (1<<1);
     3e8:	82 b3       	in	r24, 0x12	; 18
			PORTD |= (1<<0);
     3ea:	83 60       	ori	r24, 0x03	; 3
     3ec:	82 bb       	out	0x12, r24	; 18
     3ee:	83 ec       	ldi	r24, 0xC3	; 195
     3f0:	99 e0       	ldi	r25, 0x09	; 9
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <EXTI1_ISR+0x166>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <EXTI1_ISR+0x16c>
     3f8:	00 00       	nop
			PORTC = desiredtemperature_AsChar[1]-'0';
			PORTD &=~ (1<<1);
			PORTD &=~ (1<<0);
			_delay_ms(10);
		}
		for(K=0;K<=24;K++)
     3fa:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <K>
     3fe:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <K+0x1>
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <K+0x1>
     408:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <K>
     40c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <K>
     410:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <K+0x1>
     414:	49 97       	sbiw	r24, 0x19	; 25
     416:	a8 f2       	brcs	.-86     	; 0x3c2 <EXTI1_ISR+0x136>
	flag1 = EEPROM_read(2);
	flag2 = EEPROM_read(3);
	EXTI01_flag = '1';//change EXTI01_flag to '1' to increase the desiredtemperature if the up button pressed again within 5 seconds
	while(PIND & (1<<3));//stop when the button is still pressed
	//display the desiredtemperature on 7_segment for 5 seconds and blinking every 500ms using switching technique
	for(j=0;j<=4;j++)
     418:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <j>
     41c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <j+0x1>
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <j+0x1>
     426:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <j>
     42a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <j>
     42e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <j+0x1>
     432:	05 97       	sbiw	r24, 0x05	; 5
     434:	08 f4       	brcc	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     436:	8f cf       	rjmp	.-226    	; 0x356 <EXTI1_ISR+0xca>
			PORTD |= (1<<1);
			PORTD |= (1<<0);
			_delay_ms(10);
		}
	}
	EXTI01_flag = '0';
     438:	80 e3       	ldi	r24, 0x30	; 48
     43a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <EXTI01_flag>
}
     43e:	cf 91       	pop	r28
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	08 95       	ret

0000044a <EXTI2_ISR>:


void EXTI2_ISR (void)
{
	//case circuit is on and i want to make it off
	if(EXTI2_flag == '1')
     44a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <EXTI2_flag>
     44e:	81 33       	cpi	r24, 0x31	; 49
     450:	61 f4       	brne	.+24     	; 0x46a <EXTI2_ISR+0x20>
	{
		while(PINB & (1<<2));
     452:	b2 99       	sbic	0x16, 2	; 22
     454:	fe cf       	rjmp	.-4      	; 0x452 <EXTI2_ISR+0x8>
		EXTI0_voidDisable();
     456:	0e 94 09 04 	call	0x812	; 0x812 <EXTI0_voidDisable>
		EXTI1_voidDisable();
     45a:	0e 94 4e 04 	call	0x89c	; 0x89c <EXTI1_voidDisable>
		TIMER0_OV_disable();
     45e:	0e 94 44 05 	call	0xa88	; 0xa88 <TIMER0_OV_disable>
		//this flag be using inside the super loop to determine the status of the system on(1) or off(0)
		EXTI2_flag = '0';
     462:	80 e3       	ldi	r24, 0x30	; 48
     464:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <EXTI2_flag>
     468:	08 95       	ret
	}
	//case circuit is off and i want to make it on
	else
	{
		while(PINB & (1<<2));
     46a:	b2 99       	sbic	0x16, 2	; 22
     46c:	fe cf       	rjmp	.-4      	; 0x46a <EXTI2_ISR+0x20>
		EXTI0_voidEnable();
     46e:	0e 94 05 04 	call	0x80a	; 0x80a <EXTI0_voidEnable>
		EXTI1_voidEnable();
     472:	0e 94 4a 04 	call	0x894	; 0x894 <EXTI1_voidEnable>
		TIMER0_OV_enable();
     476:	0e 94 40 05 	call	0xa80	; 0xa80 <TIMER0_OV_enable>
		////this flag be using inside the super loop to determine the status of the system on(1) or off(0)
		EXTI2_flag = '1';
     47a:	81 e3       	ldi	r24, 0x31	; 49
     47c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <EXTI2_flag>
     480:	08 95       	ret

00000482 <T0_ISR>:
/*timer0 0v ISR happen every 10ms and read temperature sensor value every 100ms by ADC
and increasing a global variable l by 1 every 10ms this variable is used 
to blink 7_segments in temperature setting mode up or down*/
void T0_ISR (void)
{
	i++;
     482:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <i>
     486:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <i+0x1>
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <i+0x1>
     490:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <i>
	l++;
     494:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <l>
     498:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <l+0x1>
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <l+0x1>
     4a2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <l>
	TIMER0_SetTimerCounter(246);
     4a6:	86 ef       	ldi	r24, 0xF6	; 246
     4a8:	0e 94 48 05 	call	0xa90	; 0xa90 <TIMER0_SetTimerCounter>
	if(i==10)
     4ac:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <i>
     4b0:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <i+0x1>
     4b4:	0a 97       	sbiw	r24, 0x0a	; 10
     4b6:	51 f5       	brne	.+84     	; 0x50c <T0_ISR+0x8a>
	{
		ADC_val = ADC_read('0');
     4b8:	80 e3       	ldi	r24, 0x30	; 48
     4ba:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <ADC_read>
     4be:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <ADC_val+0x1>
     4c2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <ADC_val>
		currenttemperature = (((float)ADC_val * 5.0)/1023.0)/0.01;
     4c6:	bc 01       	movw	r22, r24
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__floatunsisf>
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 ea       	ldi	r20, 0xA0	; 160
     4d6:	50 e4       	ldi	r21, 0x40	; 64
     4d8:	0e 94 6e 07 	call	0xedc	; 0xedc <__mulsf3>
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 ec       	ldi	r19, 0xC0	; 192
     4e0:	4f e7       	ldi	r20, 0x7F	; 127
     4e2:	54 e4       	ldi	r21, 0x44	; 68
     4e4:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__divsf3>
     4e8:	2a e0       	ldi	r18, 0x0A	; 10
     4ea:	37 ed       	ldi	r19, 0xD7	; 215
     4ec:	43 e2       	ldi	r20, 0x23	; 35
     4ee:	5c e3       	ldi	r21, 0x3C	; 60
     4f0:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__divsf3>
     4f4:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <__data_end>
     4f8:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <__data_end+0x1>
     4fc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end+0x2>
     500:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x3>
		i=0;
     504:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <i+0x1>
     508:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <i>
     50c:	08 95       	ret

0000050e <main>:
	}
}


int main(void)
{
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	1f 92       	push	r1
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
	DDRB &=~ (1<<2);
     518:	87 b3       	in	r24, 0x17	; 23
     51a:	8b 7f       	andi	r24, 0xFB	; 251
     51c:	87 bb       	out	0x17, r24	; 23
	DDRC=0b00001111;
     51e:	8f e0       	ldi	r24, 0x0F	; 15
     520:	84 bb       	out	0x14, r24	; 20
	DDRD=0b01110011;
     522:	83 e7       	ldi	r24, 0x73	; 115
     524:	81 bb       	out	0x11, r24	; 17
	char currenttemperature_ToChar[1];
	ADC_init();
     526:	0e 94 d5 03 	call	0x7aa	; 0x7aa <ADC_init>
	TIMER0_SetOV_CallBack(T0_ISR);
     52a:	81 e4       	ldi	r24, 0x41	; 65
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	0e 94 4a 05 	call	0xa94	; 0xa94 <TIMER0_SetOV_CallBack>
	TIMER0_init();
     532:	0e 94 28 05 	call	0xa50	; 0xa50 <TIMER0_init>
	TIMER0_SetTimerCounter(246);
     536:	86 ef       	ldi	r24, 0xF6	; 246
     538:	0e 94 48 05 	call	0xa90	; 0xa90 <TIMER0_SetTimerCounter>
	TIMER0_OV_enable();
     53c:	0e 94 40 05 	call	0xa80	; 0xa80 <TIMER0_OV_enable>
	EXTI0_Set_CallBack(EXTI0_ISR);
     540:	87 e6       	ldi	r24, 0x67	; 103
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 1e 04 	call	0x83c	; 0x83c <EXTI0_Set_CallBack>
	EXTI0_voidInit();
     548:	0e 94 11 04 	call	0x822	; 0x822 <EXTI0_voidInit>
	EXTI0_voidEnable();
     54c:	0e 94 05 04 	call	0x80a	; 0x80a <EXTI0_voidEnable>
	EXTI1_Set_CallBack(EXTI1_ISR);
     550:	86 e4       	ldi	r24, 0x46	; 70
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EXTI1_Set_CallBack>
	EXTI1_voidInit();
     558:	0e 94 56 04 	call	0x8ac	; 0x8ac <EXTI1_voidInit>
	EXTI1_voidEnable();
     55c:	0e 94 4a 04 	call	0x894	; 0x894 <EXTI1_voidEnable>
	EXTI2_Set_CallBack(EXTI2_ISR);
     560:	85 e2       	ldi	r24, 0x25	; 37
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	0e 94 a5 04 	call	0x94a	; 0x94a <EXTI2_Set_CallBack>
	EXTI2_voidInit();
     568:	0e 94 9b 04 	call	0x936	; 0x936 <EXTI2_voidInit>
	EXTI2_voidEnable();
     56c:	0e 94 8f 04 	call	0x91e	; 0x91e <EXTI2_voidEnable>
	GIE_voidEnable();
     570:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <GIE_voidEnable>
     574:	8b e7       	ldi	r24, 0x7B	; 123
     576:	92 e9       	ldi	r25, 0x92	; 146
     578:	01 97       	sbiw	r24, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <main+0x6a>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <main+0x70>
     57e:	00 00       	nop
	_delay_ms(150);
	
	/*when the program run for the first time (currenttemperature<36) store the default desiredtemperature (60) in EEPROM*/
	if((int)currenttemperature<36)
     580:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <__data_end>
     584:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <__data_end+0x1>
     588:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end+0x2>
     58c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x3>
     590:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixsfsi>
     594:	64 32       	cpi	r22, 0x24	; 36
     596:	71 05       	cpc	r23, r1
     598:	ec f4       	brge	.+58     	; 0x5d4 <main+0xc6>
	{
		itoa((int)desiredtemperature,desiredtemperature_AsChar,10); //function used to convert int data type to array of characters
     59a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     59e:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     5a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     5a6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     5aa:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixsfsi>
     5ae:	dc 01       	movw	r26, r24
     5b0:	cb 01       	movw	r24, r22
     5b2:	4a e0       	ldi	r20, 0x0A	; 10
     5b4:	64 e7       	ldi	r22, 0x74	; 116
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	0e 94 df 07 	call	0xfbe	; 0xfbe <__itoa_ncheck>
		EEPROM_write(0,desiredtemperature_AsChar[0]);
     5bc:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <desiredtemperature_AsChar>
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <EEPROM_write>
		EEPROM_write(1,desiredtemperature_AsChar[1]);
     5c8:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <ADC_val>
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <EEPROM_write>
	}
	
	/*the next 3 lines to restore the last desiredtemperature from EEPROM in case of microcontroller lost power for any reason*/
	desiredtemperature_AsChar[0] = EEPROM_read(0);
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <EEPROM_read>
     5dc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <desiredtemperature_AsChar>
	desiredtemperature_AsChar[1] = EEPROM_read(1);
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <EEPROM_read>
     5e8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <ADC_val>
	desiredtemperature=atof(desiredtemperature_AsChar);
     5ec:	84 e7       	ldi	r24, 0x74	; 116
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <atof>
     5f4:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
     5f8:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     5fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     600:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
	while (1)
	{	
		/*when pressing system on/off button which connected on EXTI2 it toggle a flag called EXTI2_flag which it's initial 
		value is 1 that flag determine if the system is on (EXTI2_flag = 1) or system is off (EXTI2_flag = 0)*/	
		if(EXTI2_flag == '0')
     604:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <EXTI2_flag>
     608:	80 33       	cpi	r24, 0x30	; 48
     60a:	29 f4       	brne	.+10     	; 0x616 <main+0x108>
		{
			PORTD |=  (1<<0); //turn off first 7_segments
     60c:	82 b3       	in	r24, 0x12	; 18
			PORTD |=  (1<<1); //turn off second 7_segments
     60e:	83 60       	ori	r24, 0x03	; 3
			PORTD &=~ (1<<4); //turn off led
			PORTD &=~ (1<<5); //turn off heater
			PORTD &=~ (1<<6); //turn off cooler
     610:	8f 78       	andi	r24, 0x8F	; 143
     612:	82 bb       	out	0x12, r24	; 18
     614:	f7 cf       	rjmp	.-18     	; 0x604 <main+0xf6>
		}
		//do else when (EXTI2_flag = 1)
		else
		{
			if((int)currenttemperature>35)
     616:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <__data_end>
     61a:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <__data_end+0x1>
     61e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end+0x2>
     622:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x3>
     626:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixsfsi>
     62a:	64 32       	cpi	r22, 0x24	; 36
     62c:	71 05       	cpc	r23, r1
     62e:	64 f0       	brlt	.+24     	; 0x648 <main+0x13a>
			{
				flag1 = EEPROM_read(2);
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <EEPROM_read>
     638:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flag1>
				flag2 = EEPROM_read(3);
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <EEPROM_read>
     644:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <flag2>
			}
			if(flag1=='1')
     648:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flag1>
     64c:	81 33       	cpi	r24, 0x31	; 49
     64e:	09 f0       	breq	.+2      	; 0x652 <main+0x144>
     650:	80 c0       	rjmp	.+256    	; 0x752 <main+0x244>
			{
				//case if current < desired
				if(((int)currenttemperature<(int)desiredtemperature)&&flag2=='0')
     652:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <__data_end>
     656:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <__data_end+0x1>
     65a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end+0x2>
     65e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x3>
     662:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixsfsi>
     666:	8b 01       	movw	r16, r22
     668:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     66c:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     670:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     674:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     678:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixsfsi>
     67c:	06 17       	cp	r16, r22
     67e:	17 07       	cpc	r17, r23
     680:	c4 f4       	brge	.+48     	; 0x6b2 <main+0x1a4>
     682:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <flag2>
     686:	80 33       	cpi	r24, 0x30	; 48
     688:	a1 f4       	brne	.+40     	; 0x6b2 <main+0x1a4>
				{
					if(l>=99)
     68a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <l>
     68e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <l+0x1>
     692:	83 36       	cpi	r24, 0x63	; 99
     694:	91 05       	cpc	r25, r1
     696:	40 f0       	brcs	.+16     	; 0x6a8 <main+0x19a>
					{
						PORTD ^=  (1<<4);
     698:	92 b3       	in	r25, 0x12	; 18
     69a:	80 e1       	ldi	r24, 0x10	; 16
     69c:	89 27       	eor	r24, r25
     69e:	82 bb       	out	0x12, r24	; 18
						l=0;
     6a0:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <l+0x1>
     6a4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <l>
					}
					PORTD |=  (1<<5);
     6a8:	82 b3       	in	r24, 0x12	; 18
     6aa:	80 62       	ori	r24, 0x20	; 32
					PORTD &=~ (1<<6);
     6ac:	8f 7b       	andi	r24, 0xBF	; 191
     6ae:	82 bb       	out	0x12, r24	; 18
     6b0:	50 c0       	rjmp	.+160    	; 0x752 <main+0x244>
				}
				else if(((int)currenttemperature>(int)desiredtemperature)&&flag2=='0')
     6b2:	60 17       	cp	r22, r16
     6b4:	71 07       	cpc	r23, r17
     6b6:	54 f4       	brge	.+20     	; 0x6cc <main+0x1be>
     6b8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <flag2>
     6bc:	80 33       	cpi	r24, 0x30	; 48
     6be:	31 f4       	brne	.+12     	; 0x6cc <main+0x1be>
				{
					PORTD |=  (1<<4);
     6c0:	82 b3       	in	r24, 0x12	; 18
     6c2:	80 61       	ori	r24, 0x10	; 16
					PORTD &=~ (1<<5);
     6c4:	8f 7d       	andi	r24, 0xDF	; 223
					PORTD |=  (1<<6);
     6c6:	80 64       	ori	r24, 0x40	; 64
     6c8:	82 bb       	out	0x12, r24	; 18
     6ca:	43 c0       	rjmp	.+134    	; 0x752 <main+0x244>
				}
				else
				{
					flag2='1';
     6cc:	81 e3       	ldi	r24, 0x31	; 49
     6ce:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <flag2>
					EEPROM_write(3,flag2);
     6d2:	61 e3       	ldi	r22, 0x31	; 49
     6d4:	83 e0       	ldi	r24, 0x03	; 3
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <EEPROM_write>
					PORTD &=~  (1<<4);
     6dc:	82 b3       	in	r24, 0x12	; 18
					PORTD &=~  (1<<5);
					PORTD &=~ (1<<6);
     6de:	8f 78       	andi	r24, 0x8F	; 143
     6e0:	82 bb       	out	0x12, r24	; 18
					if((int)currenttemperature <= (int)(desiredtemperature - 5.0))
     6e2:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <__data_end>
     6e6:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <__data_end+0x1>
     6ea:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end+0x2>
     6ee:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x3>
     6f2:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixsfsi>
     6f6:	8b 01       	movw	r16, r22
     6f8:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6fc:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     700:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     704:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 ea       	ldi	r20, 0xA0	; 160
     70e:	50 e4       	ldi	r21, 0x40	; 64
     710:	c7 01       	movw	r24, r14
     712:	b6 01       	movw	r22, r12
     714:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__subsf3>
     718:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixsfsi>
     71c:	60 17       	cp	r22, r16
     71e:	71 07       	cpc	r23, r17
     720:	4c f0       	brlt	.+18     	; 0x734 <main+0x226>
					{
						flag2='0';
     722:	80 e3       	ldi	r24, 0x30	; 48
     724:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <flag2>
						EEPROM_write(3,flag2);
     728:	60 e3       	ldi	r22, 0x30	; 48
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <EEPROM_write>
     732:	0f c0       	rjmp	.+30     	; 0x752 <main+0x244>
					}
					else if((int)currenttemperature > (int)desiredtemperature)
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixsfsi>
     73c:	60 17       	cp	r22, r16
     73e:	71 07       	cpc	r23, r17
     740:	44 f4       	brge	.+16     	; 0x752 <main+0x244>
					{
						flag2='0';
     742:	80 e3       	ldi	r24, 0x30	; 48
     744:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <flag2>
						EEPROM_write(3,flag2);
     748:	60 e3       	ldi	r22, 0x30	; 48
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <EEPROM_write>
					}
				}
			}
			/*function used to convert int data type to array of characters ex if the currenttemperature = 35 the function put
			 '3' in currenttemperature_ToChar[0] and '5' in currenttemperature_ToChar[1]*/
			itoa((int)currenttemperature,currenttemperature_ToChar,10); 
     752:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <__data_end>
     756:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <__data_end+0x1>
     75a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end+0x2>
     75e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x3>
     762:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixsfsi>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	4a e0       	ldi	r20, 0x0A	; 10
     76c:	be 01       	movw	r22, r28
     76e:	6f 5f       	subi	r22, 0xFF	; 255
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	0e 94 df 07 	call	0xfbe	; 0xfbe <__itoa_ncheck>
			/*display currenttemperatur on 7_segments using switching technique */
			PORTD &=~ (1<<0);
     776:	82 b3       	in	r24, 0x12	; 18
     778:	8e 7f       	andi	r24, 0xFE	; 254
			PORTD |= (1<<1);
     77a:	82 60       	ori	r24, 0x02	; 2
     77c:	82 bb       	out	0x12, r24	; 18
			PORTC = currenttemperature_ToChar[0]-'0';
     77e:	89 81       	ldd	r24, Y+1	; 0x01
     780:	80 53       	subi	r24, 0x30	; 48
     782:	85 bb       	out	0x15, r24	; 21
     784:	83 ec       	ldi	r24, 0xC3	; 195
     786:	99 e0       	ldi	r25, 0x09	; 9
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <main+0x27a>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <main+0x280>
     78e:	00 00       	nop
			_delay_ms(10);
			PORTC = currenttemperature_ToChar[1]-'0';
     790:	8a 81       	ldd	r24, Y+2	; 0x02
     792:	80 53       	subi	r24, 0x30	; 48
     794:	85 bb       	out	0x15, r24	; 21
			PORTD &=~ (1<<1);
     796:	82 b3       	in	r24, 0x12	; 18
			PORTD &=~ (1<<0);
     798:	8c 7f       	andi	r24, 0xFC	; 252
     79a:	82 bb       	out	0x12, r24	; 18
     79c:	83 ec       	ldi	r24, 0xC3	; 195
     79e:	99 e0       	ldi	r25, 0x09	; 9
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <main+0x292>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <main+0x298>
     7a6:	00 00       	nop
     7a8:	2d cf       	rjmp	.-422    	; 0x604 <main+0xf6>

000007aa <ADC_init>:
#include "ADC_private.h"


void ADC_init()
{
	DDRA   = 0b11111110;			/* Make ADC0  as input                                  */
     7aa:	8e ef       	ldi	r24, 0xFE	; 254
     7ac:	8a bb       	out	0x1a, r24	; 26
	ADMUX  = 0b01000000;	        /* Vref: Avcc,ADLR: right adjast result, ADC channel: 0 */
     7ae:	80 e4       	ldi	r24, 0x40	; 64
     7b0:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000111;			/* Enable ADC, fr/128                                   */
     7b2:	87 e8       	ldi	r24, 0x87	; 135
     7b4:	86 b9       	out	0x06, r24	; 6
     7b6:	08 95       	ret

000007b8 <ADC_read>:
}
unsigned short int ADC_read(unsigned char channel)
{
	unsigned short int ADC_value,ADC_Low;
	
	ADMUX     = ADMUX|(channel & 0b00001111);	/* Set input channel to read                   */
     7b8:	97 b1       	in	r25, 0x07	; 7
     7ba:	8f 70       	andi	r24, 0x0F	; 15
     7bc:	98 2b       	or	r25, r24
     7be:	97 b9       	out	0x07, r25	; 7
	ADCSRA   |= (1<<6);		                    /* Start conversion                            */
     7c0:	86 b1       	in	r24, 0x06	; 6
     7c2:	80 64       	ori	r24, 0x40	; 64
     7c4:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<4))==0);	                /* Monitor end of conversion interrupt         */
     7c6:	34 9b       	sbis	0x06, 4	; 6
     7c8:	fe cf       	rjmp	.-4      	; 0x7c6 <ADC_read+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	8a 95       	dec	r24
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <ADC_read+0x14>
     7d0:	00 00       	nop
	_delay_us(10);
	ADC_Low   = (int)ADCL;		                /* Read lower byte                             */
     7d2:	24 b1       	in	r18, 0x04	; 4
	ADC_value = (int)ADCH*256;		            /* Read higher 2 bits and Multiply with weight */
     7d4:	35 b1       	in	r19, 0x05	; 5
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	93 2f       	mov	r25, r19
	ADC_value = ADC_value + ADC_Low;				
	return(ADC_value);			                /* Return digital value                        */
     7da:	82 0f       	add	r24, r18
     7dc:	91 1d       	adc	r25, r1
     7de:	08 95       	ret

000007e0 <EEPROM_write>:
#include "EEPROM_private.h"

void EEPROM_write(unsigned short int Address,unsigned char Data)
{
	//wait for completion of previous write
	while(EECR & (1<<1));
     7e0:	e1 99       	sbic	0x1c, 1	; 28
     7e2:	fe cf       	rjmp	.-4      	; 0x7e0 <EEPROM_write>
	//write address to address register and write data to data register
	EEAR = Address;
     7e4:	9f bb       	out	0x1f, r25	; 31
     7e6:	8e bb       	out	0x1e, r24	; 30
	EEDR = Data;
     7e8:	6d bb       	out	0x1d, r22	; 29
	//write logic one to EEMWE(EEPROM master write enable)
	EECR |= (1<<2);
     7ea:	8c b3       	in	r24, 0x1c	; 28
     7ec:	84 60       	ori	r24, 0x04	; 4
     7ee:	8c bb       	out	0x1c, r24	; 28
	//start EEPROM write by setting EEWE(EEPROM write enable)
	EECR |= (1<<1);
     7f0:	8c b3       	in	r24, 0x1c	; 28
     7f2:	82 60       	ori	r24, 0x02	; 2
     7f4:	8c bb       	out	0x1c, r24	; 28
     7f6:	08 95       	ret

000007f8 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned short int Address)
{
	//wait for completion of previous write
	while(EECR & (1<<1));
     7f8:	e1 99       	sbic	0x1c, 1	; 28
     7fa:	fe cf       	rjmp	.-4      	; 0x7f8 <EEPROM_read>
	//put address EEPROM address register
	EEAR = Address;
     7fc:	9f bb       	out	0x1f, r25	; 31
     7fe:	8e bb       	out	0x1e, r24	; 30
	//start EEPROM read by setting EERE(EEPROM read enable)
	EECR |= (1<<0);
     800:	8c b3       	in	r24, 0x1c	; 28
     802:	81 60       	ori	r24, 0x01	; 1
     804:	8c bb       	out	0x1c, r24	; 28
	//return data from EEPROM data register
	return EEDR;
     806:	8d b3       	in	r24, 0x1d	; 29
     808:	08 95       	ret

0000080a <EXTI0_voidEnable>:
	GIE_voidDisable();
	EXTI0_voidClearFlag();
}
void EXTI0_voidEnable(void)
{
	SET_BIT(GICR , 6);
     80a:	8b b7       	in	r24, 0x3b	; 59
     80c:	80 64       	ori	r24, 0x40	; 64
     80e:	8b bf       	out	0x3b, r24	; 59
     810:	08 95       	ret

00000812 <EXTI0_voidDisable>:
}
void EXTI0_voidDisable(void)
{
	CLEAR_BIT(GICR , 6);
     812:	8b b7       	in	r24, 0x3b	; 59
     814:	8f 7b       	andi	r24, 0xBF	; 191
     816:	8b bf       	out	0x3b, r24	; 59
     818:	08 95       	ret

0000081a <EXTI0_voidClearFlag>:
}
void EXTI0_voidClearFlag(void)
{
	SET_BIT(GIFR , 6);
     81a:	8a b7       	in	r24, 0x3a	; 58
     81c:	80 64       	ori	r24, 0x40	; 64
     81e:	8a bf       	out	0x3a, r24	; 58
     820:	08 95       	ret

00000822 <EXTI0_voidInit>:
{
	#if EXTI0_u8_ISC == EXTI0_u8_LOW_LEVEL
	CLEAR_BIT(MCUCR,0);
	CLEAR_BIT(MCUCR,1);
	#elif EXTI0_u8_ISC == EXTI0_u8_RISING
	SET_BIT(MCUCR,0);
     822:	85 b7       	in	r24, 0x35	; 53
     824:	81 60       	ori	r24, 0x01	; 1
     826:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,1);	
     828:	85 b7       	in	r24, 0x35	; 53
     82a:	82 60       	ori	r24, 0x02	; 2
     82c:	85 bf       	out	0x35, r24	; 53
	#elif EXTI0_u8_ISC == EXTI0_u8_ANY_CHANGE
	SET_BIT(MCUCR,0);
	CLEAR_BIT(MCUCR,1);	
	#endif
	
	EXTI0_voidDisable();
     82e:	0e 94 09 04 	call	0x812	; 0x812 <EXTI0_voidDisable>
	GIE_voidDisable();
     832:	0e 94 d5 04 	call	0x9aa	; 0x9aa <GIE_voidDisable>
	EXTI0_voidClearFlag();
     836:	0e 94 0d 04 	call	0x81a	; 0x81a <EXTI0_voidClearFlag>
     83a:	08 95       	ret

0000083c <EXTI0_Set_CallBack>:
void EXTI0_voidClearFlag(void)
{
	SET_BIT(GIFR , 6);
}
void EXTI0_Set_CallBack(void (*fun_ptr) (void)){
    EXTI_0_CallBack = fun_ptr;
     83c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <EXTI_0_CallBack+0x1>
     840:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <EXTI_0_CallBack>
     844:	08 95       	ret

00000846 <__vector_1>:
}
void __vector_1(void) __attribute__((signal , used));
void __vector_1(void)
{
     846:	1f 92       	push	r1
     848:	0f 92       	push	r0
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	0f 92       	push	r0
     84e:	11 24       	eor	r1, r1
     850:	2f 93       	push	r18
     852:	3f 93       	push	r19
     854:	4f 93       	push	r20
     856:	5f 93       	push	r21
     858:	6f 93       	push	r22
     85a:	7f 93       	push	r23
     85c:	8f 93       	push	r24
     85e:	9f 93       	push	r25
     860:	af 93       	push	r26
     862:	bf 93       	push	r27
     864:	ef 93       	push	r30
     866:	ff 93       	push	r31
	EXTI_0_CallBack();
     868:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <EXTI_0_CallBack>
     86c:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <EXTI_0_CallBack+0x1>
     870:	09 95       	icall
}
     872:	ff 91       	pop	r31
     874:	ef 91       	pop	r30
     876:	bf 91       	pop	r27
     878:	af 91       	pop	r26
     87a:	9f 91       	pop	r25
     87c:	8f 91       	pop	r24
     87e:	7f 91       	pop	r23
     880:	6f 91       	pop	r22
     882:	5f 91       	pop	r21
     884:	4f 91       	pop	r20
     886:	3f 91       	pop	r19
     888:	2f 91       	pop	r18
     88a:	0f 90       	pop	r0
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	0f 90       	pop	r0
     890:	1f 90       	pop	r1
     892:	18 95       	reti

00000894 <EXTI1_voidEnable>:
	GIE_voidDisable();
	EXTI1_voidClearFlag();
}
void EXTI1_voidEnable(void)
{
	SET_BIT(GICR , 7);
     894:	8b b7       	in	r24, 0x3b	; 59
     896:	80 68       	ori	r24, 0x80	; 128
     898:	8b bf       	out	0x3b, r24	; 59
     89a:	08 95       	ret

0000089c <EXTI1_voidDisable>:
}
void EXTI1_voidDisable(void)
{
	CLEAR_BIT(GICR , 7);
     89c:	8b b7       	in	r24, 0x3b	; 59
     89e:	8f 77       	andi	r24, 0x7F	; 127
     8a0:	8b bf       	out	0x3b, r24	; 59
     8a2:	08 95       	ret

000008a4 <EXTI1_voidClearFlag>:
}
void EXTI1_voidClearFlag(void)
{
	SET_BIT(GIFR , 7);
     8a4:	8a b7       	in	r24, 0x3a	; 58
     8a6:	80 68       	ori	r24, 0x80	; 128
     8a8:	8a bf       	out	0x3a, r24	; 58
     8aa:	08 95       	ret

000008ac <EXTI1_voidInit>:
{
	#if EXTI1_u8_ISC == EXTI1_u8_LOW_LEVEL
	CLEAR_BIT(MCUCR,2);
	CLEAR_BIT(MCUCR,3);
	#elif EXTI0_u8_ISC == EXTI0_u8_RISING
	SET_BIT(MCUCR,2);
     8ac:	85 b7       	in	r24, 0x35	; 53
     8ae:	84 60       	ori	r24, 0x04	; 4
     8b0:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,3);	
     8b2:	85 b7       	in	r24, 0x35	; 53
     8b4:	88 60       	ori	r24, 0x08	; 8
     8b6:	85 bf       	out	0x35, r24	; 53
	#elif EXTI0_u8_ISC == EXTI0_u8_ANY_CHANGE
	SET_BIT(MCUCR,2);
	CLEAR_BIT(MCUCR,3);	
	#endif
	
	EXTI1_voidDisable();
     8b8:	0e 94 4e 04 	call	0x89c	; 0x89c <EXTI1_voidDisable>
	GIE_voidDisable();
     8bc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <GIE_voidDisable>
	EXTI1_voidClearFlag();
     8c0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <EXTI1_voidClearFlag>
     8c4:	08 95       	ret

000008c6 <EXTI1_Set_CallBack>:
void EXTI1_voidClearFlag(void)
{
	SET_BIT(GIFR , 7);
}
void EXTI1_Set_CallBack(void (*fun_ptr) (void)){
    EXTI_1_CallBack = fun_ptr;
     8c6:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <EXTI_1_CallBack+0x1>
     8ca:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <EXTI_1_CallBack>
     8ce:	08 95       	ret

000008d0 <__vector_2>:
}
void __vector_2(void) __attribute__((signal , used));
void __vector_2(void)
{
     8d0:	1f 92       	push	r1
     8d2:	0f 92       	push	r0
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	0f 92       	push	r0
     8d8:	11 24       	eor	r1, r1
     8da:	2f 93       	push	r18
     8dc:	3f 93       	push	r19
     8de:	4f 93       	push	r20
     8e0:	5f 93       	push	r21
     8e2:	6f 93       	push	r22
     8e4:	7f 93       	push	r23
     8e6:	8f 93       	push	r24
     8e8:	9f 93       	push	r25
     8ea:	af 93       	push	r26
     8ec:	bf 93       	push	r27
     8ee:	ef 93       	push	r30
     8f0:	ff 93       	push	r31
	EXTI_1_CallBack();
     8f2:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <EXTI_1_CallBack>
     8f6:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <EXTI_1_CallBack+0x1>
     8fa:	09 95       	icall
}
     8fc:	ff 91       	pop	r31
     8fe:	ef 91       	pop	r30
     900:	bf 91       	pop	r27
     902:	af 91       	pop	r26
     904:	9f 91       	pop	r25
     906:	8f 91       	pop	r24
     908:	7f 91       	pop	r23
     90a:	6f 91       	pop	r22
     90c:	5f 91       	pop	r21
     90e:	4f 91       	pop	r20
     910:	3f 91       	pop	r19
     912:	2f 91       	pop	r18
     914:	0f 90       	pop	r0
     916:	0f be       	out	0x3f, r0	; 63
     918:	0f 90       	pop	r0
     91a:	1f 90       	pop	r1
     91c:	18 95       	reti

0000091e <EXTI2_voidEnable>:
	GIE_voidDisable();
	EXTI2_voidClearFlag();
}
void EXTI2_voidEnable(void)
{
	SET_BIT(GICR , 5);
     91e:	8b b7       	in	r24, 0x3b	; 59
     920:	80 62       	ori	r24, 0x20	; 32
     922:	8b bf       	out	0x3b, r24	; 59
     924:	08 95       	ret

00000926 <EXTI2_voidDisable>:
}
void EXTI2_voidDisable(void)
{
	CLEAR_BIT(GICR , 5);
     926:	8b b7       	in	r24, 0x3b	; 59
     928:	8f 7d       	andi	r24, 0xDF	; 223
     92a:	8b bf       	out	0x3b, r24	; 59
     92c:	08 95       	ret

0000092e <EXTI2_voidClearFlag>:
}
void EXTI2_voidClearFlag(void)
{
	SET_BIT(GIFR , 5);
     92e:	8a b7       	in	r24, 0x3a	; 58
     930:	80 62       	ori	r24, 0x20	; 32
     932:	8a bf       	out	0x3a, r24	; 58
     934:	08 95       	ret

00000936 <EXTI2_voidInit>:
void (*EXTI_2_CallBack) (void) ;

void EXTI2_voidInit(void)
{
	#if EXTI0_u8_ISC == EXTI0_u8_RISING
	SET_BIT(MCUCSR,6);	
     936:	84 b7       	in	r24, 0x34	; 52
     938:	80 64       	ori	r24, 0x40	; 64
     93a:	84 bf       	out	0x34, r24	; 52
	#elif EXTI0_u8_ISC == EXTI0_u8_FALLING
	CLEAR_BIT(MCUCSR,6);	
	#endif
	
	EXTI2_voidDisable();
     93c:	0e 94 93 04 	call	0x926	; 0x926 <EXTI2_voidDisable>
	GIE_voidDisable();
     940:	0e 94 d5 04 	call	0x9aa	; 0x9aa <GIE_voidDisable>
	EXTI2_voidClearFlag();
     944:	0e 94 97 04 	call	0x92e	; 0x92e <EXTI2_voidClearFlag>
     948:	08 95       	ret

0000094a <EXTI2_Set_CallBack>:
void EXTI2_voidClearFlag(void)
{
	SET_BIT(GIFR , 5);
}
void EXTI2_Set_CallBack(void (*fun_ptr) (void)){
    EXTI_2_CallBack = fun_ptr;
     94a:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <EXTI_2_CallBack+0x1>
     94e:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <EXTI_2_CallBack>
     952:	08 95       	ret

00000954 <__vector_3>:
}
void __vector_3(void) __attribute__((signal , used));
void __vector_3(void)
{
     954:	1f 92       	push	r1
     956:	0f 92       	push	r0
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	0f 92       	push	r0
     95c:	11 24       	eor	r1, r1
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
	EXTI_2_CallBack();
     976:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <EXTI_2_CallBack>
     97a:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <EXTI_2_CallBack+0x1>
     97e:	09 95       	icall
     980:	ff 91       	pop	r31
     982:	ef 91       	pop	r30
     984:	bf 91       	pop	r27
     986:	af 91       	pop	r26
     988:	9f 91       	pop	r25
     98a:	8f 91       	pop	r24
     98c:	7f 91       	pop	r23
     98e:	6f 91       	pop	r22
     990:	5f 91       	pop	r21
     992:	4f 91       	pop	r20
     994:	3f 91       	pop	r19
     996:	2f 91       	pop	r18
     998:	0f 90       	pop	r0
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	0f 90       	pop	r0
     99e:	1f 90       	pop	r1
     9a0:	18 95       	reti

000009a2 <GIE_voidEnable>:

#include "GIE_private.h"

void GIE_voidEnable(void)
{
	SREG |= (1<<7);
     9a2:	8f b7       	in	r24, 0x3f	; 63
     9a4:	80 68       	ori	r24, 0x80	; 128
     9a6:	8f bf       	out	0x3f, r24	; 63
     9a8:	08 95       	ret

000009aa <GIE_voidDisable>:
}
void GIE_voidDisable(void)
{
	SREG &=~ (1<<7);
     9aa:	8f b7       	in	r24, 0x3f	; 63
     9ac:	8f 77       	andi	r24, 0x7F	; 127
     9ae:	8f bf       	out	0x3f, r24	; 63
     9b0:	08 95       	ret

000009b2 <TIMER0_setMode>:
    TIMER_0_OV_CallBack = fun_ptr;
}

void TIMER0_SetCTC_CallBack(void (*fun_ptr) (void)){
   
    TIMER_0_CTC_CallBack = fun_ptr;
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	69 f0       	breq	.+26     	; 0x9d0 <TIMER0_setMode+0x1e>
     9b6:	28 f0       	brcs	.+10     	; 0x9c2 <TIMER0_setMode+0x10>
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	89 f0       	breq	.+34     	; 0x9de <TIMER0_setMode+0x2c>
     9bc:	83 30       	cpi	r24, 0x03	; 3
     9be:	b1 f0       	breq	.+44     	; 0x9ec <TIMER0_setMode+0x3a>
     9c0:	08 95       	ret
     9c2:	83 b7       	in	r24, 0x33	; 51
     9c4:	8f 7b       	andi	r24, 0xBF	; 191
     9c6:	83 bf       	out	0x33, r24	; 51
     9c8:	83 b7       	in	r24, 0x33	; 51
     9ca:	87 7f       	andi	r24, 0xF7	; 247
     9cc:	83 bf       	out	0x33, r24	; 51
     9ce:	08 95       	ret
     9d0:	83 b7       	in	r24, 0x33	; 51
     9d2:	80 64       	ori	r24, 0x40	; 64
     9d4:	83 bf       	out	0x33, r24	; 51
     9d6:	83 b7       	in	r24, 0x33	; 51
     9d8:	87 7f       	andi	r24, 0xF7	; 247
     9da:	83 bf       	out	0x33, r24	; 51
     9dc:	08 95       	ret
     9de:	83 b7       	in	r24, 0x33	; 51
     9e0:	8f 7b       	andi	r24, 0xBF	; 191
     9e2:	83 bf       	out	0x33, r24	; 51
     9e4:	83 b7       	in	r24, 0x33	; 51
     9e6:	88 60       	ori	r24, 0x08	; 8
     9e8:	83 bf       	out	0x33, r24	; 51
     9ea:	08 95       	ret
     9ec:	83 b7       	in	r24, 0x33	; 51
     9ee:	80 64       	ori	r24, 0x40	; 64
     9f0:	83 bf       	out	0x33, r24	; 51
     9f2:	83 b7       	in	r24, 0x33	; 51
     9f4:	88 60       	ori	r24, 0x08	; 8
     9f6:	83 bf       	out	0x33, r24	; 51
     9f8:	08 95       	ret

000009fa <TIMER0_setTE>:
     9fa:	81 30       	cpi	r24, 0x01	; 1
     9fc:	69 f0       	breq	.+26     	; 0xa18 <TIMER0_setTE+0x1e>
     9fe:	28 f0       	brcs	.+10     	; 0xa0a <TIMER0_setTE+0x10>
     a00:	82 30       	cpi	r24, 0x02	; 2
     a02:	89 f0       	breq	.+34     	; 0xa26 <TIMER0_setTE+0x2c>
     a04:	83 30       	cpi	r24, 0x03	; 3
     a06:	b1 f0       	breq	.+44     	; 0xa34 <TIMER0_setTE+0x3a>
     a08:	08 95       	ret
     a0a:	83 b7       	in	r24, 0x33	; 51
     a0c:	8f 7e       	andi	r24, 0xEF	; 239
     a0e:	83 bf       	out	0x33, r24	; 51
     a10:	83 b7       	in	r24, 0x33	; 51
     a12:	8f 7d       	andi	r24, 0xDF	; 223
     a14:	83 bf       	out	0x33, r24	; 51
     a16:	08 95       	ret
     a18:	83 b7       	in	r24, 0x33	; 51
     a1a:	80 61       	ori	r24, 0x10	; 16
     a1c:	83 bf       	out	0x33, r24	; 51
     a1e:	83 b7       	in	r24, 0x33	; 51
     a20:	8f 7d       	andi	r24, 0xDF	; 223
     a22:	83 bf       	out	0x33, r24	; 51
     a24:	08 95       	ret
     a26:	83 b7       	in	r24, 0x33	; 51
     a28:	8f 7e       	andi	r24, 0xEF	; 239
     a2a:	83 bf       	out	0x33, r24	; 51
     a2c:	83 b7       	in	r24, 0x33	; 51
     a2e:	80 62       	ori	r24, 0x20	; 32
     a30:	83 bf       	out	0x33, r24	; 51
     a32:	08 95       	ret
     a34:	83 b7       	in	r24, 0x33	; 51
     a36:	80 61       	ori	r24, 0x10	; 16
     a38:	83 bf       	out	0x33, r24	; 51
     a3a:	83 b7       	in	r24, 0x33	; 51
     a3c:	80 62       	ori	r24, 0x20	; 32
     a3e:	83 bf       	out	0x33, r24	; 51
     a40:	08 95       	ret

00000a42 <TIMER0_setPrescaler>:
     a42:	93 b7       	in	r25, 0x33	; 51
     a44:	98 7f       	andi	r25, 0xF8	; 248
     a46:	93 bf       	out	0x33, r25	; 51
     a48:	93 b7       	in	r25, 0x33	; 51
     a4a:	89 2b       	or	r24, r25
     a4c:	83 bf       	out	0x33, r24	; 51
     a4e:	08 95       	ret

00000a50 <TIMER0_init>:
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <TIMER0_setMode>
     a56:	85 e0       	ldi	r24, 0x05	; 5
     a58:	0e 94 21 05 	call	0xa42	; 0xa42 <TIMER0_setPrescaler>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TIMER0_setTE>
     a62:	89 b7       	in	r24, 0x39	; 57
     a64:	8d 7f       	andi	r24, 0xFD	; 253
     a66:	89 bf       	out	0x39, r24	; 57
     a68:	89 b7       	in	r24, 0x39	; 57
     a6a:	8e 7f       	andi	r24, 0xFE	; 254
     a6c:	89 bf       	out	0x39, r24	; 57
     a6e:	88 b7       	in	r24, 0x38	; 56
     a70:	8d 7f       	andi	r24, 0xFD	; 253
     a72:	88 bf       	out	0x38, r24	; 56
     a74:	88 b7       	in	r24, 0x38	; 56
     a76:	8e 7f       	andi	r24, 0xFE	; 254
     a78:	88 bf       	out	0x38, r24	; 56
     a7a:	12 be       	out	0x32, r1	; 50
     a7c:	1c be       	out	0x3c, r1	; 60
     a7e:	08 95       	ret

00000a80 <TIMER0_OV_enable>:
     a80:	89 b7       	in	r24, 0x39	; 57
     a82:	81 60       	ori	r24, 0x01	; 1
     a84:	89 bf       	out	0x39, r24	; 57
     a86:	08 95       	ret

00000a88 <TIMER0_OV_disable>:
     a88:	89 b7       	in	r24, 0x39	; 57
     a8a:	8e 7f       	andi	r24, 0xFE	; 254
     a8c:	89 bf       	out	0x39, r24	; 57
     a8e:	08 95       	ret

00000a90 <TIMER0_SetTimerCounter>:
     a90:	82 bf       	out	0x32, r24	; 50
     a92:	08 95       	ret

00000a94 <TIMER0_SetOV_CallBack>:
     a94:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <TIMER_0_OV_CallBack+0x1>
     a98:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <TIMER_0_OV_CallBack>
     a9c:	08 95       	ret

00000a9e <__vector_11>:
}


void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
     a9e:	1f 92       	push	r1
     aa0:	0f 92       	push	r0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	0f 92       	push	r0
     aa6:	11 24       	eor	r1, r1
     aa8:	2f 93       	push	r18
     aaa:	3f 93       	push	r19
     aac:	4f 93       	push	r20
     aae:	5f 93       	push	r21
     ab0:	6f 93       	push	r22
     ab2:	7f 93       	push	r23
     ab4:	8f 93       	push	r24
     ab6:	9f 93       	push	r25
     ab8:	af 93       	push	r26
     aba:	bf 93       	push	r27
     abc:	ef 93       	push	r30
     abe:	ff 93       	push	r31
	TIMER_0_OV_CallBack();
     ac0:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <TIMER_0_OV_CallBack>
     ac4:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <TIMER_0_OV_CallBack+0x1>
     ac8:	09 95       	icall
}
     aca:	ff 91       	pop	r31
     acc:	ef 91       	pop	r30
     ace:	bf 91       	pop	r27
     ad0:	af 91       	pop	r26
     ad2:	9f 91       	pop	r25
     ad4:	8f 91       	pop	r24
     ad6:	7f 91       	pop	r23
     ad8:	6f 91       	pop	r22
     ada:	5f 91       	pop	r21
     adc:	4f 91       	pop	r20
     ade:	3f 91       	pop	r19
     ae0:	2f 91       	pop	r18
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	2f 93       	push	r18
     af8:	3f 93       	push	r19
     afa:	4f 93       	push	r20
     afc:	5f 93       	push	r21
     afe:	6f 93       	push	r22
     b00:	7f 93       	push	r23
     b02:	8f 93       	push	r24
     b04:	9f 93       	push	r25
     b06:	af 93       	push	r26
     b08:	bf 93       	push	r27
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
	TIMER_0_CTC_CallBack();
     b0e:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <TIMER_0_CTC_CallBack>
     b12:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <TIMER_0_CTC_CallBack+0x1>
     b16:	09 95       	icall
}
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	bf 91       	pop	r27
     b1e:	af 91       	pop	r26
     b20:	9f 91       	pop	r25
     b22:	8f 91       	pop	r24
     b24:	7f 91       	pop	r23
     b26:	6f 91       	pop	r22
     b28:	5f 91       	pop	r21
     b2a:	4f 91       	pop	r20
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	1f 90       	pop	r1
     b38:	18 95       	reti

00000b3a <__subsf3>:
     b3a:	50 58       	subi	r21, 0x80	; 128

00000b3c <__addsf3>:
     b3c:	bb 27       	eor	r27, r27
     b3e:	aa 27       	eor	r26, r26
     b40:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__addsf3x>
     b44:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_round>
     b48:	0e 94 21 07 	call	0xe42	; 0xe42 <__fp_pscA>
     b4c:	38 f0       	brcs	.+14     	; 0xb5c <__addsf3+0x20>
     b4e:	0e 94 28 07 	call	0xe50	; 0xe50 <__fp_pscB>
     b52:	20 f0       	brcs	.+8      	; 0xb5c <__addsf3+0x20>
     b54:	39 f4       	brne	.+14     	; 0xb64 <__addsf3+0x28>
     b56:	9f 3f       	cpi	r25, 0xFF	; 255
     b58:	19 f4       	brne	.+6      	; 0xb60 <__addsf3+0x24>
     b5a:	26 f4       	brtc	.+8      	; 0xb64 <__addsf3+0x28>
     b5c:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__fp_nan>
     b60:	0e f4       	brtc	.+2      	; 0xb64 <__addsf3+0x28>
     b62:	e0 95       	com	r30
     b64:	e7 fb       	bst	r30, 7
     b66:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__fp_inf>

00000b6a <__addsf3x>:
     b6a:	e9 2f       	mov	r30, r25
     b6c:	0e 94 40 07 	call	0xe80	; 0xe80 <__fp_split3>
     b70:	58 f3       	brcs	.-42     	; 0xb48 <__addsf3+0xc>
     b72:	ba 17       	cp	r27, r26
     b74:	62 07       	cpc	r22, r18
     b76:	73 07       	cpc	r23, r19
     b78:	84 07       	cpc	r24, r20
     b7a:	95 07       	cpc	r25, r21
     b7c:	20 f0       	brcs	.+8      	; 0xb86 <__addsf3x+0x1c>
     b7e:	79 f4       	brne	.+30     	; 0xb9e <__addsf3x+0x34>
     b80:	a6 f5       	brtc	.+104    	; 0xbea <__addsf3x+0x80>
     b82:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__fp_zero>
     b86:	0e f4       	brtc	.+2      	; 0xb8a <__addsf3x+0x20>
     b88:	e0 95       	com	r30
     b8a:	0b 2e       	mov	r0, r27
     b8c:	ba 2f       	mov	r27, r26
     b8e:	a0 2d       	mov	r26, r0
     b90:	0b 01       	movw	r0, r22
     b92:	b9 01       	movw	r22, r18
     b94:	90 01       	movw	r18, r0
     b96:	0c 01       	movw	r0, r24
     b98:	ca 01       	movw	r24, r20
     b9a:	a0 01       	movw	r20, r0
     b9c:	11 24       	eor	r1, r1
     b9e:	ff 27       	eor	r31, r31
     ba0:	59 1b       	sub	r21, r25
     ba2:	99 f0       	breq	.+38     	; 0xbca <__addsf3x+0x60>
     ba4:	59 3f       	cpi	r21, 0xF9	; 249
     ba6:	50 f4       	brcc	.+20     	; 0xbbc <__addsf3x+0x52>
     ba8:	50 3e       	cpi	r21, 0xE0	; 224
     baa:	68 f1       	brcs	.+90     	; 0xc06 <__addsf3x+0x9c>
     bac:	1a 16       	cp	r1, r26
     bae:	f0 40       	sbci	r31, 0x00	; 0
     bb0:	a2 2f       	mov	r26, r18
     bb2:	23 2f       	mov	r18, r19
     bb4:	34 2f       	mov	r19, r20
     bb6:	44 27       	eor	r20, r20
     bb8:	58 5f       	subi	r21, 0xF8	; 248
     bba:	f3 cf       	rjmp	.-26     	; 0xba2 <__addsf3x+0x38>
     bbc:	46 95       	lsr	r20
     bbe:	37 95       	ror	r19
     bc0:	27 95       	ror	r18
     bc2:	a7 95       	ror	r26
     bc4:	f0 40       	sbci	r31, 0x00	; 0
     bc6:	53 95       	inc	r21
     bc8:	c9 f7       	brne	.-14     	; 0xbbc <__addsf3x+0x52>
     bca:	7e f4       	brtc	.+30     	; 0xbea <__addsf3x+0x80>
     bcc:	1f 16       	cp	r1, r31
     bce:	ba 0b       	sbc	r27, r26
     bd0:	62 0b       	sbc	r22, r18
     bd2:	73 0b       	sbc	r23, r19
     bd4:	84 0b       	sbc	r24, r20
     bd6:	ba f0       	brmi	.+46     	; 0xc06 <__addsf3x+0x9c>
     bd8:	91 50       	subi	r25, 0x01	; 1
     bda:	a1 f0       	breq	.+40     	; 0xc04 <__addsf3x+0x9a>
     bdc:	ff 0f       	add	r31, r31
     bde:	bb 1f       	adc	r27, r27
     be0:	66 1f       	adc	r22, r22
     be2:	77 1f       	adc	r23, r23
     be4:	88 1f       	adc	r24, r24
     be6:	c2 f7       	brpl	.-16     	; 0xbd8 <__addsf3x+0x6e>
     be8:	0e c0       	rjmp	.+28     	; 0xc06 <__addsf3x+0x9c>
     bea:	ba 0f       	add	r27, r26
     bec:	62 1f       	adc	r22, r18
     bee:	73 1f       	adc	r23, r19
     bf0:	84 1f       	adc	r24, r20
     bf2:	48 f4       	brcc	.+18     	; 0xc06 <__addsf3x+0x9c>
     bf4:	87 95       	ror	r24
     bf6:	77 95       	ror	r23
     bf8:	67 95       	ror	r22
     bfa:	b7 95       	ror	r27
     bfc:	f7 95       	ror	r31
     bfe:	9e 3f       	cpi	r25, 0xFE	; 254
     c00:	08 f0       	brcs	.+2      	; 0xc04 <__addsf3x+0x9a>
     c02:	b0 cf       	rjmp	.-160    	; 0xb64 <__addsf3+0x28>
     c04:	93 95       	inc	r25
     c06:	88 0f       	add	r24, r24
     c08:	08 f0       	brcs	.+2      	; 0xc0c <__addsf3x+0xa2>
     c0a:	99 27       	eor	r25, r25
     c0c:	ee 0f       	add	r30, r30
     c0e:	97 95       	ror	r25
     c10:	87 95       	ror	r24
     c12:	08 95       	ret

00000c14 <__cmpsf2>:
     c14:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_cmp>
     c18:	08 f4       	brcc	.+2      	; 0xc1c <__cmpsf2+0x8>
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	08 95       	ret

00000c1e <__divsf3>:
     c1e:	0e 94 23 06 	call	0xc46	; 0xc46 <__divsf3x>
     c22:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_round>
     c26:	0e 94 28 07 	call	0xe50	; 0xe50 <__fp_pscB>
     c2a:	58 f0       	brcs	.+22     	; 0xc42 <__divsf3+0x24>
     c2c:	0e 94 21 07 	call	0xe42	; 0xe42 <__fp_pscA>
     c30:	40 f0       	brcs	.+16     	; 0xc42 <__divsf3+0x24>
     c32:	29 f4       	brne	.+10     	; 0xc3e <__divsf3+0x20>
     c34:	5f 3f       	cpi	r21, 0xFF	; 255
     c36:	29 f0       	breq	.+10     	; 0xc42 <__divsf3+0x24>
     c38:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__fp_inf>
     c3c:	51 11       	cpse	r21, r1
     c3e:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_szero>
     c42:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__fp_nan>

00000c46 <__divsf3x>:
     c46:	0e 94 40 07 	call	0xe80	; 0xe80 <__fp_split3>
     c4a:	68 f3       	brcs	.-38     	; 0xc26 <__divsf3+0x8>

00000c4c <__divsf3_pse>:
     c4c:	99 23       	and	r25, r25
     c4e:	b1 f3       	breq	.-20     	; 0xc3c <__divsf3+0x1e>
     c50:	55 23       	and	r21, r21
     c52:	91 f3       	breq	.-28     	; 0xc38 <__divsf3+0x1a>
     c54:	95 1b       	sub	r25, r21
     c56:	55 0b       	sbc	r21, r21
     c58:	bb 27       	eor	r27, r27
     c5a:	aa 27       	eor	r26, r26
     c5c:	62 17       	cp	r22, r18
     c5e:	73 07       	cpc	r23, r19
     c60:	84 07       	cpc	r24, r20
     c62:	38 f0       	brcs	.+14     	; 0xc72 <__divsf3_pse+0x26>
     c64:	9f 5f       	subi	r25, 0xFF	; 255
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
     c68:	22 0f       	add	r18, r18
     c6a:	33 1f       	adc	r19, r19
     c6c:	44 1f       	adc	r20, r20
     c6e:	aa 1f       	adc	r26, r26
     c70:	a9 f3       	breq	.-22     	; 0xc5c <__divsf3_pse+0x10>
     c72:	35 d0       	rcall	.+106    	; 0xcde <__divsf3_pse+0x92>
     c74:	0e 2e       	mov	r0, r30
     c76:	3a f0       	brmi	.+14     	; 0xc86 <__divsf3_pse+0x3a>
     c78:	e0 e8       	ldi	r30, 0x80	; 128
     c7a:	32 d0       	rcall	.+100    	; 0xce0 <__divsf3_pse+0x94>
     c7c:	91 50       	subi	r25, 0x01	; 1
     c7e:	50 40       	sbci	r21, 0x00	; 0
     c80:	e6 95       	lsr	r30
     c82:	00 1c       	adc	r0, r0
     c84:	ca f7       	brpl	.-14     	; 0xc78 <__divsf3_pse+0x2c>
     c86:	2b d0       	rcall	.+86     	; 0xcde <__divsf3_pse+0x92>
     c88:	fe 2f       	mov	r31, r30
     c8a:	29 d0       	rcall	.+82     	; 0xcde <__divsf3_pse+0x92>
     c8c:	66 0f       	add	r22, r22
     c8e:	77 1f       	adc	r23, r23
     c90:	88 1f       	adc	r24, r24
     c92:	bb 1f       	adc	r27, r27
     c94:	26 17       	cp	r18, r22
     c96:	37 07       	cpc	r19, r23
     c98:	48 07       	cpc	r20, r24
     c9a:	ab 07       	cpc	r26, r27
     c9c:	b0 e8       	ldi	r27, 0x80	; 128
     c9e:	09 f0       	breq	.+2      	; 0xca2 <__divsf3_pse+0x56>
     ca0:	bb 0b       	sbc	r27, r27
     ca2:	80 2d       	mov	r24, r0
     ca4:	bf 01       	movw	r22, r30
     ca6:	ff 27       	eor	r31, r31
     ca8:	93 58       	subi	r25, 0x83	; 131
     caa:	5f 4f       	sbci	r21, 0xFF	; 255
     cac:	3a f0       	brmi	.+14     	; 0xcbc <__divsf3_pse+0x70>
     cae:	9e 3f       	cpi	r25, 0xFE	; 254
     cb0:	51 05       	cpc	r21, r1
     cb2:	78 f0       	brcs	.+30     	; 0xcd2 <__divsf3_pse+0x86>
     cb4:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__fp_inf>
     cb8:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_szero>
     cbc:	5f 3f       	cpi	r21, 0xFF	; 255
     cbe:	e4 f3       	brlt	.-8      	; 0xcb8 <__divsf3_pse+0x6c>
     cc0:	98 3e       	cpi	r25, 0xE8	; 232
     cc2:	d4 f3       	brlt	.-12     	; 0xcb8 <__divsf3_pse+0x6c>
     cc4:	86 95       	lsr	r24
     cc6:	77 95       	ror	r23
     cc8:	67 95       	ror	r22
     cca:	b7 95       	ror	r27
     ccc:	f7 95       	ror	r31
     cce:	9f 5f       	subi	r25, 0xFF	; 255
     cd0:	c9 f7       	brne	.-14     	; 0xcc4 <__divsf3_pse+0x78>
     cd2:	88 0f       	add	r24, r24
     cd4:	91 1d       	adc	r25, r1
     cd6:	96 95       	lsr	r25
     cd8:	87 95       	ror	r24
     cda:	97 f9       	bld	r25, 7
     cdc:	08 95       	ret
     cde:	e1 e0       	ldi	r30, 0x01	; 1
     ce0:	66 0f       	add	r22, r22
     ce2:	77 1f       	adc	r23, r23
     ce4:	88 1f       	adc	r24, r24
     ce6:	bb 1f       	adc	r27, r27
     ce8:	62 17       	cp	r22, r18
     cea:	73 07       	cpc	r23, r19
     cec:	84 07       	cpc	r24, r20
     cee:	ba 07       	cpc	r27, r26
     cf0:	20 f0       	brcs	.+8      	; 0xcfa <__divsf3_pse+0xae>
     cf2:	62 1b       	sub	r22, r18
     cf4:	73 0b       	sbc	r23, r19
     cf6:	84 0b       	sbc	r24, r20
     cf8:	ba 0b       	sbc	r27, r26
     cfa:	ee 1f       	adc	r30, r30
     cfc:	88 f7       	brcc	.-30     	; 0xce0 <__divsf3_pse+0x94>
     cfe:	e0 95       	com	r30
     d00:	08 95       	ret

00000d02 <__fixsfsi>:
     d02:	0e 94 88 06 	call	0xd10	; 0xd10 <__fixunssfsi>
     d06:	68 94       	set
     d08:	b1 11       	cpse	r27, r1
     d0a:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_szero>
     d0e:	08 95       	ret

00000d10 <__fixunssfsi>:
     d10:	0e 94 48 07 	call	0xe90	; 0xe90 <__fp_splitA>
     d14:	88 f0       	brcs	.+34     	; 0xd38 <__fixunssfsi+0x28>
     d16:	9f 57       	subi	r25, 0x7F	; 127
     d18:	98 f0       	brcs	.+38     	; 0xd40 <__fixunssfsi+0x30>
     d1a:	b9 2f       	mov	r27, r25
     d1c:	99 27       	eor	r25, r25
     d1e:	b7 51       	subi	r27, 0x17	; 23
     d20:	b0 f0       	brcs	.+44     	; 0xd4e <__fixunssfsi+0x3e>
     d22:	e1 f0       	breq	.+56     	; 0xd5c <__fixunssfsi+0x4c>
     d24:	66 0f       	add	r22, r22
     d26:	77 1f       	adc	r23, r23
     d28:	88 1f       	adc	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	1a f0       	brmi	.+6      	; 0xd34 <__fixunssfsi+0x24>
     d2e:	ba 95       	dec	r27
     d30:	c9 f7       	brne	.-14     	; 0xd24 <__fixunssfsi+0x14>
     d32:	14 c0       	rjmp	.+40     	; 0xd5c <__fixunssfsi+0x4c>
     d34:	b1 30       	cpi	r27, 0x01	; 1
     d36:	91 f0       	breq	.+36     	; 0xd5c <__fixunssfsi+0x4c>
     d38:	0e 94 62 07 	call	0xec4	; 0xec4 <__fp_zero>
     d3c:	b1 e0       	ldi	r27, 0x01	; 1
     d3e:	08 95       	ret
     d40:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__fp_zero>
     d44:	67 2f       	mov	r22, r23
     d46:	78 2f       	mov	r23, r24
     d48:	88 27       	eor	r24, r24
     d4a:	b8 5f       	subi	r27, 0xF8	; 248
     d4c:	39 f0       	breq	.+14     	; 0xd5c <__fixunssfsi+0x4c>
     d4e:	b9 3f       	cpi	r27, 0xF9	; 249
     d50:	cc f3       	brlt	.-14     	; 0xd44 <__fixunssfsi+0x34>
     d52:	86 95       	lsr	r24
     d54:	77 95       	ror	r23
     d56:	67 95       	ror	r22
     d58:	b3 95       	inc	r27
     d5a:	d9 f7       	brne	.-10     	; 0xd52 <__fixunssfsi+0x42>
     d5c:	3e f4       	brtc	.+14     	; 0xd6c <__fixunssfsi+0x5c>
     d5e:	90 95       	com	r25
     d60:	80 95       	com	r24
     d62:	70 95       	com	r23
     d64:	61 95       	neg	r22
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	8f 4f       	sbci	r24, 0xFF	; 255
     d6a:	9f 4f       	sbci	r25, 0xFF	; 255
     d6c:	08 95       	ret

00000d6e <__floatunsisf>:
     d6e:	e8 94       	clt
     d70:	09 c0       	rjmp	.+18     	; 0xd84 <__floatsisf+0x12>

00000d72 <__floatsisf>:
     d72:	97 fb       	bst	r25, 7
     d74:	3e f4       	brtc	.+14     	; 0xd84 <__floatsisf+0x12>
     d76:	90 95       	com	r25
     d78:	80 95       	com	r24
     d7a:	70 95       	com	r23
     d7c:	61 95       	neg	r22
     d7e:	7f 4f       	sbci	r23, 0xFF	; 255
     d80:	8f 4f       	sbci	r24, 0xFF	; 255
     d82:	9f 4f       	sbci	r25, 0xFF	; 255
     d84:	99 23       	and	r25, r25
     d86:	a9 f0       	breq	.+42     	; 0xdb2 <__floatsisf+0x40>
     d88:	f9 2f       	mov	r31, r25
     d8a:	96 e9       	ldi	r25, 0x96	; 150
     d8c:	bb 27       	eor	r27, r27
     d8e:	93 95       	inc	r25
     d90:	f6 95       	lsr	r31
     d92:	87 95       	ror	r24
     d94:	77 95       	ror	r23
     d96:	67 95       	ror	r22
     d98:	b7 95       	ror	r27
     d9a:	f1 11       	cpse	r31, r1
     d9c:	f8 cf       	rjmp	.-16     	; 0xd8e <__floatsisf+0x1c>
     d9e:	fa f4       	brpl	.+62     	; 0xdde <__floatsisf+0x6c>
     da0:	bb 0f       	add	r27, r27
     da2:	11 f4       	brne	.+4      	; 0xda8 <__floatsisf+0x36>
     da4:	60 ff       	sbrs	r22, 0
     da6:	1b c0       	rjmp	.+54     	; 0xdde <__floatsisf+0x6c>
     da8:	6f 5f       	subi	r22, 0xFF	; 255
     daa:	7f 4f       	sbci	r23, 0xFF	; 255
     dac:	8f 4f       	sbci	r24, 0xFF	; 255
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	16 c0       	rjmp	.+44     	; 0xdde <__floatsisf+0x6c>
     db2:	88 23       	and	r24, r24
     db4:	11 f0       	breq	.+4      	; 0xdba <__floatsisf+0x48>
     db6:	96 e9       	ldi	r25, 0x96	; 150
     db8:	11 c0       	rjmp	.+34     	; 0xddc <__floatsisf+0x6a>
     dba:	77 23       	and	r23, r23
     dbc:	21 f0       	breq	.+8      	; 0xdc6 <__floatsisf+0x54>
     dbe:	9e e8       	ldi	r25, 0x8E	; 142
     dc0:	87 2f       	mov	r24, r23
     dc2:	76 2f       	mov	r23, r22
     dc4:	05 c0       	rjmp	.+10     	; 0xdd0 <__floatsisf+0x5e>
     dc6:	66 23       	and	r22, r22
     dc8:	71 f0       	breq	.+28     	; 0xde6 <__floatsisf+0x74>
     dca:	96 e8       	ldi	r25, 0x86	; 134
     dcc:	86 2f       	mov	r24, r22
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	2a f0       	brmi	.+10     	; 0xdde <__floatsisf+0x6c>
     dd4:	9a 95       	dec	r25
     dd6:	66 0f       	add	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	88 1f       	adc	r24, r24
     ddc:	da f7       	brpl	.-10     	; 0xdd4 <__floatsisf+0x62>
     dde:	88 0f       	add	r24, r24
     de0:	96 95       	lsr	r25
     de2:	87 95       	ror	r24
     de4:	97 f9       	bld	r25, 7
     de6:	08 95       	ret

00000de8 <__fp_cmp>:
     de8:	99 0f       	add	r25, r25
     dea:	00 08       	sbc	r0, r0
     dec:	55 0f       	add	r21, r21
     dee:	aa 0b       	sbc	r26, r26
     df0:	e0 e8       	ldi	r30, 0x80	; 128
     df2:	fe ef       	ldi	r31, 0xFE	; 254
     df4:	16 16       	cp	r1, r22
     df6:	17 06       	cpc	r1, r23
     df8:	e8 07       	cpc	r30, r24
     dfa:	f9 07       	cpc	r31, r25
     dfc:	c0 f0       	brcs	.+48     	; 0xe2e <__fp_cmp+0x46>
     dfe:	12 16       	cp	r1, r18
     e00:	13 06       	cpc	r1, r19
     e02:	e4 07       	cpc	r30, r20
     e04:	f5 07       	cpc	r31, r21
     e06:	98 f0       	brcs	.+38     	; 0xe2e <__fp_cmp+0x46>
     e08:	62 1b       	sub	r22, r18
     e0a:	73 0b       	sbc	r23, r19
     e0c:	84 0b       	sbc	r24, r20
     e0e:	95 0b       	sbc	r25, r21
     e10:	39 f4       	brne	.+14     	; 0xe20 <__fp_cmp+0x38>
     e12:	0a 26       	eor	r0, r26
     e14:	61 f0       	breq	.+24     	; 0xe2e <__fp_cmp+0x46>
     e16:	23 2b       	or	r18, r19
     e18:	24 2b       	or	r18, r20
     e1a:	25 2b       	or	r18, r21
     e1c:	21 f4       	brne	.+8      	; 0xe26 <__fp_cmp+0x3e>
     e1e:	08 95       	ret
     e20:	0a 26       	eor	r0, r26
     e22:	09 f4       	brne	.+2      	; 0xe26 <__fp_cmp+0x3e>
     e24:	a1 40       	sbci	r26, 0x01	; 1
     e26:	a6 95       	lsr	r26
     e28:	8f ef       	ldi	r24, 0xFF	; 255
     e2a:	81 1d       	adc	r24, r1
     e2c:	81 1d       	adc	r24, r1
     e2e:	08 95       	ret

00000e30 <__fp_inf>:
     e30:	97 f9       	bld	r25, 7
     e32:	9f 67       	ori	r25, 0x7F	; 127
     e34:	80 e8       	ldi	r24, 0x80	; 128
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	08 95       	ret

00000e3c <__fp_nan>:
     e3c:	9f ef       	ldi	r25, 0xFF	; 255
     e3e:	80 ec       	ldi	r24, 0xC0	; 192
     e40:	08 95       	ret

00000e42 <__fp_pscA>:
     e42:	00 24       	eor	r0, r0
     e44:	0a 94       	dec	r0
     e46:	16 16       	cp	r1, r22
     e48:	17 06       	cpc	r1, r23
     e4a:	18 06       	cpc	r1, r24
     e4c:	09 06       	cpc	r0, r25
     e4e:	08 95       	ret

00000e50 <__fp_pscB>:
     e50:	00 24       	eor	r0, r0
     e52:	0a 94       	dec	r0
     e54:	12 16       	cp	r1, r18
     e56:	13 06       	cpc	r1, r19
     e58:	14 06       	cpc	r1, r20
     e5a:	05 06       	cpc	r0, r21
     e5c:	08 95       	ret

00000e5e <__fp_round>:
     e5e:	09 2e       	mov	r0, r25
     e60:	03 94       	inc	r0
     e62:	00 0c       	add	r0, r0
     e64:	11 f4       	brne	.+4      	; 0xe6a <__fp_round+0xc>
     e66:	88 23       	and	r24, r24
     e68:	52 f0       	brmi	.+20     	; 0xe7e <__fp_round+0x20>
     e6a:	bb 0f       	add	r27, r27
     e6c:	40 f4       	brcc	.+16     	; 0xe7e <__fp_round+0x20>
     e6e:	bf 2b       	or	r27, r31
     e70:	11 f4       	brne	.+4      	; 0xe76 <__fp_round+0x18>
     e72:	60 ff       	sbrs	r22, 0
     e74:	04 c0       	rjmp	.+8      	; 0xe7e <__fp_round+0x20>
     e76:	6f 5f       	subi	r22, 0xFF	; 255
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	8f 4f       	sbci	r24, 0xFF	; 255
     e7c:	9f 4f       	sbci	r25, 0xFF	; 255
     e7e:	08 95       	ret

00000e80 <__fp_split3>:
     e80:	57 fd       	sbrc	r21, 7
     e82:	90 58       	subi	r25, 0x80	; 128
     e84:	44 0f       	add	r20, r20
     e86:	55 1f       	adc	r21, r21
     e88:	59 f0       	breq	.+22     	; 0xea0 <__fp_splitA+0x10>
     e8a:	5f 3f       	cpi	r21, 0xFF	; 255
     e8c:	71 f0       	breq	.+28     	; 0xeaa <__fp_splitA+0x1a>
     e8e:	47 95       	ror	r20

00000e90 <__fp_splitA>:
     e90:	88 0f       	add	r24, r24
     e92:	97 fb       	bst	r25, 7
     e94:	99 1f       	adc	r25, r25
     e96:	61 f0       	breq	.+24     	; 0xeb0 <__fp_splitA+0x20>
     e98:	9f 3f       	cpi	r25, 0xFF	; 255
     e9a:	79 f0       	breq	.+30     	; 0xeba <__fp_splitA+0x2a>
     e9c:	87 95       	ror	r24
     e9e:	08 95       	ret
     ea0:	12 16       	cp	r1, r18
     ea2:	13 06       	cpc	r1, r19
     ea4:	14 06       	cpc	r1, r20
     ea6:	55 1f       	adc	r21, r21
     ea8:	f2 cf       	rjmp	.-28     	; 0xe8e <__fp_split3+0xe>
     eaa:	46 95       	lsr	r20
     eac:	f1 df       	rcall	.-30     	; 0xe90 <__fp_splitA>
     eae:	08 c0       	rjmp	.+16     	; 0xec0 <__fp_splitA+0x30>
     eb0:	16 16       	cp	r1, r22
     eb2:	17 06       	cpc	r1, r23
     eb4:	18 06       	cpc	r1, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	f1 cf       	rjmp	.-30     	; 0xe9c <__fp_splitA+0xc>
     eba:	86 95       	lsr	r24
     ebc:	71 05       	cpc	r23, r1
     ebe:	61 05       	cpc	r22, r1
     ec0:	08 94       	sec
     ec2:	08 95       	ret

00000ec4 <__fp_zero>:
     ec4:	e8 94       	clt

00000ec6 <__fp_szero>:
     ec6:	bb 27       	eor	r27, r27
     ec8:	66 27       	eor	r22, r22
     eca:	77 27       	eor	r23, r23
     ecc:	cb 01       	movw	r24, r22
     ece:	97 f9       	bld	r25, 7
     ed0:	08 95       	ret

00000ed2 <__gesf2>:
     ed2:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_cmp>
     ed6:	08 f4       	brcc	.+2      	; 0xeda <__gesf2+0x8>
     ed8:	8f ef       	ldi	r24, 0xFF	; 255
     eda:	08 95       	ret

00000edc <__mulsf3>:
     edc:	0e 94 81 07 	call	0xf02	; 0xf02 <__mulsf3x>
     ee0:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_round>
     ee4:	0e 94 21 07 	call	0xe42	; 0xe42 <__fp_pscA>
     ee8:	38 f0       	brcs	.+14     	; 0xef8 <__mulsf3+0x1c>
     eea:	0e 94 28 07 	call	0xe50	; 0xe50 <__fp_pscB>
     eee:	20 f0       	brcs	.+8      	; 0xef8 <__mulsf3+0x1c>
     ef0:	95 23       	and	r25, r21
     ef2:	11 f0       	breq	.+4      	; 0xef8 <__mulsf3+0x1c>
     ef4:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__fp_inf>
     ef8:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__fp_nan>
     efc:	11 24       	eor	r1, r1
     efe:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_szero>

00000f02 <__mulsf3x>:
     f02:	0e 94 40 07 	call	0xe80	; 0xe80 <__fp_split3>
     f06:	70 f3       	brcs	.-36     	; 0xee4 <__mulsf3+0x8>

00000f08 <__mulsf3_pse>:
     f08:	95 9f       	mul	r25, r21
     f0a:	c1 f3       	breq	.-16     	; 0xefc <__mulsf3+0x20>
     f0c:	95 0f       	add	r25, r21
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	55 1f       	adc	r21, r21
     f12:	62 9f       	mul	r22, r18
     f14:	f0 01       	movw	r30, r0
     f16:	72 9f       	mul	r23, r18
     f18:	bb 27       	eor	r27, r27
     f1a:	f0 0d       	add	r31, r0
     f1c:	b1 1d       	adc	r27, r1
     f1e:	63 9f       	mul	r22, r19
     f20:	aa 27       	eor	r26, r26
     f22:	f0 0d       	add	r31, r0
     f24:	b1 1d       	adc	r27, r1
     f26:	aa 1f       	adc	r26, r26
     f28:	64 9f       	mul	r22, r20
     f2a:	66 27       	eor	r22, r22
     f2c:	b0 0d       	add	r27, r0
     f2e:	a1 1d       	adc	r26, r1
     f30:	66 1f       	adc	r22, r22
     f32:	82 9f       	mul	r24, r18
     f34:	22 27       	eor	r18, r18
     f36:	b0 0d       	add	r27, r0
     f38:	a1 1d       	adc	r26, r1
     f3a:	62 1f       	adc	r22, r18
     f3c:	73 9f       	mul	r23, r19
     f3e:	b0 0d       	add	r27, r0
     f40:	a1 1d       	adc	r26, r1
     f42:	62 1f       	adc	r22, r18
     f44:	83 9f       	mul	r24, r19
     f46:	a0 0d       	add	r26, r0
     f48:	61 1d       	adc	r22, r1
     f4a:	22 1f       	adc	r18, r18
     f4c:	74 9f       	mul	r23, r20
     f4e:	33 27       	eor	r19, r19
     f50:	a0 0d       	add	r26, r0
     f52:	61 1d       	adc	r22, r1
     f54:	23 1f       	adc	r18, r19
     f56:	84 9f       	mul	r24, r20
     f58:	60 0d       	add	r22, r0
     f5a:	21 1d       	adc	r18, r1
     f5c:	82 2f       	mov	r24, r18
     f5e:	76 2f       	mov	r23, r22
     f60:	6a 2f       	mov	r22, r26
     f62:	11 24       	eor	r1, r1
     f64:	9f 57       	subi	r25, 0x7F	; 127
     f66:	50 40       	sbci	r21, 0x00	; 0
     f68:	9a f0       	brmi	.+38     	; 0xf90 <__mulsf3_pse+0x88>
     f6a:	f1 f0       	breq	.+60     	; 0xfa8 <__mulsf3_pse+0xa0>
     f6c:	88 23       	and	r24, r24
     f6e:	4a f0       	brmi	.+18     	; 0xf82 <__mulsf3_pse+0x7a>
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	bb 1f       	adc	r27, r27
     f76:	66 1f       	adc	r22, r22
     f78:	77 1f       	adc	r23, r23
     f7a:	88 1f       	adc	r24, r24
     f7c:	91 50       	subi	r25, 0x01	; 1
     f7e:	50 40       	sbci	r21, 0x00	; 0
     f80:	a9 f7       	brne	.-22     	; 0xf6c <__mulsf3_pse+0x64>
     f82:	9e 3f       	cpi	r25, 0xFE	; 254
     f84:	51 05       	cpc	r21, r1
     f86:	80 f0       	brcs	.+32     	; 0xfa8 <__mulsf3_pse+0xa0>
     f88:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__fp_inf>
     f8c:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_szero>
     f90:	5f 3f       	cpi	r21, 0xFF	; 255
     f92:	e4 f3       	brlt	.-8      	; 0xf8c <__mulsf3_pse+0x84>
     f94:	98 3e       	cpi	r25, 0xE8	; 232
     f96:	d4 f3       	brlt	.-12     	; 0xf8c <__mulsf3_pse+0x84>
     f98:	86 95       	lsr	r24
     f9a:	77 95       	ror	r23
     f9c:	67 95       	ror	r22
     f9e:	b7 95       	ror	r27
     fa0:	f7 95       	ror	r31
     fa2:	e7 95       	ror	r30
     fa4:	9f 5f       	subi	r25, 0xFF	; 255
     fa6:	c1 f7       	brne	.-16     	; 0xf98 <__mulsf3_pse+0x90>
     fa8:	fe 2b       	or	r31, r30
     faa:	88 0f       	add	r24, r24
     fac:	91 1d       	adc	r25, r1
     fae:	96 95       	lsr	r25
     fb0:	87 95       	ror	r24
     fb2:	97 f9       	bld	r25, 7
     fb4:	08 95       	ret

00000fb6 <atof>:
     fb6:	66 27       	eor	r22, r22
     fb8:	77 27       	eor	r23, r23
     fba:	0c 94 04 08 	jmp	0x1008	; 0x1008 <strtod>

00000fbe <__itoa_ncheck>:
     fbe:	bb 27       	eor	r27, r27
     fc0:	4a 30       	cpi	r20, 0x0A	; 10
     fc2:	31 f4       	brne	.+12     	; 0xfd0 <__itoa_ncheck+0x12>
     fc4:	99 23       	and	r25, r25
     fc6:	22 f4       	brpl	.+8      	; 0xfd0 <__itoa_ncheck+0x12>
     fc8:	bd e2       	ldi	r27, 0x2D	; 45
     fca:	90 95       	com	r25
     fcc:	81 95       	neg	r24
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__utoa_common>

00000fd4 <__utoa_ncheck>:
     fd4:	bb 27       	eor	r27, r27

00000fd6 <__utoa_common>:
     fd6:	fb 01       	movw	r30, r22
     fd8:	55 27       	eor	r21, r21
     fda:	aa 27       	eor	r26, r26
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	aa 1f       	adc	r26, r26
     fe2:	a4 17       	cp	r26, r20
     fe4:	10 f0       	brcs	.+4      	; 0xfea <__utoa_common+0x14>
     fe6:	a4 1b       	sub	r26, r20
     fe8:	83 95       	inc	r24
     fea:	50 51       	subi	r21, 0x10	; 16
     fec:	b9 f7       	brne	.-18     	; 0xfdc <__utoa_common+0x6>
     fee:	a0 5d       	subi	r26, 0xD0	; 208
     ff0:	aa 33       	cpi	r26, 0x3A	; 58
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <__utoa_common+0x20>
     ff4:	a9 5d       	subi	r26, 0xD9	; 217
     ff6:	a1 93       	st	Z+, r26
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	79 f7       	brne	.-34     	; 0xfda <__utoa_common+0x4>
     ffc:	b1 11       	cpse	r27, r1
     ffe:	b1 93       	st	Z+, r27
    1000:	11 92       	st	Z+, r1
    1002:	cb 01       	movw	r24, r22
    1004:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <strrev>

00001008 <strtod>:
    1008:	a0 e0       	ldi	r26, 0x00	; 0
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	ea e0       	ldi	r30, 0x0A	; 10
    100e:	f8 e0       	ldi	r31, 0x08	; 8
    1010:	0c 94 97 09 	jmp	0x132e	; 0x132e <__prologue_saves__+0xc>
    1014:	ec 01       	movw	r28, r24
    1016:	6b 01       	movw	r12, r22
    1018:	61 15       	cp	r22, r1
    101a:	71 05       	cpc	r23, r1
    101c:	19 f0       	breq	.+6      	; 0x1024 <strtod+0x1c>
    101e:	fb 01       	movw	r30, r22
    1020:	91 83       	std	Z+1, r25	; 0x01
    1022:	80 83       	st	Z, r24
    1024:	7e 01       	movw	r14, r28
    1026:	ff ef       	ldi	r31, 0xFF	; 255
    1028:	ef 1a       	sub	r14, r31
    102a:	ff 0a       	sbc	r15, r31
    102c:	08 81       	ld	r16, Y
    102e:	80 2f       	mov	r24, r16
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 52 09 	call	0x12a4	; 0x12a4 <isspace>
    1036:	89 2b       	or	r24, r25
    1038:	11 f0       	breq	.+4      	; 0x103e <strtod+0x36>
    103a:	e7 01       	movw	r28, r14
    103c:	f3 cf       	rjmp	.-26     	; 0x1024 <strtod+0x1c>
    103e:	0d 32       	cpi	r16, 0x2D	; 45
    1040:	39 f4       	brne	.+14     	; 0x1050 <strtod+0x48>
    1042:	7e 01       	movw	r14, r28
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	e8 0e       	add	r14, r24
    1048:	f1 1c       	adc	r15, r1
    104a:	09 81       	ldd	r16, Y+1	; 0x01
    104c:	11 e0       	ldi	r17, 0x01	; 1
    104e:	08 c0       	rjmp	.+16     	; 0x1060 <strtod+0x58>
    1050:	0b 32       	cpi	r16, 0x2B	; 43
    1052:	29 f4       	brne	.+10     	; 0x105e <strtod+0x56>
    1054:	7e 01       	movw	r14, r28
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	e9 0e       	add	r14, r25
    105a:	f1 1c       	adc	r15, r1
    105c:	09 81       	ldd	r16, Y+1	; 0x01
    105e:	10 e0       	ldi	r17, 0x00	; 0
    1060:	e7 01       	movw	r28, r14
    1062:	21 97       	sbiw	r28, 0x01	; 1
    1064:	43 e0       	ldi	r20, 0x03	; 3
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	6c e5       	ldi	r22, 0x5C	; 92
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	ce 01       	movw	r24, r28
    106e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <strncasecmp_P>
    1072:	89 2b       	or	r24, r25
    1074:	c1 f4       	brne	.+48     	; 0x10a6 <strtod+0x9e>
    1076:	23 96       	adiw	r28, 0x03	; 3
    1078:	45 e0       	ldi	r20, 0x05	; 5
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	67 e5       	ldi	r22, 0x57	; 87
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	ce 01       	movw	r24, r28
    1082:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <strncasecmp_P>
    1086:	89 2b       	or	r24, r25
    1088:	09 f4       	brne	.+2      	; 0x108c <strtod+0x84>
    108a:	25 96       	adiw	r28, 0x05	; 5
    108c:	c1 14       	cp	r12, r1
    108e:	d1 04       	cpc	r13, r1
    1090:	19 f0       	breq	.+6      	; 0x1098 <strtod+0x90>
    1092:	f6 01       	movw	r30, r12
    1094:	d1 83       	std	Z+1, r29	; 0x01
    1096:	c0 83       	st	Z, r28
    1098:	11 11       	cpse	r17, r1
    109a:	f6 c0       	rjmp	.+492    	; 0x1288 <strtod+0x280>
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	80 e8       	ldi	r24, 0x80	; 128
    10a2:	9f e7       	ldi	r25, 0x7F	; 127
    10a4:	fa c0       	rjmp	.+500    	; 0x129a <strtod+0x292>
    10a6:	43 e0       	ldi	r20, 0x03	; 3
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	64 e5       	ldi	r22, 0x54	; 84
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	ce 01       	movw	r24, r28
    10b0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <strncasecmp_P>
    10b4:	89 2b       	or	r24, r25
    10b6:	59 f4       	brne	.+22     	; 0x10ce <strtod+0xc6>
    10b8:	c1 14       	cp	r12, r1
    10ba:	d1 04       	cpc	r13, r1
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <strtod+0xb8>
    10be:	e9 c0       	rjmp	.+466    	; 0x1292 <strtod+0x28a>
    10c0:	f2 e0       	ldi	r31, 0x02	; 2
    10c2:	ef 0e       	add	r14, r31
    10c4:	f1 1c       	adc	r15, r1
    10c6:	f6 01       	movw	r30, r12
    10c8:	f1 82       	std	Z+1, r15	; 0x01
    10ca:	e0 82       	st	Z, r14
    10cc:	e2 c0       	rjmp	.+452    	; 0x1292 <strtod+0x28a>
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	a9 01       	movw	r20, r18
    10d4:	c0 e0       	ldi	r28, 0x00	; 0
    10d6:	d0 e0       	ldi	r29, 0x00	; 0
    10d8:	f7 01       	movw	r30, r14
    10da:	80 ed       	ldi	r24, 0xD0	; 208
    10dc:	a8 2e       	mov	r10, r24
    10de:	a0 0e       	add	r10, r16
    10e0:	89 e0       	ldi	r24, 0x09	; 9
    10e2:	8a 15       	cp	r24, r10
    10e4:	30 f1       	brcs	.+76     	; 0x1132 <strtod+0x12a>
    10e6:	91 2f       	mov	r25, r17
    10e8:	92 60       	ori	r25, 0x02	; 2
    10ea:	b9 2e       	mov	r11, r25
    10ec:	81 2f       	mov	r24, r17
    10ee:	88 70       	andi	r24, 0x08	; 8
    10f0:	12 ff       	sbrs	r17, 2
    10f2:	04 c0       	rjmp	.+8      	; 0x10fc <strtod+0xf4>
    10f4:	81 11       	cpse	r24, r1
    10f6:	24 c0       	rjmp	.+72     	; 0x1140 <strtod+0x138>
    10f8:	21 96       	adiw	r28, 0x01	; 1
    10fa:	22 c0       	rjmp	.+68     	; 0x1140 <strtod+0x138>
    10fc:	81 11       	cpse	r24, r1
    10fe:	21 97       	sbiw	r28, 0x01	; 1
    1100:	a5 e0       	ldi	r26, 0x05	; 5
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	0e 94 86 09 	call	0x130c	; 0x130c <__muluhisi3>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	aa 1f       	adc	r26, r26
    1112:	bb 1f       	adc	r27, r27
    1114:	9c 01       	movw	r18, r24
    1116:	ad 01       	movw	r20, r26
    1118:	2a 0d       	add	r18, r10
    111a:	31 1d       	adc	r19, r1
    111c:	41 1d       	adc	r20, r1
    111e:	51 1d       	adc	r21, r1
    1120:	28 39       	cpi	r18, 0x98	; 152
    1122:	89 e9       	ldi	r24, 0x99	; 153
    1124:	38 07       	cpc	r19, r24
    1126:	48 07       	cpc	r20, r24
    1128:	89 e1       	ldi	r24, 0x19	; 25
    112a:	58 07       	cpc	r21, r24
    112c:	48 f0       	brcs	.+18     	; 0x1140 <strtod+0x138>
    112e:	16 60       	ori	r17, 0x06	; 6
    1130:	06 c0       	rjmp	.+12     	; 0x113e <strtod+0x136>
    1132:	9e ef       	ldi	r25, 0xFE	; 254
    1134:	a9 12       	cpse	r10, r25
    1136:	0a c0       	rjmp	.+20     	; 0x114c <strtod+0x144>
    1138:	13 fd       	sbrc	r17, 3
    113a:	40 c0       	rjmp	.+128    	; 0x11bc <strtod+0x1b4>
    113c:	18 60       	ori	r17, 0x08	; 8
    113e:	b1 2e       	mov	r11, r17
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	e8 1a       	sub	r14, r24
    1144:	f8 0a       	sbc	r15, r24
    1146:	00 81       	ld	r16, Z
    1148:	1b 2d       	mov	r17, r11
    114a:	c6 cf       	rjmp	.-116    	; 0x10d8 <strtod+0xd0>
    114c:	80 2f       	mov	r24, r16
    114e:	8f 7d       	andi	r24, 0xDF	; 223
    1150:	85 34       	cpi	r24, 0x45	; 69
    1152:	a1 f5       	brne	.+104    	; 0x11bc <strtod+0x1b4>
    1154:	80 81       	ld	r24, Z
    1156:	8d 32       	cpi	r24, 0x2D	; 45
    1158:	11 f4       	brne	.+4      	; 0x115e <strtod+0x156>
    115a:	10 61       	ori	r17, 0x10	; 16
    115c:	06 c0       	rjmp	.+12     	; 0x116a <strtod+0x162>
    115e:	8b 32       	cpi	r24, 0x2B	; 43
    1160:	21 f0       	breq	.+8      	; 0x116a <strtod+0x162>
    1162:	31 96       	adiw	r30, 0x01	; 1
    1164:	61 e0       	ldi	r22, 0x01	; 1
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <strtod+0x16a>
    116a:	81 81       	ldd	r24, Z+1	; 0x01
    116c:	32 96       	adiw	r30, 0x02	; 2
    116e:	62 e0       	ldi	r22, 0x02	; 2
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	80 53       	subi	r24, 0x30	; 48
    1174:	8a 30       	cpi	r24, 0x0A	; 10
    1176:	18 f0       	brcs	.+6      	; 0x117e <strtod+0x176>
    1178:	e6 1b       	sub	r30, r22
    117a:	f7 0b       	sbc	r31, r23
    117c:	1f c0       	rjmp	.+62     	; 0x11bc <strtod+0x1b4>
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	60 38       	cpi	r22, 0x80	; 128
    1184:	9c e0       	ldi	r25, 0x0C	; 12
    1186:	79 07       	cpc	r23, r25
    1188:	5c f4       	brge	.+22     	; 0x11a0 <strtod+0x198>
    118a:	db 01       	movw	r26, r22
    118c:	aa 0f       	add	r26, r26
    118e:	bb 1f       	adc	r27, r27
    1190:	aa 0f       	add	r26, r26
    1192:	bb 1f       	adc	r27, r27
    1194:	6a 0f       	add	r22, r26
    1196:	7b 1f       	adc	r23, r27
    1198:	66 0f       	add	r22, r22
    119a:	77 1f       	adc	r23, r23
    119c:	68 0f       	add	r22, r24
    119e:	71 1d       	adc	r23, r1
    11a0:	31 96       	adiw	r30, 0x01	; 1
    11a2:	df 01       	movw	r26, r30
    11a4:	11 97       	sbiw	r26, 0x01	; 1
    11a6:	8c 91       	ld	r24, X
    11a8:	80 53       	subi	r24, 0x30	; 48
    11aa:	8a 30       	cpi	r24, 0x0A	; 10
    11ac:	50 f3       	brcs	.-44     	; 0x1182 <strtod+0x17a>
    11ae:	14 ff       	sbrs	r17, 4
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <strtod+0x1b0>
    11b2:	71 95       	neg	r23
    11b4:	61 95       	neg	r22
    11b6:	71 09       	sbc	r23, r1
    11b8:	c6 0f       	add	r28, r22
    11ba:	d7 1f       	adc	r29, r23
    11bc:	11 ff       	sbrs	r17, 1
    11be:	08 c0       	rjmp	.+16     	; 0x11d0 <strtod+0x1c8>
    11c0:	c1 14       	cp	r12, r1
    11c2:	d1 04       	cpc	r13, r1
    11c4:	29 f0       	breq	.+10     	; 0x11d0 <strtod+0x1c8>
    11c6:	cf 01       	movw	r24, r30
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f6 01       	movw	r30, r12
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24
    11d0:	ca 01       	movw	r24, r20
    11d2:	b9 01       	movw	r22, r18
    11d4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__floatunsisf>
    11d8:	21 2f       	mov	r18, r17
    11da:	23 70       	andi	r18, 0x03	; 3
    11dc:	23 30       	cpi	r18, 0x03	; 3
    11de:	19 f0       	breq	.+6      	; 0x11e6 <strtod+0x1de>
    11e0:	4b 01       	movw	r8, r22
    11e2:	5c 01       	movw	r10, r24
    11e4:	06 c0       	rjmp	.+12     	; 0x11f2 <strtod+0x1ea>
    11e6:	4b 01       	movw	r8, r22
    11e8:	5c 01       	movw	r10, r24
    11ea:	b7 fa       	bst	r11, 7
    11ec:	b0 94       	com	r11
    11ee:	b7 f8       	bld	r11, 7
    11f0:	b0 94       	com	r11
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	a9 01       	movw	r20, r18
    11f8:	c5 01       	movw	r24, r10
    11fa:	b4 01       	movw	r22, r8
    11fc:	0e 94 0a 06 	call	0xc14	; 0xc14 <__cmpsf2>
    1200:	88 23       	and	r24, r24
    1202:	09 f4       	brne	.+2      	; 0x1206 <strtod+0x1fe>
    1204:	3e c0       	rjmp	.+124    	; 0x1282 <strtod+0x27a>
    1206:	d7 ff       	sbrs	r29, 7
    1208:	06 c0       	rjmp	.+12     	; 0x1216 <strtod+0x20e>
    120a:	d1 95       	neg	r29
    120c:	c1 95       	neg	r28
    120e:	d1 09       	sbc	r29, r1
    1210:	03 e7       	ldi	r16, 0x73	; 115
    1212:	10 e0       	ldi	r17, 0x00	; 0
    1214:	02 c0       	rjmp	.+4      	; 0x121a <strtod+0x212>
    1216:	0b e8       	ldi	r16, 0x8B	; 139
    1218:	10 e0       	ldi	r17, 0x00	; 0
    121a:	68 01       	movw	r12, r16
    121c:	f8 e1       	ldi	r31, 0x18	; 24
    121e:	cf 1a       	sub	r12, r31
    1220:	d1 08       	sbc	r13, r1
    1222:	90 e2       	ldi	r25, 0x20	; 32
    1224:	e9 2e       	mov	r14, r25
    1226:	f1 2c       	mov	r15, r1
    1228:	ce 15       	cp	r28, r14
    122a:	df 05       	cpc	r29, r15
    122c:	74 f0       	brlt	.+28     	; 0x124a <strtod+0x242>
    122e:	f8 01       	movw	r30, r16
    1230:	25 91       	lpm	r18, Z+
    1232:	35 91       	lpm	r19, Z+
    1234:	45 91       	lpm	r20, Z+
    1236:	54 91       	lpm	r21, Z
    1238:	c5 01       	movw	r24, r10
    123a:	b4 01       	movw	r22, r8
    123c:	0e 94 6e 07 	call	0xedc	; 0xedc <__mulsf3>
    1240:	4b 01       	movw	r8, r22
    1242:	5c 01       	movw	r10, r24
    1244:	ce 19       	sub	r28, r14
    1246:	df 09       	sbc	r29, r15
    1248:	ef cf       	rjmp	.-34     	; 0x1228 <strtod+0x220>
    124a:	04 50       	subi	r16, 0x04	; 4
    124c:	11 09       	sbc	r17, r1
    124e:	f5 94       	asr	r15
    1250:	e7 94       	ror	r14
    1252:	0c 15       	cp	r16, r12
    1254:	1d 05       	cpc	r17, r13
    1256:	41 f7       	brne	.-48     	; 0x1228 <strtod+0x220>
    1258:	8a 2d       	mov	r24, r10
    125a:	88 0f       	add	r24, r24
    125c:	8b 2d       	mov	r24, r11
    125e:	88 1f       	adc	r24, r24
    1260:	8f 3f       	cpi	r24, 0xFF	; 255
    1262:	49 f0       	breq	.+18     	; 0x1276 <strtod+0x26e>
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	a9 01       	movw	r20, r18
    126a:	c5 01       	movw	r24, r10
    126c:	b4 01       	movw	r22, r8
    126e:	0e 94 0a 06 	call	0xc14	; 0xc14 <__cmpsf2>
    1272:	81 11       	cpse	r24, r1
    1274:	06 c0       	rjmp	.+12     	; 0x1282 <strtod+0x27a>
    1276:	82 e2       	ldi	r24, 0x22	; 34
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <errno+0x1>
    127e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <errno>
    1282:	c5 01       	movw	r24, r10
    1284:	b4 01       	movw	r22, r8
    1286:	09 c0       	rjmp	.+18     	; 0x129a <strtod+0x292>
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	80 e8       	ldi	r24, 0x80	; 128
    128e:	9f ef       	ldi	r25, 0xFF	; 255
    1290:	04 c0       	rjmp	.+8      	; 0x129a <strtod+0x292>
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	80 ec       	ldi	r24, 0xC0	; 192
    1298:	9f e7       	ldi	r25, 0x7F	; 127
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	ec e0       	ldi	r30, 0x0C	; 12
    12a0:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__epilogue_restores__+0xc>

000012a4 <isspace>:
    12a4:	91 11       	cpse	r25, r1
    12a6:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__ctype_isfalse>
    12aa:	80 32       	cpi	r24, 0x20	; 32
    12ac:	19 f0       	breq	.+6      	; 0x12b4 <isspace+0x10>
    12ae:	89 50       	subi	r24, 0x09	; 9
    12b0:	85 50       	subi	r24, 0x05	; 5
    12b2:	c8 f7       	brcc	.-14     	; 0x12a6 <isspace+0x2>
    12b4:	08 95       	ret

000012b6 <strncasecmp_P>:
    12b6:	fb 01       	movw	r30, r22
    12b8:	dc 01       	movw	r26, r24
    12ba:	41 50       	subi	r20, 0x01	; 1
    12bc:	50 40       	sbci	r21, 0x00	; 0
    12be:	88 f0       	brcs	.+34     	; 0x12e2 <strncasecmp_P+0x2c>
    12c0:	8d 91       	ld	r24, X+
    12c2:	81 34       	cpi	r24, 0x41	; 65
    12c4:	1c f0       	brlt	.+6      	; 0x12cc <strncasecmp_P+0x16>
    12c6:	8b 35       	cpi	r24, 0x5B	; 91
    12c8:	0c f4       	brge	.+2      	; 0x12cc <strncasecmp_P+0x16>
    12ca:	80 5e       	subi	r24, 0xE0	; 224
    12cc:	65 91       	lpm	r22, Z+
    12ce:	61 34       	cpi	r22, 0x41	; 65
    12d0:	1c f0       	brlt	.+6      	; 0x12d8 <strncasecmp_P+0x22>
    12d2:	6b 35       	cpi	r22, 0x5B	; 91
    12d4:	0c f4       	brge	.+2      	; 0x12d8 <strncasecmp_P+0x22>
    12d6:	60 5e       	subi	r22, 0xE0	; 224
    12d8:	86 1b       	sub	r24, r22
    12da:	61 11       	cpse	r22, r1
    12dc:	71 f3       	breq	.-36     	; 0x12ba <strncasecmp_P+0x4>
    12de:	99 0b       	sbc	r25, r25
    12e0:	08 95       	ret
    12e2:	88 1b       	sub	r24, r24
    12e4:	fc cf       	rjmp	.-8      	; 0x12de <strncasecmp_P+0x28>

000012e6 <strrev>:
    12e6:	dc 01       	movw	r26, r24
    12e8:	fc 01       	movw	r30, r24
    12ea:	67 2f       	mov	r22, r23
    12ec:	71 91       	ld	r23, Z+
    12ee:	77 23       	and	r23, r23
    12f0:	e1 f7       	brne	.-8      	; 0x12ea <strrev+0x4>
    12f2:	32 97       	sbiw	r30, 0x02	; 2
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <strrev+0x18>
    12f6:	7c 91       	ld	r23, X
    12f8:	6d 93       	st	X+, r22
    12fa:	70 83       	st	Z, r23
    12fc:	62 91       	ld	r22, -Z
    12fe:	ae 17       	cp	r26, r30
    1300:	bf 07       	cpc	r27, r31
    1302:	c8 f3       	brcs	.-14     	; 0x12f6 <strrev+0x10>
    1304:	08 95       	ret

00001306 <__ctype_isfalse>:
    1306:	99 27       	eor	r25, r25
    1308:	88 27       	eor	r24, r24

0000130a <__ctype_istrue>:
    130a:	08 95       	ret

0000130c <__muluhisi3>:
    130c:	0e 94 c8 09 	call	0x1390	; 0x1390 <__umulhisi3>
    1310:	a5 9f       	mul	r26, r21
    1312:	90 0d       	add	r25, r0
    1314:	b4 9f       	mul	r27, r20
    1316:	90 0d       	add	r25, r0
    1318:	a4 9f       	mul	r26, r20
    131a:	80 0d       	add	r24, r0
    131c:	91 1d       	adc	r25, r1
    131e:	11 24       	eor	r1, r1
    1320:	08 95       	ret

00001322 <__prologue_saves__>:
    1322:	2f 92       	push	r2
    1324:	3f 92       	push	r3
    1326:	4f 92       	push	r4
    1328:	5f 92       	push	r5
    132a:	6f 92       	push	r6
    132c:	7f 92       	push	r7
    132e:	8f 92       	push	r8
    1330:	9f 92       	push	r9
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	ca 1b       	sub	r28, r26
    134c:	db 0b       	sbc	r29, r27
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	09 94       	ijmp

0000135a <__epilogue_restores__>:
    135a:	2a 88       	ldd	r2, Y+18	; 0x12
    135c:	39 88       	ldd	r3, Y+17	; 0x11
    135e:	48 88       	ldd	r4, Y+16	; 0x10
    1360:	5f 84       	ldd	r5, Y+15	; 0x0f
    1362:	6e 84       	ldd	r6, Y+14	; 0x0e
    1364:	7d 84       	ldd	r7, Y+13	; 0x0d
    1366:	8c 84       	ldd	r8, Y+12	; 0x0c
    1368:	9b 84       	ldd	r9, Y+11	; 0x0b
    136a:	aa 84       	ldd	r10, Y+10	; 0x0a
    136c:	b9 84       	ldd	r11, Y+9	; 0x09
    136e:	c8 84       	ldd	r12, Y+8	; 0x08
    1370:	df 80       	ldd	r13, Y+7	; 0x07
    1372:	ee 80       	ldd	r14, Y+6	; 0x06
    1374:	fd 80       	ldd	r15, Y+5	; 0x05
    1376:	0c 81       	ldd	r16, Y+4	; 0x04
    1378:	1b 81       	ldd	r17, Y+3	; 0x03
    137a:	aa 81       	ldd	r26, Y+2	; 0x02
    137c:	b9 81       	ldd	r27, Y+1	; 0x01
    137e:	ce 0f       	add	r28, r30
    1380:	d1 1d       	adc	r29, r1
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	ed 01       	movw	r28, r26
    138e:	08 95       	ret

00001390 <__umulhisi3>:
    1390:	a2 9f       	mul	r26, r18
    1392:	b0 01       	movw	r22, r0
    1394:	b3 9f       	mul	r27, r19
    1396:	c0 01       	movw	r24, r0
    1398:	a3 9f       	mul	r26, r19
    139a:	70 0d       	add	r23, r0
    139c:	81 1d       	adc	r24, r1
    139e:	11 24       	eor	r1, r1
    13a0:	91 1d       	adc	r25, r1
    13a2:	b2 9f       	mul	r27, r18
    13a4:	70 0d       	add	r23, r0
    13a6:	81 1d       	adc	r24, r1
    13a8:	11 24       	eor	r1, r1
    13aa:	91 1d       	adc	r25, r1
    13ac:	08 95       	ret

000013ae <_exit>:
    13ae:	f8 94       	cli

000013b0 <__stop_program>:
    13b0:	ff cf       	rjmp	.-2      	; 0x13b0 <__stop_program>
